// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package local_project.merge_0_1;

import routines.DataOperation;
import routines.OpenStreetMap;
import routines.TalendDataGenerator;
import routines.Relational;
import routines.Mathematical;
import routines.GeometryUtility;
import routines.Numeric;
import routines.GeoOperation;
import routines.GeometryOperation;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: merge Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.3.1.20161216_1026
 * @status 
 */
public class merge implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(outputDir != null){
				
					this.setProperty("outputDir", outputDir.toString());
				
			}
			
		}

public String outputDir;
public String getOutputDir(){
	return this.outputDir;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "merge";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			 globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent);
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				merge.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(merge.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileDelete_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplicate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		





public void tFileDelete_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileDelete_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_1", false);
		start_Hash.put("tFileDelete_1", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_1";

	
		int tos_count_tFileDelete_1 = 0;
		
    	class BytesLimit65535_tFileDelete_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileDelete_1().limitLog4jByte();

 



/**
 * [tFileDelete_1 begin ] stop
 */
	
	/**
	 * [tFileDelete_1 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 

class DeleteFoldertFileDelete_1{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
    java.io.File file_tFileDelete_1=new java.io.File(System.getProperty("java.io.tmpdir") + "/sdiDump/outfinal.tsv");
    if(file_tFileDelete_1.exists()&& file_tFileDelete_1.isFile()){
    	if(file_tFileDelete_1.delete()){
    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File deleted.");
    	}else{
    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "No file deleted.");
    	}
    }else{
    	globalMap.put("tFileDelete_1_CURRENT_STATUS", "File does not exist or is invalid.");
	}
	globalMap.put("tFileDelete_1_DELETE_PATH",System.getProperty("java.io.tmpdir") + "/sdiDump/outfinal.tsv");
    
     
 

 


	tos_count_tFileDelete_1++;

/**
 * [tFileDelete_1 main ] stop
 */
	
	/**
	 * [tFileDelete_1 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 

ok_Hash.put("tFileDelete_1", true);
end_Hash.put("tFileDelete_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputDelimited_1Process(globalMap);



/**
 * [tFileDelete_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_1 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_merge = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_merge = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String dataset_id;

				public String getDataset_id () {
					return this.dataset_id;
				}
				
			    public String datestamp;

				public String getDatestamp () {
					return this.datestamp;
				}
				
			    public String crs;

				public String getCrs () {
					return this.crs;
				}
				
			    public String title;

				public String getTitle () {
					return this.title;
				}
				
			    public String edition;

				public String getEdition () {
					return this.edition;
				}
				
			    public String abstracts;

				public String getAbstracts () {
					return this.abstracts;
				}
				
			    public String custodian;

				public String getCustodian () {
					return this.custodian;
				}
				
			    public String inspire_themes;

				public String getInspire_themes () {
					return this.inspire_themes;
				}
				
			    public String gemet_concepts;

				public String getGemet_concepts () {
					return this.gemet_concepts;
				}
				
			    public Float wlon;

				public Float getWlon () {
					return this.wlon;
				}
				
			    public Float elon;

				public Float getElon () {
					return this.elon;
				}
				
			    public Float slat;

				public Float getSlat () {
					return this.slat;
				}
				
			    public Float nlat;

				public Float getNlat () {
					return this.nlat;
				}
				
			    public String stype;

				public String getStype () {
					return this.stype;
				}
				
			    public String scaleres;

				public String getScaleres () {
					return this.scaleres;
				}
				
			    public String tbegin;

				public String getTbegin () {
					return this.tbegin;
				}
				
			    public String tend;

				public String getTend () {
					return this.tend;
				}
				
			    public String protocols;

				public String getProtocols () {
					return this.protocols;
				}
				
			    public String links;

				public String getLinks () {
					return this.links;
				}
				
			    public String lineage;

				public String getLineage () {
					return this.lineage;
				}
				
			    public String data_src;

				public String getData_src () {
					return this.data_src;
				}
				
			    public String published;

				public String getPublished () {
					return this.published;
				}
				
			    public String sdiurl;

				public String getSdiurl () {
					return this.sdiurl;
				}
				
			    public String distributionFormat;

				public String getDistributionFormat () {
					return this.distributionFormat;
				}
				
			    public String place;

				public String getPlace () {
					return this.place;
				}
				
			    public String useLimitation;

				public String getUseLimitation () {
					return this.useLimitation;
				}
				
			    public String browseGraphic;

				public String getBrowseGraphic () {
					return this.browseGraphic;
				}
				
			    public String shortname;

				public String getShortname () {
					return this.shortname;
				}
				
			    public String referenceFlag;

				public String getReferenceFlag () {
					return this.referenceFlag;
				}
				
			    public String wms;

				public String getWms () {
					return this.wms;
				}
				
			    public String idpTopics;

				public String getIdpTopics () {
					return this.idpTopics;
				}
				
			    public String restApi;

				public String getRestApi () {
					return this.restApi;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_merge.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_merge.length == 0) {
   					commonByteArray_LOCAL_PROJECT_merge = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_merge = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_merge, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_merge, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_merge) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.dataset_id = readString(dis);
					
					this.datestamp = readString(dis);
					
					this.crs = readString(dis);
					
					this.title = readString(dis);
					
					this.edition = readString(dis);
					
					this.abstracts = readString(dis);
					
					this.custodian = readString(dis);
					
					this.inspire_themes = readString(dis);
					
					this.gemet_concepts = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.wlon = null;
           				} else {
           			    	this.wlon = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.elon = null;
           				} else {
           			    	this.elon = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.slat = null;
           				} else {
           			    	this.slat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nlat = null;
           				} else {
           			    	this.nlat = dis.readFloat();
           				}
					
					this.stype = readString(dis);
					
					this.scaleres = readString(dis);
					
					this.tbegin = readString(dis);
					
					this.tend = readString(dis);
					
					this.protocols = readString(dis);
					
					this.links = readString(dis);
					
					this.lineage = readString(dis);
					
					this.data_src = readString(dis);
					
					this.published = readString(dis);
					
					this.sdiurl = readString(dis);
					
					this.distributionFormat = readString(dis);
					
					this.place = readString(dis);
					
					this.useLimitation = readString(dis);
					
					this.browseGraphic = readString(dis);
					
					this.shortname = readString(dis);
					
					this.referenceFlag = readString(dis);
					
					this.wms = readString(dis);
					
					this.idpTopics = readString(dis);
					
					this.restApi = readString(dis);
					
					this.status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.dataset_id,dos);
					
					// String
				
						writeString(this.datestamp,dos);
					
					// String
				
						writeString(this.crs,dos);
					
					// String
				
						writeString(this.title,dos);
					
					// String
				
						writeString(this.edition,dos);
					
					// String
				
						writeString(this.abstracts,dos);
					
					// String
				
						writeString(this.custodian,dos);
					
					// String
				
						writeString(this.inspire_themes,dos);
					
					// String
				
						writeString(this.gemet_concepts,dos);
					
					// Float
				
						if(this.wlon == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.wlon);
		            	}
					
					// Float
				
						if(this.elon == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.elon);
		            	}
					
					// Float
				
						if(this.slat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.slat);
		            	}
					
					// Float
				
						if(this.nlat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.nlat);
		            	}
					
					// String
				
						writeString(this.stype,dos);
					
					// String
				
						writeString(this.scaleres,dos);
					
					// String
				
						writeString(this.tbegin,dos);
					
					// String
				
						writeString(this.tend,dos);
					
					// String
				
						writeString(this.protocols,dos);
					
					// String
				
						writeString(this.links,dos);
					
					// String
				
						writeString(this.lineage,dos);
					
					// String
				
						writeString(this.data_src,dos);
					
					// String
				
						writeString(this.published,dos);
					
					// String
				
						writeString(this.sdiurl,dos);
					
					// String
				
						writeString(this.distributionFormat,dos);
					
					// String
				
						writeString(this.place,dos);
					
					// String
				
						writeString(this.useLimitation,dos);
					
					// String
				
						writeString(this.browseGraphic,dos);
					
					// String
				
						writeString(this.shortname,dos);
					
					// String
				
						writeString(this.referenceFlag,dos);
					
					// String
				
						writeString(this.wms,dos);
					
					// String
				
						writeString(this.idpTopics,dos);
					
					// String
				
						writeString(this.restApi,dos);
					
					// String
				
						writeString(this.status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",dataset_id="+dataset_id);
		sb.append(",datestamp="+datestamp);
		sb.append(",crs="+crs);
		sb.append(",title="+title);
		sb.append(",edition="+edition);
		sb.append(",abstracts="+abstracts);
		sb.append(",custodian="+custodian);
		sb.append(",inspire_themes="+inspire_themes);
		sb.append(",gemet_concepts="+gemet_concepts);
		sb.append(",wlon="+String.valueOf(wlon));
		sb.append(",elon="+String.valueOf(elon));
		sb.append(",slat="+String.valueOf(slat));
		sb.append(",nlat="+String.valueOf(nlat));
		sb.append(",stype="+stype);
		sb.append(",scaleres="+scaleres);
		sb.append(",tbegin="+tbegin);
		sb.append(",tend="+tend);
		sb.append(",protocols="+protocols);
		sb.append(",links="+links);
		sb.append(",lineage="+lineage);
		sb.append(",data_src="+data_src);
		sb.append(",published="+published);
		sb.append(",sdiurl="+sdiurl);
		sb.append(",distributionFormat="+distributionFormat);
		sb.append(",place="+place);
		sb.append(",useLimitation="+useLimitation);
		sb.append(",browseGraphic="+browseGraphic);
		sb.append(",shortname="+shortname);
		sb.append(",referenceFlag="+referenceFlag);
		sb.append(",wms="+wms);
		sb.append(",idpTopics="+idpTopics);
		sb.append(",restApi="+restApi);
		sb.append(",status="+status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_merge = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_merge = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String dataset_id;

				public String getDataset_id () {
					return this.dataset_id;
				}
				
			    public String datestamp;

				public String getDatestamp () {
					return this.datestamp;
				}
				
			    public String crs;

				public String getCrs () {
					return this.crs;
				}
				
			    public String title;

				public String getTitle () {
					return this.title;
				}
				
			    public String edition;

				public String getEdition () {
					return this.edition;
				}
				
			    public String abstracts;

				public String getAbstracts () {
					return this.abstracts;
				}
				
			    public String custodian;

				public String getCustodian () {
					return this.custodian;
				}
				
			    public String inspire_themes;

				public String getInspire_themes () {
					return this.inspire_themes;
				}
				
			    public String gemet_concepts;

				public String getGemet_concepts () {
					return this.gemet_concepts;
				}
				
			    public Float wlon;

				public Float getWlon () {
					return this.wlon;
				}
				
			    public Float elon;

				public Float getElon () {
					return this.elon;
				}
				
			    public Float slat;

				public Float getSlat () {
					return this.slat;
				}
				
			    public Float nlat;

				public Float getNlat () {
					return this.nlat;
				}
				
			    public String stype;

				public String getStype () {
					return this.stype;
				}
				
			    public String scaleres;

				public String getScaleres () {
					return this.scaleres;
				}
				
			    public String tbegin;

				public String getTbegin () {
					return this.tbegin;
				}
				
			    public String tend;

				public String getTend () {
					return this.tend;
				}
				
			    public String protocols;

				public String getProtocols () {
					return this.protocols;
				}
				
			    public String links;

				public String getLinks () {
					return this.links;
				}
				
			    public String lineage;

				public String getLineage () {
					return this.lineage;
				}
				
			    public String data_src;

				public String getData_src () {
					return this.data_src;
				}
				
			    public String published;

				public String getPublished () {
					return this.published;
				}
				
			    public String sdiurl;

				public String getSdiurl () {
					return this.sdiurl;
				}
				
			    public String distributionFormat;

				public String getDistributionFormat () {
					return this.distributionFormat;
				}
				
			    public String place;

				public String getPlace () {
					return this.place;
				}
				
			    public String useLimitation;

				public String getUseLimitation () {
					return this.useLimitation;
				}
				
			    public String browseGraphic;

				public String getBrowseGraphic () {
					return this.browseGraphic;
				}
				
			    public String shortname;

				public String getShortname () {
					return this.shortname;
				}
				
			    public String referenceFlag;

				public String getReferenceFlag () {
					return this.referenceFlag;
				}
				
			    public String wms;

				public String getWms () {
					return this.wms;
				}
				
			    public String idpTopics;

				public String getIdpTopics () {
					return this.idpTopics;
				}
				
			    public String restApi;

				public String getRestApi () {
					return this.restApi;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_merge.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_merge.length == 0) {
   					commonByteArray_LOCAL_PROJECT_merge = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_merge = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_merge, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_merge, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_merge) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.dataset_id = readString(dis);
					
					this.datestamp = readString(dis);
					
					this.crs = readString(dis);
					
					this.title = readString(dis);
					
					this.edition = readString(dis);
					
					this.abstracts = readString(dis);
					
					this.custodian = readString(dis);
					
					this.inspire_themes = readString(dis);
					
					this.gemet_concepts = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.wlon = null;
           				} else {
           			    	this.wlon = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.elon = null;
           				} else {
           			    	this.elon = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.slat = null;
           				} else {
           			    	this.slat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nlat = null;
           				} else {
           			    	this.nlat = dis.readFloat();
           				}
					
					this.stype = readString(dis);
					
					this.scaleres = readString(dis);
					
					this.tbegin = readString(dis);
					
					this.tend = readString(dis);
					
					this.protocols = readString(dis);
					
					this.links = readString(dis);
					
					this.lineage = readString(dis);
					
					this.data_src = readString(dis);
					
					this.published = readString(dis);
					
					this.sdiurl = readString(dis);
					
					this.distributionFormat = readString(dis);
					
					this.place = readString(dis);
					
					this.useLimitation = readString(dis);
					
					this.browseGraphic = readString(dis);
					
					this.shortname = readString(dis);
					
					this.referenceFlag = readString(dis);
					
					this.wms = readString(dis);
					
					this.idpTopics = readString(dis);
					
					this.restApi = readString(dis);
					
					this.status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.dataset_id,dos);
					
					// String
				
						writeString(this.datestamp,dos);
					
					// String
				
						writeString(this.crs,dos);
					
					// String
				
						writeString(this.title,dos);
					
					// String
				
						writeString(this.edition,dos);
					
					// String
				
						writeString(this.abstracts,dos);
					
					// String
				
						writeString(this.custodian,dos);
					
					// String
				
						writeString(this.inspire_themes,dos);
					
					// String
				
						writeString(this.gemet_concepts,dos);
					
					// Float
				
						if(this.wlon == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.wlon);
		            	}
					
					// Float
				
						if(this.elon == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.elon);
		            	}
					
					// Float
				
						if(this.slat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.slat);
		            	}
					
					// Float
				
						if(this.nlat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.nlat);
		            	}
					
					// String
				
						writeString(this.stype,dos);
					
					// String
				
						writeString(this.scaleres,dos);
					
					// String
				
						writeString(this.tbegin,dos);
					
					// String
				
						writeString(this.tend,dos);
					
					// String
				
						writeString(this.protocols,dos);
					
					// String
				
						writeString(this.links,dos);
					
					// String
				
						writeString(this.lineage,dos);
					
					// String
				
						writeString(this.data_src,dos);
					
					// String
				
						writeString(this.published,dos);
					
					// String
				
						writeString(this.sdiurl,dos);
					
					// String
				
						writeString(this.distributionFormat,dos);
					
					// String
				
						writeString(this.place,dos);
					
					// String
				
						writeString(this.useLimitation,dos);
					
					// String
				
						writeString(this.browseGraphic,dos);
					
					// String
				
						writeString(this.shortname,dos);
					
					// String
				
						writeString(this.referenceFlag,dos);
					
					// String
				
						writeString(this.wms,dos);
					
					// String
				
						writeString(this.idpTopics,dos);
					
					// String
				
						writeString(this.restApi,dos);
					
					// String
				
						writeString(this.status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",dataset_id="+dataset_id);
		sb.append(",datestamp="+datestamp);
		sb.append(",crs="+crs);
		sb.append(",title="+title);
		sb.append(",edition="+edition);
		sb.append(",abstracts="+abstracts);
		sb.append(",custodian="+custodian);
		sb.append(",inspire_themes="+inspire_themes);
		sb.append(",gemet_concepts="+gemet_concepts);
		sb.append(",wlon="+String.valueOf(wlon));
		sb.append(",elon="+String.valueOf(elon));
		sb.append(",slat="+String.valueOf(slat));
		sb.append(",nlat="+String.valueOf(nlat));
		sb.append(",stype="+stype);
		sb.append(",scaleres="+scaleres);
		sb.append(",tbegin="+tbegin);
		sb.append(",tend="+tend);
		sb.append(",protocols="+protocols);
		sb.append(",links="+links);
		sb.append(",lineage="+lineage);
		sb.append(",data_src="+data_src);
		sb.append(",published="+published);
		sb.append(",sdiurl="+sdiurl);
		sb.append(",distributionFormat="+distributionFormat);
		sb.append(",place="+place);
		sb.append(",useLimitation="+useLimitation);
		sb.append(",browseGraphic="+browseGraphic);
		sb.append(",shortname="+shortname);
		sb.append(",referenceFlag="+referenceFlag);
		sb.append(",wms="+wms);
		sb.append(",idpTopics="+idpTopics);
		sb.append(",restApi="+restApi);
		sb.append(",status="+status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_merge = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_merge = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String dataset_id;

				public String getDataset_id () {
					return this.dataset_id;
				}
				
			    public String datestamp;

				public String getDatestamp () {
					return this.datestamp;
				}
				
			    public String crs;

				public String getCrs () {
					return this.crs;
				}
				
			    public String title;

				public String getTitle () {
					return this.title;
				}
				
			    public String edition;

				public String getEdition () {
					return this.edition;
				}
				
			    public String abstracts;

				public String getAbstracts () {
					return this.abstracts;
				}
				
			    public String custodian;

				public String getCustodian () {
					return this.custodian;
				}
				
			    public String inspire_themes;

				public String getInspire_themes () {
					return this.inspire_themes;
				}
				
			    public String gemet_concepts;

				public String getGemet_concepts () {
					return this.gemet_concepts;
				}
				
			    public Float wlon;

				public Float getWlon () {
					return this.wlon;
				}
				
			    public Float elon;

				public Float getElon () {
					return this.elon;
				}
				
			    public Float slat;

				public Float getSlat () {
					return this.slat;
				}
				
			    public Float nlat;

				public Float getNlat () {
					return this.nlat;
				}
				
			    public String stype;

				public String getStype () {
					return this.stype;
				}
				
			    public String scaleres;

				public String getScaleres () {
					return this.scaleres;
				}
				
			    public String tbegin;

				public String getTbegin () {
					return this.tbegin;
				}
				
			    public String tend;

				public String getTend () {
					return this.tend;
				}
				
			    public String protocols;

				public String getProtocols () {
					return this.protocols;
				}
				
			    public String links;

				public String getLinks () {
					return this.links;
				}
				
			    public String lineage;

				public String getLineage () {
					return this.lineage;
				}
				
			    public String data_src;

				public String getData_src () {
					return this.data_src;
				}
				
			    public String published;

				public String getPublished () {
					return this.published;
				}
				
			    public String sdiurl;

				public String getSdiurl () {
					return this.sdiurl;
				}
				
			    public String distributionFormat;

				public String getDistributionFormat () {
					return this.distributionFormat;
				}
				
			    public String place;

				public String getPlace () {
					return this.place;
				}
				
			    public String useLimitation;

				public String getUseLimitation () {
					return this.useLimitation;
				}
				
			    public String browseGraphic;

				public String getBrowseGraphic () {
					return this.browseGraphic;
				}
				
			    public String shortname;

				public String getShortname () {
					return this.shortname;
				}
				
			    public String referenceFlag;

				public String getReferenceFlag () {
					return this.referenceFlag;
				}
				
			    public String wms;

				public String getWms () {
					return this.wms;
				}
				
			    public String idpTopics;

				public String getIdpTopics () {
					return this.idpTopics;
				}
				
			    public String restApi;

				public String getRestApi () {
					return this.restApi;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_merge.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_merge.length == 0) {
   					commonByteArray_LOCAL_PROJECT_merge = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_merge = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_merge, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_merge, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_merge) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.dataset_id = readString(dis);
					
					this.datestamp = readString(dis);
					
					this.crs = readString(dis);
					
					this.title = readString(dis);
					
					this.edition = readString(dis);
					
					this.abstracts = readString(dis);
					
					this.custodian = readString(dis);
					
					this.inspire_themes = readString(dis);
					
					this.gemet_concepts = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.wlon = null;
           				} else {
           			    	this.wlon = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.elon = null;
           				} else {
           			    	this.elon = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.slat = null;
           				} else {
           			    	this.slat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nlat = null;
           				} else {
           			    	this.nlat = dis.readFloat();
           				}
					
					this.stype = readString(dis);
					
					this.scaleres = readString(dis);
					
					this.tbegin = readString(dis);
					
					this.tend = readString(dis);
					
					this.protocols = readString(dis);
					
					this.links = readString(dis);
					
					this.lineage = readString(dis);
					
					this.data_src = readString(dis);
					
					this.published = readString(dis);
					
					this.sdiurl = readString(dis);
					
					this.distributionFormat = readString(dis);
					
					this.place = readString(dis);
					
					this.useLimitation = readString(dis);
					
					this.browseGraphic = readString(dis);
					
					this.shortname = readString(dis);
					
					this.referenceFlag = readString(dis);
					
					this.wms = readString(dis);
					
					this.idpTopics = readString(dis);
					
					this.restApi = readString(dis);
					
					this.status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.dataset_id,dos);
					
					// String
				
						writeString(this.datestamp,dos);
					
					// String
				
						writeString(this.crs,dos);
					
					// String
				
						writeString(this.title,dos);
					
					// String
				
						writeString(this.edition,dos);
					
					// String
				
						writeString(this.abstracts,dos);
					
					// String
				
						writeString(this.custodian,dos);
					
					// String
				
						writeString(this.inspire_themes,dos);
					
					// String
				
						writeString(this.gemet_concepts,dos);
					
					// Float
				
						if(this.wlon == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.wlon);
		            	}
					
					// Float
				
						if(this.elon == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.elon);
		            	}
					
					// Float
				
						if(this.slat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.slat);
		            	}
					
					// Float
				
						if(this.nlat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.nlat);
		            	}
					
					// String
				
						writeString(this.stype,dos);
					
					// String
				
						writeString(this.scaleres,dos);
					
					// String
				
						writeString(this.tbegin,dos);
					
					// String
				
						writeString(this.tend,dos);
					
					// String
				
						writeString(this.protocols,dos);
					
					// String
				
						writeString(this.links,dos);
					
					// String
				
						writeString(this.lineage,dos);
					
					// String
				
						writeString(this.data_src,dos);
					
					// String
				
						writeString(this.published,dos);
					
					// String
				
						writeString(this.sdiurl,dos);
					
					// String
				
						writeString(this.distributionFormat,dos);
					
					// String
				
						writeString(this.place,dos);
					
					// String
				
						writeString(this.useLimitation,dos);
					
					// String
				
						writeString(this.browseGraphic,dos);
					
					// String
				
						writeString(this.shortname,dos);
					
					// String
				
						writeString(this.referenceFlag,dos);
					
					// String
				
						writeString(this.wms,dos);
					
					// String
				
						writeString(this.idpTopics,dos);
					
					// String
				
						writeString(this.restApi,dos);
					
					// String
				
						writeString(this.status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",dataset_id="+dataset_id);
		sb.append(",datestamp="+datestamp);
		sb.append(",crs="+crs);
		sb.append(",title="+title);
		sb.append(",edition="+edition);
		sb.append(",abstracts="+abstracts);
		sb.append(",custodian="+custodian);
		sb.append(",inspire_themes="+inspire_themes);
		sb.append(",gemet_concepts="+gemet_concepts);
		sb.append(",wlon="+String.valueOf(wlon));
		sb.append(",elon="+String.valueOf(elon));
		sb.append(",slat="+String.valueOf(slat));
		sb.append(",nlat="+String.valueOf(nlat));
		sb.append(",stype="+stype);
		sb.append(",scaleres="+scaleres);
		sb.append(",tbegin="+tbegin);
		sb.append(",tend="+tend);
		sb.append(",protocols="+protocols);
		sb.append(",links="+links);
		sb.append(",lineage="+lineage);
		sb.append(",data_src="+data_src);
		sb.append(",published="+published);
		sb.append(",sdiurl="+sdiurl);
		sb.append(",distributionFormat="+distributionFormat);
		sb.append(",place="+place);
		sb.append(",useLimitation="+useLimitation);
		sb.append(",browseGraphic="+browseGraphic);
		sb.append(",shortname="+shortname);
		sb.append(",referenceFlag="+referenceFlag);
		sb.append(",wms="+wms);
		sb.append(",idpTopics="+idpTopics);
		sb.append(",restApi="+restApi);
		sb.append(",status="+status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class finaloutputStruct implements routines.system.IPersistableRow<finaloutputStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_merge = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_merge = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String dataset_id;

				public String getDataset_id () {
					return this.dataset_id;
				}
				
			    public String datestamp;

				public String getDatestamp () {
					return this.datestamp;
				}
				
			    public String crs;

				public String getCrs () {
					return this.crs;
				}
				
			    public String title;

				public String getTitle () {
					return this.title;
				}
				
			    public String edition;

				public String getEdition () {
					return this.edition;
				}
				
			    public String abstracts;

				public String getAbstracts () {
					return this.abstracts;
				}
				
			    public String custodian;

				public String getCustodian () {
					return this.custodian;
				}
				
			    public String inspire_themes;

				public String getInspire_themes () {
					return this.inspire_themes;
				}
				
			    public String gemet_concepts;

				public String getGemet_concepts () {
					return this.gemet_concepts;
				}
				
			    public Float wlon;

				public Float getWlon () {
					return this.wlon;
				}
				
			    public Float elon;

				public Float getElon () {
					return this.elon;
				}
				
			    public Float slat;

				public Float getSlat () {
					return this.slat;
				}
				
			    public Float nlat;

				public Float getNlat () {
					return this.nlat;
				}
				
			    public String stype;

				public String getStype () {
					return this.stype;
				}
				
			    public String scaleres;

				public String getScaleres () {
					return this.scaleres;
				}
				
			    public String tbegin;

				public String getTbegin () {
					return this.tbegin;
				}
				
			    public String tend;

				public String getTend () {
					return this.tend;
				}
				
			    public String protocols;

				public String getProtocols () {
					return this.protocols;
				}
				
			    public String links;

				public String getLinks () {
					return this.links;
				}
				
			    public String lineage;

				public String getLineage () {
					return this.lineage;
				}
				
			    public String data_src;

				public String getData_src () {
					return this.data_src;
				}
				
			    public String published;

				public String getPublished () {
					return this.published;
				}
				
			    public String sdiurl;

				public String getSdiurl () {
					return this.sdiurl;
				}
				
			    public String distributionFormat;

				public String getDistributionFormat () {
					return this.distributionFormat;
				}
				
			    public String place;

				public String getPlace () {
					return this.place;
				}
				
			    public String useLimitation;

				public String getUseLimitation () {
					return this.useLimitation;
				}
				
			    public String browseGraphic;

				public String getBrowseGraphic () {
					return this.browseGraphic;
				}
				
			    public String shortname;

				public String getShortname () {
					return this.shortname;
				}
				
			    public String referenceFlag;

				public String getReferenceFlag () {
					return this.referenceFlag;
				}
				
			    public String wms;

				public String getWms () {
					return this.wms;
				}
				
			    public String idpTopics;

				public String getIdpTopics () {
					return this.idpTopics;
				}
				
			    public String restApi;

				public String getRestApi () {
					return this.restApi;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_merge.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_merge.length == 0) {
   					commonByteArray_LOCAL_PROJECT_merge = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_merge = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_merge, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_merge, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_merge) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.dataset_id = readString(dis);
					
					this.datestamp = readString(dis);
					
					this.crs = readString(dis);
					
					this.title = readString(dis);
					
					this.edition = readString(dis);
					
					this.abstracts = readString(dis);
					
					this.custodian = readString(dis);
					
					this.inspire_themes = readString(dis);
					
					this.gemet_concepts = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.wlon = null;
           				} else {
           			    	this.wlon = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.elon = null;
           				} else {
           			    	this.elon = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.slat = null;
           				} else {
           			    	this.slat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nlat = null;
           				} else {
           			    	this.nlat = dis.readFloat();
           				}
					
					this.stype = readString(dis);
					
					this.scaleres = readString(dis);
					
					this.tbegin = readString(dis);
					
					this.tend = readString(dis);
					
					this.protocols = readString(dis);
					
					this.links = readString(dis);
					
					this.lineage = readString(dis);
					
					this.data_src = readString(dis);
					
					this.published = readString(dis);
					
					this.sdiurl = readString(dis);
					
					this.distributionFormat = readString(dis);
					
					this.place = readString(dis);
					
					this.useLimitation = readString(dis);
					
					this.browseGraphic = readString(dis);
					
					this.shortname = readString(dis);
					
					this.referenceFlag = readString(dis);
					
					this.wms = readString(dis);
					
					this.idpTopics = readString(dis);
					
					this.restApi = readString(dis);
					
					this.status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.dataset_id,dos);
					
					// String
				
						writeString(this.datestamp,dos);
					
					// String
				
						writeString(this.crs,dos);
					
					// String
				
						writeString(this.title,dos);
					
					// String
				
						writeString(this.edition,dos);
					
					// String
				
						writeString(this.abstracts,dos);
					
					// String
				
						writeString(this.custodian,dos);
					
					// String
				
						writeString(this.inspire_themes,dos);
					
					// String
				
						writeString(this.gemet_concepts,dos);
					
					// Float
				
						if(this.wlon == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.wlon);
		            	}
					
					// Float
				
						if(this.elon == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.elon);
		            	}
					
					// Float
				
						if(this.slat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.slat);
		            	}
					
					// Float
				
						if(this.nlat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.nlat);
		            	}
					
					// String
				
						writeString(this.stype,dos);
					
					// String
				
						writeString(this.scaleres,dos);
					
					// String
				
						writeString(this.tbegin,dos);
					
					// String
				
						writeString(this.tend,dos);
					
					// String
				
						writeString(this.protocols,dos);
					
					// String
				
						writeString(this.links,dos);
					
					// String
				
						writeString(this.lineage,dos);
					
					// String
				
						writeString(this.data_src,dos);
					
					// String
				
						writeString(this.published,dos);
					
					// String
				
						writeString(this.sdiurl,dos);
					
					// String
				
						writeString(this.distributionFormat,dos);
					
					// String
				
						writeString(this.place,dos);
					
					// String
				
						writeString(this.useLimitation,dos);
					
					// String
				
						writeString(this.browseGraphic,dos);
					
					// String
				
						writeString(this.shortname,dos);
					
					// String
				
						writeString(this.referenceFlag,dos);
					
					// String
				
						writeString(this.wms,dos);
					
					// String
				
						writeString(this.idpTopics,dos);
					
					// String
				
						writeString(this.restApi,dos);
					
					// String
				
						writeString(this.status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",dataset_id="+dataset_id);
		sb.append(",datestamp="+datestamp);
		sb.append(",crs="+crs);
		sb.append(",title="+title);
		sb.append(",edition="+edition);
		sb.append(",abstracts="+abstracts);
		sb.append(",custodian="+custodian);
		sb.append(",inspire_themes="+inspire_themes);
		sb.append(",gemet_concepts="+gemet_concepts);
		sb.append(",wlon="+String.valueOf(wlon));
		sb.append(",elon="+String.valueOf(elon));
		sb.append(",slat="+String.valueOf(slat));
		sb.append(",nlat="+String.valueOf(nlat));
		sb.append(",stype="+stype);
		sb.append(",scaleres="+scaleres);
		sb.append(",tbegin="+tbegin);
		sb.append(",tend="+tend);
		sb.append(",protocols="+protocols);
		sb.append(",links="+links);
		sb.append(",lineage="+lineage);
		sb.append(",data_src="+data_src);
		sb.append(",published="+published);
		sb.append(",sdiurl="+sdiurl);
		sb.append(",distributionFormat="+distributionFormat);
		sb.append(",place="+place);
		sb.append(",useLimitation="+useLimitation);
		sb.append(",browseGraphic="+browseGraphic);
		sb.append(",shortname="+shortname);
		sb.append(",referenceFlag="+referenceFlag);
		sb.append(",wms="+wms);
		sb.append(",idpTopics="+idpTopics);
		sb.append(",restApi="+restApi);
		sb.append(",status="+status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(finaloutputStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_merge = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_merge = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String dataset_id;

				public String getDataset_id () {
					return this.dataset_id;
				}
				
			    public String datestamp;

				public String getDatestamp () {
					return this.datestamp;
				}
				
			    public String crs;

				public String getCrs () {
					return this.crs;
				}
				
			    public String title;

				public String getTitle () {
					return this.title;
				}
				
			    public String edition;

				public String getEdition () {
					return this.edition;
				}
				
			    public String abstracts;

				public String getAbstracts () {
					return this.abstracts;
				}
				
			    public String custodian;

				public String getCustodian () {
					return this.custodian;
				}
				
			    public String inspire_themes;

				public String getInspire_themes () {
					return this.inspire_themes;
				}
				
			    public String gemet_concepts;

				public String getGemet_concepts () {
					return this.gemet_concepts;
				}
				
			    public Float wlon;

				public Float getWlon () {
					return this.wlon;
				}
				
			    public Float elon;

				public Float getElon () {
					return this.elon;
				}
				
			    public Float slat;

				public Float getSlat () {
					return this.slat;
				}
				
			    public Float nlat;

				public Float getNlat () {
					return this.nlat;
				}
				
			    public String stype;

				public String getStype () {
					return this.stype;
				}
				
			    public String scaleres;

				public String getScaleres () {
					return this.scaleres;
				}
				
			    public String tbegin;

				public String getTbegin () {
					return this.tbegin;
				}
				
			    public String tend;

				public String getTend () {
					return this.tend;
				}
				
			    public String protocols;

				public String getProtocols () {
					return this.protocols;
				}
				
			    public String links;

				public String getLinks () {
					return this.links;
				}
				
			    public String lineage;

				public String getLineage () {
					return this.lineage;
				}
				
			    public String data_src;

				public String getData_src () {
					return this.data_src;
				}
				
			    public String published;

				public String getPublished () {
					return this.published;
				}
				
			    public String sdiurl;

				public String getSdiurl () {
					return this.sdiurl;
				}
				
			    public String distributionFormat;

				public String getDistributionFormat () {
					return this.distributionFormat;
				}
				
			    public String place;

				public String getPlace () {
					return this.place;
				}
				
			    public String useLimitation;

				public String getUseLimitation () {
					return this.useLimitation;
				}
				
			    public String browseGraphic;

				public String getBrowseGraphic () {
					return this.browseGraphic;
				}
				
			    public String shortname;

				public String getShortname () {
					return this.shortname;
				}
				
			    public String referenceFlag;

				public String getReferenceFlag () {
					return this.referenceFlag;
				}
				
			    public String wms;

				public String getWms () {
					return this.wms;
				}
				
			    public String idpTopics;

				public String getIdpTopics () {
					return this.idpTopics;
				}
				
			    public String restApi;

				public String getRestApi () {
					return this.restApi;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_merge.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_merge.length == 0) {
   					commonByteArray_LOCAL_PROJECT_merge = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_merge = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_merge, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_merge, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_merge) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.dataset_id = readString(dis);
					
					this.datestamp = readString(dis);
					
					this.crs = readString(dis);
					
					this.title = readString(dis);
					
					this.edition = readString(dis);
					
					this.abstracts = readString(dis);
					
					this.custodian = readString(dis);
					
					this.inspire_themes = readString(dis);
					
					this.gemet_concepts = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.wlon = null;
           				} else {
           			    	this.wlon = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.elon = null;
           				} else {
           			    	this.elon = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.slat = null;
           				} else {
           			    	this.slat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nlat = null;
           				} else {
           			    	this.nlat = dis.readFloat();
           				}
					
					this.stype = readString(dis);
					
					this.scaleres = readString(dis);
					
					this.tbegin = readString(dis);
					
					this.tend = readString(dis);
					
					this.protocols = readString(dis);
					
					this.links = readString(dis);
					
					this.lineage = readString(dis);
					
					this.data_src = readString(dis);
					
					this.published = readString(dis);
					
					this.sdiurl = readString(dis);
					
					this.distributionFormat = readString(dis);
					
					this.place = readString(dis);
					
					this.useLimitation = readString(dis);
					
					this.browseGraphic = readString(dis);
					
					this.shortname = readString(dis);
					
					this.referenceFlag = readString(dis);
					
					this.wms = readString(dis);
					
					this.idpTopics = readString(dis);
					
					this.restApi = readString(dis);
					
					this.status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.dataset_id,dos);
					
					// String
				
						writeString(this.datestamp,dos);
					
					// String
				
						writeString(this.crs,dos);
					
					// String
				
						writeString(this.title,dos);
					
					// String
				
						writeString(this.edition,dos);
					
					// String
				
						writeString(this.abstracts,dos);
					
					// String
				
						writeString(this.custodian,dos);
					
					// String
				
						writeString(this.inspire_themes,dos);
					
					// String
				
						writeString(this.gemet_concepts,dos);
					
					// Float
				
						if(this.wlon == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.wlon);
		            	}
					
					// Float
				
						if(this.elon == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.elon);
		            	}
					
					// Float
				
						if(this.slat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.slat);
		            	}
					
					// Float
				
						if(this.nlat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.nlat);
		            	}
					
					// String
				
						writeString(this.stype,dos);
					
					// String
				
						writeString(this.scaleres,dos);
					
					// String
				
						writeString(this.tbegin,dos);
					
					// String
				
						writeString(this.tend,dos);
					
					// String
				
						writeString(this.protocols,dos);
					
					// String
				
						writeString(this.links,dos);
					
					// String
				
						writeString(this.lineage,dos);
					
					// String
				
						writeString(this.data_src,dos);
					
					// String
				
						writeString(this.published,dos);
					
					// String
				
						writeString(this.sdiurl,dos);
					
					// String
				
						writeString(this.distributionFormat,dos);
					
					// String
				
						writeString(this.place,dos);
					
					// String
				
						writeString(this.useLimitation,dos);
					
					// String
				
						writeString(this.browseGraphic,dos);
					
					// String
				
						writeString(this.shortname,dos);
					
					// String
				
						writeString(this.referenceFlag,dos);
					
					// String
				
						writeString(this.wms,dos);
					
					// String
				
						writeString(this.idpTopics,dos);
					
					// String
				
						writeString(this.restApi,dos);
					
					// String
				
						writeString(this.status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",dataset_id="+dataset_id);
		sb.append(",datestamp="+datestamp);
		sb.append(",crs="+crs);
		sb.append(",title="+title);
		sb.append(",edition="+edition);
		sb.append(",abstracts="+abstracts);
		sb.append(",custodian="+custodian);
		sb.append(",inspire_themes="+inspire_themes);
		sb.append(",gemet_concepts="+gemet_concepts);
		sb.append(",wlon="+String.valueOf(wlon));
		sb.append(",elon="+String.valueOf(elon));
		sb.append(",slat="+String.valueOf(slat));
		sb.append(",nlat="+String.valueOf(nlat));
		sb.append(",stype="+stype);
		sb.append(",scaleres="+scaleres);
		sb.append(",tbegin="+tbegin);
		sb.append(",tend="+tend);
		sb.append(",protocols="+protocols);
		sb.append(",links="+links);
		sb.append(",lineage="+lineage);
		sb.append(",data_src="+data_src);
		sb.append(",published="+published);
		sb.append(",sdiurl="+sdiurl);
		sb.append(",distributionFormat="+distributionFormat);
		sb.append(",place="+place);
		sb.append(",useLimitation="+useLimitation);
		sb.append(",browseGraphic="+browseGraphic);
		sb.append(",shortname="+shortname);
		sb.append(",referenceFlag="+referenceFlag);
		sb.append(",wms="+wms);
		sb.append(",idpTopics="+idpTopics);
		sb.append(",restApi="+restApi);
		sb.append(",status="+status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_1Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_merge = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_merge = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String dataset_id;

				public String getDataset_id () {
					return this.dataset_id;
				}
				
			    public String datestamp;

				public String getDatestamp () {
					return this.datestamp;
				}
				
			    public String crs;

				public String getCrs () {
					return this.crs;
				}
				
			    public String title;

				public String getTitle () {
					return this.title;
				}
				
			    public String edition;

				public String getEdition () {
					return this.edition;
				}
				
			    public String abstracts;

				public String getAbstracts () {
					return this.abstracts;
				}
				
			    public String custodian;

				public String getCustodian () {
					return this.custodian;
				}
				
			    public String inspire_themes;

				public String getInspire_themes () {
					return this.inspire_themes;
				}
				
			    public String gemet_concepts;

				public String getGemet_concepts () {
					return this.gemet_concepts;
				}
				
			    public Float wlon;

				public Float getWlon () {
					return this.wlon;
				}
				
			    public Float elon;

				public Float getElon () {
					return this.elon;
				}
				
			    public Float slat;

				public Float getSlat () {
					return this.slat;
				}
				
			    public Float nlat;

				public Float getNlat () {
					return this.nlat;
				}
				
			    public String stype;

				public String getStype () {
					return this.stype;
				}
				
			    public String scaleres;

				public String getScaleres () {
					return this.scaleres;
				}
				
			    public String tbegin;

				public String getTbegin () {
					return this.tbegin;
				}
				
			    public String tend;

				public String getTend () {
					return this.tend;
				}
				
			    public String protocols;

				public String getProtocols () {
					return this.protocols;
				}
				
			    public String links;

				public String getLinks () {
					return this.links;
				}
				
			    public String lineage;

				public String getLineage () {
					return this.lineage;
				}
				
			    public String data_src;

				public String getData_src () {
					return this.data_src;
				}
				
			    public String published;

				public String getPublished () {
					return this.published;
				}
				
			    public String sdiurl;

				public String getSdiurl () {
					return this.sdiurl;
				}
				
			    public String distributionFormat;

				public String getDistributionFormat () {
					return this.distributionFormat;
				}
				
			    public String place;

				public String getPlace () {
					return this.place;
				}
				
			    public String useLimitation;

				public String getUseLimitation () {
					return this.useLimitation;
				}
				
			    public String browseGraphic;

				public String getBrowseGraphic () {
					return this.browseGraphic;
				}
				
			    public String shortname;

				public String getShortname () {
					return this.shortname;
				}
				
			    public String referenceFlag;

				public String getReferenceFlag () {
					return this.referenceFlag;
				}
				
			    public String wms;

				public String getWms () {
					return this.wms;
				}
				
			    public String idpTopics;

				public String getIdpTopics () {
					return this.idpTopics;
				}
				
			    public String restApi;

				public String getRestApi () {
					return this.restApi;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_merge.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_merge.length == 0) {
   					commonByteArray_LOCAL_PROJECT_merge = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_merge = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_merge, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_merge, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_merge) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.dataset_id = readString(dis);
					
					this.datestamp = readString(dis);
					
					this.crs = readString(dis);
					
					this.title = readString(dis);
					
					this.edition = readString(dis);
					
					this.abstracts = readString(dis);
					
					this.custodian = readString(dis);
					
					this.inspire_themes = readString(dis);
					
					this.gemet_concepts = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.wlon = null;
           				} else {
           			    	this.wlon = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.elon = null;
           				} else {
           			    	this.elon = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.slat = null;
           				} else {
           			    	this.slat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nlat = null;
           				} else {
           			    	this.nlat = dis.readFloat();
           				}
					
					this.stype = readString(dis);
					
					this.scaleres = readString(dis);
					
					this.tbegin = readString(dis);
					
					this.tend = readString(dis);
					
					this.protocols = readString(dis);
					
					this.links = readString(dis);
					
					this.lineage = readString(dis);
					
					this.data_src = readString(dis);
					
					this.published = readString(dis);
					
					this.sdiurl = readString(dis);
					
					this.distributionFormat = readString(dis);
					
					this.place = readString(dis);
					
					this.useLimitation = readString(dis);
					
					this.browseGraphic = readString(dis);
					
					this.shortname = readString(dis);
					
					this.referenceFlag = readString(dis);
					
					this.wms = readString(dis);
					
					this.idpTopics = readString(dis);
					
					this.restApi = readString(dis);
					
					this.status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.dataset_id,dos);
					
					// String
				
						writeString(this.datestamp,dos);
					
					// String
				
						writeString(this.crs,dos);
					
					// String
				
						writeString(this.title,dos);
					
					// String
				
						writeString(this.edition,dos);
					
					// String
				
						writeString(this.abstracts,dos);
					
					// String
				
						writeString(this.custodian,dos);
					
					// String
				
						writeString(this.inspire_themes,dos);
					
					// String
				
						writeString(this.gemet_concepts,dos);
					
					// Float
				
						if(this.wlon == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.wlon);
		            	}
					
					// Float
				
						if(this.elon == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.elon);
		            	}
					
					// Float
				
						if(this.slat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.slat);
		            	}
					
					// Float
				
						if(this.nlat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.nlat);
		            	}
					
					// String
				
						writeString(this.stype,dos);
					
					// String
				
						writeString(this.scaleres,dos);
					
					// String
				
						writeString(this.tbegin,dos);
					
					// String
				
						writeString(this.tend,dos);
					
					// String
				
						writeString(this.protocols,dos);
					
					// String
				
						writeString(this.links,dos);
					
					// String
				
						writeString(this.lineage,dos);
					
					// String
				
						writeString(this.data_src,dos);
					
					// String
				
						writeString(this.published,dos);
					
					// String
				
						writeString(this.sdiurl,dos);
					
					// String
				
						writeString(this.distributionFormat,dos);
					
					// String
				
						writeString(this.place,dos);
					
					// String
				
						writeString(this.useLimitation,dos);
					
					// String
				
						writeString(this.browseGraphic,dos);
					
					// String
				
						writeString(this.shortname,dos);
					
					// String
				
						writeString(this.referenceFlag,dos);
					
					// String
				
						writeString(this.wms,dos);
					
					// String
				
						writeString(this.idpTopics,dos);
					
					// String
				
						writeString(this.restApi,dos);
					
					// String
				
						writeString(this.status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",dataset_id="+dataset_id);
		sb.append(",datestamp="+datestamp);
		sb.append(",crs="+crs);
		sb.append(",title="+title);
		sb.append(",edition="+edition);
		sb.append(",abstracts="+abstracts);
		sb.append(",custodian="+custodian);
		sb.append(",inspire_themes="+inspire_themes);
		sb.append(",gemet_concepts="+gemet_concepts);
		sb.append(",wlon="+String.valueOf(wlon));
		sb.append(",elon="+String.valueOf(elon));
		sb.append(",slat="+String.valueOf(slat));
		sb.append(",nlat="+String.valueOf(nlat));
		sb.append(",stype="+stype);
		sb.append(",scaleres="+scaleres);
		sb.append(",tbegin="+tbegin);
		sb.append(",tend="+tend);
		sb.append(",protocols="+protocols);
		sb.append(",links="+links);
		sb.append(",lineage="+lineage);
		sb.append(",data_src="+data_src);
		sb.append(",published="+published);
		sb.append(",sdiurl="+sdiurl);
		sb.append(",distributionFormat="+distributionFormat);
		sb.append(",place="+place);
		sb.append(",useLimitation="+useLimitation);
		sb.append(",browseGraphic="+browseGraphic);
		sb.append(",shortname="+shortname);
		sb.append(",referenceFlag="+referenceFlag);
		sb.append(",wms="+wms);
		sb.append(",idpTopics="+idpTopics);
		sb.append(",restApi="+restApi);
		sb.append(",status="+status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;


		tFileInputDelimited_2Process(globalMap);

		row1Struct row1 = new row1Struct();
finaloutputStruct finaloutput = new finaloutputStruct();
row3Struct row3 = new row3Struct();
row4Struct row4 = new row4Struct();
row5Struct row5 = new row5Struct();






	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileOutputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputDelimited_1().limitLog4jByte();

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.outputDir + "/sdi-internal.tsv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
                String[] headColutFileOutputDelimited_1=new String[34];
            class CSVBasicSet_tFileOutputDelimited_1{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_1[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_1 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator("\t");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_1[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_1 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_1[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_1[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_1 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_1 = 0;
            int splitEvery_tFileOutputDelimited_1 = 1000;
            int splitedFileNo_tFileOutputDelimited_1 =0;
            int currentRow_tFileOutputDelimited_1 = 0;


            CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
            csvSettings_tFileOutputDelimited_1.setFieldSeparator("\t");
            csvSettings_tFileOutputDelimited_1.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_1.setEscapeAndTextEnclosure("\"","\"");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;

                            java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                            if(fileToDelete_tFileOutputDelimited_1.exists()) {
                                fileToDelete_tFileOutputDelimited_1.delete();
                            }
                            CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "UTF-8")));
                            CsvWritertFileOutputDelimited_1.setSeparator(csvSettings_tFileOutputDelimited_1.getFieldDelim());
                    if(!csvSettings_tFileOutputDelimited_1.isUseCRLFRecordDelimiter() && csvSettings_tFileOutputDelimited_1.getRowDelim()!='\r' && csvSettings_tFileOutputDelimited_1.getRowDelim()!='\n') {
                        CsvWritertFileOutputDelimited_1.setLineEnd(""+csvSettings_tFileOutputDelimited_1.getRowDelim());
                    }
                        if(filetFileOutputDelimited_1.length()==0){
                                    headColutFileOutputDelimited_1[0]="uuid";
                                    headColutFileOutputDelimited_1[1]="dataset_id";
                                    headColutFileOutputDelimited_1[2]="datestamp";
                                    headColutFileOutputDelimited_1[3]="crs";
                                    headColutFileOutputDelimited_1[4]="title";
                                    headColutFileOutputDelimited_1[5]="edition";
                                    headColutFileOutputDelimited_1[6]="abstracts";
                                    headColutFileOutputDelimited_1[7]="custodian";
                                    headColutFileOutputDelimited_1[8]="inspire_themes";
                                    headColutFileOutputDelimited_1[9]="gemet_concepts";
                                    headColutFileOutputDelimited_1[10]="wlon";
                                    headColutFileOutputDelimited_1[11]="elon";
                                    headColutFileOutputDelimited_1[12]="slat";
                                    headColutFileOutputDelimited_1[13]="nlat";
                                    headColutFileOutputDelimited_1[14]="stype";
                                    headColutFileOutputDelimited_1[15]="scaleres";
                                    headColutFileOutputDelimited_1[16]="tbegin";
                                    headColutFileOutputDelimited_1[17]="tend";
                                    headColutFileOutputDelimited_1[18]="protocols";
                                    headColutFileOutputDelimited_1[19]="links";
                                    headColutFileOutputDelimited_1[20]="lineage";
                                    headColutFileOutputDelimited_1[21]="data_src";
                                    headColutFileOutputDelimited_1[22]="published";
                                    headColutFileOutputDelimited_1[23]="sdiurl";
                                    headColutFileOutputDelimited_1[24]="distributionFormat";
                                    headColutFileOutputDelimited_1[25]="place";
                                    headColutFileOutputDelimited_1[26]="useLimitation";
                                    headColutFileOutputDelimited_1[27]="browseGraphic";
                                    headColutFileOutputDelimited_1[28]="shortname";
                                    headColutFileOutputDelimited_1[29]="referenceFlag";
                                    headColutFileOutputDelimited_1[30]="wms";
                                    headColutFileOutputDelimited_1[31]="idpTopics";
                                    headColutFileOutputDelimited_1[32]="restApi";
                                    headColutFileOutputDelimited_1[33]="status";
                            CsvWritertFileOutputDelimited_1.writeNext(headColutFileOutputDelimited_1);
                            CsvWritertFileOutputDelimited_1.flush();
                        }
                CsvWritertFileOutputDelimited_1.setEscapeChar(csvSettings_tFileOutputDelimited_1.getEscapeChar());
                CsvWritertFileOutputDelimited_1.setQuoteChar(csvSettings_tFileOutputDelimited_1.getTextEnclosure());
                CsvWritertFileOutputDelimited_1.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_1", CsvWritertFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */




	
	/**
	 * [tSQLiteOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteOutput_1", false);
		start_Hash.put("tSQLiteOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tSQLiteOutput_1 = 0;
		
    	class BytesLimit65535_tSQLiteOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteOutput_1().limitLog4jByte();
	




int nb_line_tSQLiteOutput_1 = 0;
int nb_line_update_tSQLiteOutput_1 = 0;
int nb_line_inserted_tSQLiteOutput_1 = 0;
int nb_line_deleted_tSQLiteOutput_1 = 0;
int nb_line_rejected_tSQLiteOutput_1 = 0;

int deletedCount_tSQLiteOutput_1=0;
int updatedCount_tSQLiteOutput_1=0;
int insertedCount_tSQLiteOutput_1=0;

String tableName_tSQLiteOutput_1 = "sdi-internal";
boolean whetherReject_tSQLiteOutput_1 = false;

       int batchSize_tSQLiteOutput_1 = 10000;
       int batchSizeCounter_tSQLiteOutput_1=0;
       int tmp_batchUpdateCount_tSQLiteOutput_1 = 0;


java.sql.Connection conn_tSQLiteOutput_1 = null;
    	
    java.lang.Class.forName("org.sqlite.JDBC");
    String url_tSQLiteOutput_1 = "jdbc:sqlite:"+ "/" + context.outputDir + "/sdi-internal.sqlite";
    	
    conn_tSQLiteOutput_1 = java.sql.DriverManager.getConnection(url_tSQLiteOutput_1);
	resourceMap.put("conn_tSQLiteOutput_1", conn_tSQLiteOutput_1);
        conn_tSQLiteOutput_1.setAutoCommit(false);
        int commitEvery_tSQLiteOutput_1 = 10000;
        int commitCounter_tSQLiteOutput_1 = 0;

            java.sql.DatabaseMetaData dbMetaData_tSQLiteOutput_1 = conn_tSQLiteOutput_1.getMetaData();
            java.sql.ResultSet rsTable_tSQLiteOutput_1 = dbMetaData_tSQLiteOutput_1.getTables(null, null, null, new String[]{"TABLE"});
            boolean whetherExist_tSQLiteOutput_1 = false;
            while(rsTable_tSQLiteOutput_1.next()) {
                String table_tSQLiteOutput_1 = rsTable_tSQLiteOutput_1.getString("TABLE_NAME");
                if(table_tSQLiteOutput_1.equalsIgnoreCase("sdi-internal")) {
                    whetherExist_tSQLiteOutput_1 = true;
                    break;
                }
            }
            rsTable_tSQLiteOutput_1.close();
                if(whetherExist_tSQLiteOutput_1) {
                    java.sql.Statement stmtDrop_tSQLiteOutput_1 = conn_tSQLiteOutput_1.createStatement();
                    	
                    stmtDrop_tSQLiteOutput_1.execute("DROP TABLE \"" + tableName_tSQLiteOutput_1 + "\"");
                    	
                }
                java.sql.Statement stmtCreate_tSQLiteOutput_1 = conn_tSQLiteOutput_1.createStatement();
                	
                stmtCreate_tSQLiteOutput_1.execute("CREATE TABLE \"" + tableName_tSQLiteOutput_1 + "\"(\"uuid\" VARCHAR(0)  ,\"dataset_id\" VARCHAR(0)  ,\"datestamp\" VARCHAR(0)  ,\"crs\" VARCHAR(0)  ,\"title\" VARCHAR(0)  ,\"edition\" VARCHAR(0)  ,\"abstracts\" VARCHAR(0)  ,\"custodian\" VARCHAR(0)  ,\"inspire_themes\" VARCHAR(0)  ,\"gemet_concepts\" VARCHAR(0)  ,\"wlon\" FLOAT ,\"elon\" FLOAT ,\"slat\" FLOAT ,\"nlat\" FLOAT ,\"stype\" VARCHAR(0)  ,\"scaleres\" VARCHAR(0)  ,\"tbegin\" VARCHAR(0)  ,\"tend\" VARCHAR(0)  ,\"protocols\" VARCHAR(0)  ,\"links\" VARCHAR(0)  ,\"lineage\" VARCHAR(0)  ,\"data_src\" VARCHAR(0)  ,\"published\" VARCHAR(0)  ,\"sdiurl\" VARCHAR(0)  ,\"distributionFormat\" VARCHAR(0)  ,\"place\" VARCHAR(0)  ,\"useLimitation\" VARCHAR(0)  ,\"browseGraphic\" VARCHAR(0)  ,\"shortname\" VARCHAR(0)  ,\"referenceFlag\" VARCHAR(0)  ,\"wms\" VARCHAR(0)  ,\"idpTopics\" VARCHAR(0)  ,\"restApi\" VARCHAR(0)  ,\"status\" VARCHAR(0)  )");
                	
	    String insert_tSQLiteOutput_1 = "INSERT INTO \"" + "sdi-internal" + "\" (\"uuid\",\"dataset_id\",\"datestamp\",\"crs\",\"title\",\"edition\",\"abstracts\",\"custodian\",\"inspire_themes\",\"gemet_concepts\",\"wlon\",\"elon\",\"slat\",\"nlat\",\"stype\",\"scaleres\",\"tbegin\",\"tend\",\"protocols\",\"links\",\"lineage\",\"data_src\",\"published\",\"sdiurl\",\"distributionFormat\",\"place\",\"useLimitation\",\"browseGraphic\",\"shortname\",\"referenceFlag\",\"wms\",\"idpTopics\",\"restApi\",\"status\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tSQLiteOutput_1 = conn_tSQLiteOutput_1.prepareStatement(insert_tSQLiteOutput_1);
	    

 



/**
 * [tSQLiteOutput_1 begin ] stop
 */




	
	/**
	 * [tFileOutputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_1", false);
		start_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputExcel_1 = 0;
		
    	class BytesLimit65535_tFileOutputExcel_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputExcel_1().limitLog4jByte();


		int columnIndex_tFileOutputExcel_1 = 0;
		
		int nb_line_tFileOutputExcel_1 = 0;
		
		String fileName_tFileOutputExcel_1=context.outputDir + "/sdi-internal.xls";
		java.io.File file_tFileOutputExcel_1 = new java.io.File(fileName_tFileOutputExcel_1);
		boolean isFileGenerated_tFileOutputExcel_1 = true;
//create directory only if not exists		  
          java.io.File parentFile_tFileOutputExcel_1 = file_tFileOutputExcel_1.getParentFile();
          if (parentFile_tFileOutputExcel_1 != null && !parentFile_tFileOutputExcel_1.exists()) {
        	
             parentFile_tFileOutputExcel_1.mkdirs();
        	
          }		
		
		jxl.write.WritableWorkbook writeableWorkbook_tFileOutputExcel_1 = null;
		jxl.write.WritableSheet writableSheet_tFileOutputExcel_1 = null;
		
		jxl.WorkbookSettings workbookSettings_tFileOutputExcel_1 = new jxl.WorkbookSettings();
        workbookSettings_tFileOutputExcel_1.setEncoding("UTF-8");
		writeableWorkbook_tFileOutputExcel_1 = new jxl.write.biff.WritableWorkbookImpl(
            		new java.io.BufferedOutputStream(new java.io.FileOutputStream(fileName_tFileOutputExcel_1)), 
            		true, 
            		workbookSettings_tFileOutputExcel_1);       

        writableSheet_tFileOutputExcel_1 = writeableWorkbook_tFileOutputExcel_1.getSheet("sdi-internal");
        if(writableSheet_tFileOutputExcel_1 == null){
        	writableSheet_tFileOutputExcel_1 = writeableWorkbook_tFileOutputExcel_1.createSheet("sdi-internal", writeableWorkbook_tFileOutputExcel_1.getNumberOfSheets());
		}
		

        //modif start
        int startRowNum_tFileOutputExcel_1 = writableSheet_tFileOutputExcel_1.getRows();
		//modif end
		
		int[] fitWidth_tFileOutputExcel_1 = new int[34];
		for(int i_tFileOutputExcel_1=0;i_tFileOutputExcel_1<34;i_tFileOutputExcel_1++){
		    int fitCellViewSize_tFileOutputExcel_1=writableSheet_tFileOutputExcel_1.getColumnView(i_tFileOutputExcel_1).getSize();
			fitWidth_tFileOutputExcel_1[i_tFileOutputExcel_1]=fitCellViewSize_tFileOutputExcel_1/256;
			if(fitCellViewSize_tFileOutputExcel_1%256!=0){
				fitWidth_tFileOutputExcel_1[i_tFileOutputExcel_1]+=1;
			}
		}
		
		jxl.write.WritableFont wf_tFileOutputExcel_1 = new jxl.write.WritableFont(jxl.write.WritableFont.TAHOMA, 10, jxl.write.WritableFont.NO_BOLD, false);
        jxl.write.WritableCellFormat format_tFileOutputExcel_1  = new jxl.write.WritableCellFormat(wf_tFileOutputExcel_1); 
		


		if (startRowNum_tFileOutputExcel_1 == 0){
	//modif end
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(0, nb_line_tFileOutputExcel_1, "uuid"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[0]=fitWidth_tFileOutputExcel_1[0]>4?fitWidth_tFileOutputExcel_1[0]:4;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(1, nb_line_tFileOutputExcel_1, "dataset_id"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[1]=fitWidth_tFileOutputExcel_1[1]>10?fitWidth_tFileOutputExcel_1[1]:10;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(2, nb_line_tFileOutputExcel_1, "datestamp"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[2]=fitWidth_tFileOutputExcel_1[2]>9?fitWidth_tFileOutputExcel_1[2]:9;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(3, nb_line_tFileOutputExcel_1, "crs"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[3]=fitWidth_tFileOutputExcel_1[3]>3?fitWidth_tFileOutputExcel_1[3]:3;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(4, nb_line_tFileOutputExcel_1, "title"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[4]=fitWidth_tFileOutputExcel_1[4]>5?fitWidth_tFileOutputExcel_1[4]:5;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(5, nb_line_tFileOutputExcel_1, "edition"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[5]=fitWidth_tFileOutputExcel_1[5]>7?fitWidth_tFileOutputExcel_1[5]:7;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(6, nb_line_tFileOutputExcel_1, "abstracts"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[6]=fitWidth_tFileOutputExcel_1[6]>9?fitWidth_tFileOutputExcel_1[6]:9;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(7, nb_line_tFileOutputExcel_1, "custodian"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[7]=fitWidth_tFileOutputExcel_1[7]>9?fitWidth_tFileOutputExcel_1[7]:9;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(8, nb_line_tFileOutputExcel_1, "inspire_themes"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[8]=fitWidth_tFileOutputExcel_1[8]>14?fitWidth_tFileOutputExcel_1[8]:14;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(9, nb_line_tFileOutputExcel_1, "gemet_concepts"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[9]=fitWidth_tFileOutputExcel_1[9]>14?fitWidth_tFileOutputExcel_1[9]:14;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(10, nb_line_tFileOutputExcel_1, "wlon"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[10]=fitWidth_tFileOutputExcel_1[10]>4?fitWidth_tFileOutputExcel_1[10]:4;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(11, nb_line_tFileOutputExcel_1, "elon"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[11]=fitWidth_tFileOutputExcel_1[11]>4?fitWidth_tFileOutputExcel_1[11]:4;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(12, nb_line_tFileOutputExcel_1, "slat"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[12]=fitWidth_tFileOutputExcel_1[12]>4?fitWidth_tFileOutputExcel_1[12]:4;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(13, nb_line_tFileOutputExcel_1, "nlat"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[13]=fitWidth_tFileOutputExcel_1[13]>4?fitWidth_tFileOutputExcel_1[13]:4;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(14, nb_line_tFileOutputExcel_1, "stype"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[14]=fitWidth_tFileOutputExcel_1[14]>5?fitWidth_tFileOutputExcel_1[14]:5;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(15, nb_line_tFileOutputExcel_1, "scaleres"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[15]=fitWidth_tFileOutputExcel_1[15]>8?fitWidth_tFileOutputExcel_1[15]:8;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(16, nb_line_tFileOutputExcel_1, "tbegin"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[16]=fitWidth_tFileOutputExcel_1[16]>6?fitWidth_tFileOutputExcel_1[16]:6;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(17, nb_line_tFileOutputExcel_1, "tend"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[17]=fitWidth_tFileOutputExcel_1[17]>4?fitWidth_tFileOutputExcel_1[17]:4;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(18, nb_line_tFileOutputExcel_1, "protocols"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[18]=fitWidth_tFileOutputExcel_1[18]>9?fitWidth_tFileOutputExcel_1[18]:9;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(19, nb_line_tFileOutputExcel_1, "links"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[19]=fitWidth_tFileOutputExcel_1[19]>5?fitWidth_tFileOutputExcel_1[19]:5;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(20, nb_line_tFileOutputExcel_1, "lineage"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[20]=fitWidth_tFileOutputExcel_1[20]>7?fitWidth_tFileOutputExcel_1[20]:7;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(21, nb_line_tFileOutputExcel_1, "data_src"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[21]=fitWidth_tFileOutputExcel_1[21]>8?fitWidth_tFileOutputExcel_1[21]:8;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(22, nb_line_tFileOutputExcel_1, "published"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[22]=fitWidth_tFileOutputExcel_1[22]>9?fitWidth_tFileOutputExcel_1[22]:9;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(23, nb_line_tFileOutputExcel_1, "sdiurl"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[23]=fitWidth_tFileOutputExcel_1[23]>6?fitWidth_tFileOutputExcel_1[23]:6;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(24, nb_line_tFileOutputExcel_1, "distributionFormat"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[24]=fitWidth_tFileOutputExcel_1[24]>18?fitWidth_tFileOutputExcel_1[24]:18;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(25, nb_line_tFileOutputExcel_1, "place"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[25]=fitWidth_tFileOutputExcel_1[25]>5?fitWidth_tFileOutputExcel_1[25]:5;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(26, nb_line_tFileOutputExcel_1, "useLimitation"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[26]=fitWidth_tFileOutputExcel_1[26]>13?fitWidth_tFileOutputExcel_1[26]:13;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(27, nb_line_tFileOutputExcel_1, "browseGraphic"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[27]=fitWidth_tFileOutputExcel_1[27]>13?fitWidth_tFileOutputExcel_1[27]:13;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(28, nb_line_tFileOutputExcel_1, "shortname"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[28]=fitWidth_tFileOutputExcel_1[28]>9?fitWidth_tFileOutputExcel_1[28]:9;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(29, nb_line_tFileOutputExcel_1, "referenceFlag"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[29]=fitWidth_tFileOutputExcel_1[29]>13?fitWidth_tFileOutputExcel_1[29]:13;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(30, nb_line_tFileOutputExcel_1, "wms"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[30]=fitWidth_tFileOutputExcel_1[30]>3?fitWidth_tFileOutputExcel_1[30]:3;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(31, nb_line_tFileOutputExcel_1, "idpTopics"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[31]=fitWidth_tFileOutputExcel_1[31]>9?fitWidth_tFileOutputExcel_1[31]:9;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(32, nb_line_tFileOutputExcel_1, "restApi"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[32]=fitWidth_tFileOutputExcel_1[32]>7?fitWidth_tFileOutputExcel_1[32]:7;
		//modif start
			writableSheet_tFileOutputExcel_1.addCell(new jxl.write.Label(33, nb_line_tFileOutputExcel_1, "status"
					,format_tFileOutputExcel_1
			));
		//modif end
		fitWidth_tFileOutputExcel_1[33]=fitWidth_tFileOutputExcel_1[33]>6?fitWidth_tFileOutputExcel_1[33]:6;
		nb_line_tFileOutputExcel_1 ++;
	}
		

 



/**
 * [tFileOutputExcel_1 begin ] stop
 */



	
	/**
	 * [tReplicate_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplicate_1", false);
		start_Hash.put("tReplicate_1", System.currentTimeMillis());
		
	
	currentComponent="tReplicate_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("finaloutput" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tReplicate_1 = 0;
		
    	class BytesLimit65535_tReplicate_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tReplicate_1().limitLog4jByte();

 



/**
 * [tReplicate_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
finaloutputStruct finaloutput_tmp = new finaloutputStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;	
				
				char fieldSeparator_tFileInputDelimited_1[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)"\t").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1 = ((String)"\t").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_1[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_1 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */System.getProperty("java.io.tmpdir") + "/sdiDump/tmp/sdi.tsv"/** End field tFileInputDelimited_1:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;
	
				try{
					
						String[] rowtFileInputDelimited_1=null;
						int currentLinetFileInputDelimited_1 = 0;
	        			int outputLinetFileInputDelimited_1 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0;
			if(footer_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
							}else{
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),"UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);
		        			}
					
					
					csvReadertFileInputDelimited_1.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )
	        			csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
	        				csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	            				//?????doesn't work for other escapeChar
	            				//the default escape mode is double escape
	            				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_1 > 0){
						for(totalLinetFileInputDelimited_1=0;totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++){
							csvReadertFileInputDelimited_1.readNext();
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
			            while (csvReadertFileInputDelimited_1.readNext()) {
							
								rowtFileInputDelimited_1=csvReadertFileInputDelimited_1.getValues();
								if(!(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0]))){//empty line when row separator is '\n'
							
	                
	                		totalLinetFileInputDelimited_1++;
	                
							
								}
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1   < 0? 0 : totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1 ;
	            		if(lastLinetFileInputDelimited_1 > 0){
	                		lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1 : lastLineTemptFileInputDelimited_1; 
	            		}else {
	                		lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
	            		}
	         
			          	csvReadertFileInputDelimited_1.close();
				        if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
		        		}else{
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),"UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);
						}
						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )	
	        				csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
							csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	        				//?????doesn't work for other escapeChar
	        				//the default escape mode is double escape
	        				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_1 != 0){
			        	for(currentLinetFileInputDelimited_1=0;currentLinetFileInputDelimited_1 < 1;currentLinetFileInputDelimited_1++){
			        		csvReadertFileInputDelimited_1.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1!=null && csvReadertFileInputDelimited_1.readNext() ) { 
	        		rowstate_tFileInputDelimited_1.reset();
	        
		        	rowtFileInputDelimited_1=csvReadertFileInputDelimited_1.getValues();
	        	
					
	        			if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
	        				continue;
	        			}
					
	        	
	        	
	        		currentLinetFileInputDelimited_1++;
	            
		            if(lastLinetFileInputDelimited_1 > -1 && currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_1++;
	            	if (limittFileInputDelimited_1 > 0 && outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
	                	break;
	            	}  
	                                                                      
					
	    							row1 = null;			
								
								boolean whetherReject_tFileInputDelimited_1 = false;
								row1 = new row1Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)"\t").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1_ListType = ((String)"\t").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
					
							row1.uuid = null;
					
							row1.dataset_id = null;
					
							row1.datestamp = null;
					
							row1.crs = null;
					
							row1.title = null;
					
							row1.edition = null;
					
							row1.abstracts = null;
					
							row1.custodian = null;
					
							row1.inspire_themes = null;
					
							row1.gemet_concepts = null;
					
							row1.wlon = null;
					
							row1.elon = null;
					
							row1.slat = null;
					
							row1.nlat = null;
					
							row1.stype = null;
					
							row1.scaleres = null;
					
							row1.tbegin = null;
					
							row1.tend = null;
					
							row1.protocols = null;
					
							row1.links = null;
					
							row1.lineage = null;
					
							row1.data_src = null;
					
							row1.published = null;
					
							row1.sdiurl = null;
					
							row1.distributionFormat = null;
					
							row1.place = null;
					
							row1.useLimitation = null;
					
							row1.browseGraphic = null;
					
							row1.shortname = null;
					
							row1.referenceFlag = null;
					
							row1.wms = null;
					
							row1.idpTopics = null;
					
							row1.restApi = null;
					
							row1.status = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_1 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_1 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.uuid = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.uuid = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.dataset_id = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.dataset_id = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.datestamp = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.datestamp = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.crs = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.crs = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.title = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.title = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.edition = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.edition = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.abstracts = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.abstracts = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.custodian = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.custodian = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.inspire_themes = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.inspire_themes = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.gemet_concepts = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.gemet_concepts = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.wlon = ParserUtils.parseTo_Float(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										row1.wlon = null;
    									
    								}
									
									
							
						
						}else{
							row1.wlon = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.elon = ParserUtils.parseTo_Float(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										row1.elon = null;
    									
    								}
									
									
							
						
						}else{
							row1.elon = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.slat = ParserUtils.parseTo_Float(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										row1.slat = null;
    									
    								}
									
									
							
						
						}else{
							row1.slat = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 13;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.nlat = ParserUtils.parseTo_Float(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(ex_tFileInputDelimited_1);
										}
    								}else{
    									
    										row1.nlat = null;
    									
    								}
									
									
							
						
						}else{
							row1.nlat = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 14;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.stype = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.stype = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 15;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.scaleres = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.scaleres = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 16;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.tbegin = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.tbegin = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 17;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.tend = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.tend = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 18;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.protocols = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.protocols = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 19;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.links = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.links = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 20;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.lineage = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.lineage = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 21;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.data_src = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.data_src = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 22;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.published = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.published = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 23;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.sdiurl = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.sdiurl = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 24;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.distributionFormat = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.distributionFormat = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 25;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.place = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.place = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 26;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.useLimitation = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.useLimitation = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 27;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.browseGraphic = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.browseGraphic = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 28;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.shortname = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.shortname = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 29;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.referenceFlag = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.referenceFlag = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 30;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.wms = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.wms = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 31;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.idpTopics = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.idpTopics = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 32;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.restApi = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.restApi = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 33;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.status = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
							row1.status = null;
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_1.getException()!=null) {
										throw rowstate_tFileInputDelimited_1.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_1 = true;
        							
                							System.err.println(e.getMessage());
                							row1 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row2HashKey.permalink = row1.sdiurl ;
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.permalink = '" + row2HashKey.permalink + "'");
								} // G 071
							

							row2Struct row2 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								 
							
							
								if (tHash_Lookup_row2 !=null && tHash_Lookup_row2.hasNext()) { // G 099
								
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							
							
								} // G 099
							
							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

finaloutput = null;


// # Output table : 'finaloutput'
finaloutput_tmp.uuid = row1.uuid;
finaloutput_tmp.dataset_id = row1.dataset_id;
finaloutput_tmp.datestamp = row1.datestamp;
finaloutput_tmp.crs = row1.crs;
finaloutput_tmp.title = row1.title;
finaloutput_tmp.edition = row1.edition;
finaloutput_tmp.abstracts = row1.abstracts;
finaloutput_tmp.custodian = row1.custodian;
finaloutput_tmp.inspire_themes = row1.inspire_themes;
finaloutput_tmp.gemet_concepts = row1.gemet_concepts;
finaloutput_tmp.wlon = row1.wlon;
finaloutput_tmp.elon = row1.elon;
finaloutput_tmp.slat = row1.slat;
finaloutput_tmp.nlat = row1.nlat;
finaloutput_tmp.stype = row1.stype;
finaloutput_tmp.scaleres = row1.scaleres;
finaloutput_tmp.tbegin = row1.tbegin;
finaloutput_tmp.tend = row1.tend;
finaloutput_tmp.protocols = row1.protocols;
finaloutput_tmp.links = row1.links;
finaloutput_tmp.lineage = row1.lineage;
finaloutput_tmp.data_src = row1.data_src;
finaloutput_tmp.published = row1.published;
finaloutput_tmp.sdiurl = row2.cmsUrl == null ? row1.sdiurl : row2.cmsUrl;
finaloutput_tmp.distributionFormat = row1.distributionFormat ;
finaloutput_tmp.place = row1.place ;
finaloutput_tmp.useLimitation = row1.useLimitation ;
finaloutput_tmp.browseGraphic = row1.browseGraphic ;
finaloutput_tmp.shortname = row1.shortname ;
finaloutput_tmp.referenceFlag = row1.referenceFlag.equals("") ? "FALSE" : "TRUE";
finaloutput_tmp.wms = row1.wms ;
finaloutput_tmp.idpTopics = row1.idpTopics;
finaloutput_tmp.restApi = row1.restApi ;
finaloutput_tmp.status = row1.status ;
finaloutput = finaloutput_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
// Start of branch "finaloutput"
if(finaloutput != null) { 



	
	/**
	 * [tReplicate_1 main ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

			//finaloutput
			//finaloutput


			
				if(execStat){
					runStat.updateStatOnConnection("finaloutput"+iterateId,1, 1);
				} 
			

		


	row3 = new row3Struct();
						
	row3.uuid = finaloutput.uuid;								
	row3.dataset_id = finaloutput.dataset_id;								
	row3.datestamp = finaloutput.datestamp;								
	row3.crs = finaloutput.crs;								
	row3.title = finaloutput.title;								
	row3.edition = finaloutput.edition;								
	row3.abstracts = finaloutput.abstracts;								
	row3.custodian = finaloutput.custodian;								
	row3.inspire_themes = finaloutput.inspire_themes;								
	row3.gemet_concepts = finaloutput.gemet_concepts;								
	row3.wlon = finaloutput.wlon;								
	row3.elon = finaloutput.elon;								
	row3.slat = finaloutput.slat;								
	row3.nlat = finaloutput.nlat;								
	row3.stype = finaloutput.stype;								
	row3.scaleres = finaloutput.scaleres;								
	row3.tbegin = finaloutput.tbegin;								
	row3.tend = finaloutput.tend;								
	row3.protocols = finaloutput.protocols;								
	row3.links = finaloutput.links;								
	row3.lineage = finaloutput.lineage;								
	row3.data_src = finaloutput.data_src;								
	row3.published = finaloutput.published;								
	row3.sdiurl = finaloutput.sdiurl;								
	row3.distributionFormat = finaloutput.distributionFormat;								
	row3.place = finaloutput.place;								
	row3.useLimitation = finaloutput.useLimitation;								
	row3.browseGraphic = finaloutput.browseGraphic;								
	row3.shortname = finaloutput.shortname;								
	row3.referenceFlag = finaloutput.referenceFlag;								
	row3.wms = finaloutput.wms;								
	row3.idpTopics = finaloutput.idpTopics;								
	row3.restApi = finaloutput.restApi;								
	row3.status = finaloutput.status;			
	row4 = new row4Struct();
						
	row4.uuid = finaloutput.uuid;								
	row4.dataset_id = finaloutput.dataset_id;								
	row4.datestamp = finaloutput.datestamp;								
	row4.crs = finaloutput.crs;								
	row4.title = finaloutput.title;								
	row4.edition = finaloutput.edition;								
	row4.abstracts = finaloutput.abstracts;								
	row4.custodian = finaloutput.custodian;								
	row4.inspire_themes = finaloutput.inspire_themes;								
	row4.gemet_concepts = finaloutput.gemet_concepts;								
	row4.wlon = finaloutput.wlon;								
	row4.elon = finaloutput.elon;								
	row4.slat = finaloutput.slat;								
	row4.nlat = finaloutput.nlat;								
	row4.stype = finaloutput.stype;								
	row4.scaleres = finaloutput.scaleres;								
	row4.tbegin = finaloutput.tbegin;								
	row4.tend = finaloutput.tend;								
	row4.protocols = finaloutput.protocols;								
	row4.links = finaloutput.links;								
	row4.lineage = finaloutput.lineage;								
	row4.data_src = finaloutput.data_src;								
	row4.published = finaloutput.published;								
	row4.sdiurl = finaloutput.sdiurl;								
	row4.distributionFormat = finaloutput.distributionFormat;								
	row4.place = finaloutput.place;								
	row4.useLimitation = finaloutput.useLimitation;								
	row4.browseGraphic = finaloutput.browseGraphic;								
	row4.shortname = finaloutput.shortname;								
	row4.referenceFlag = finaloutput.referenceFlag;								
	row4.wms = finaloutput.wms;								
	row4.idpTopics = finaloutput.idpTopics;								
	row4.restApi = finaloutput.restApi;								
	row4.status = finaloutput.status;			
	row5 = new row5Struct();
						
	row5.uuid = finaloutput.uuid;								
	row5.dataset_id = finaloutput.dataset_id;								
	row5.datestamp = finaloutput.datestamp;								
	row5.crs = finaloutput.crs;								
	row5.title = finaloutput.title;								
	row5.edition = finaloutput.edition;								
	row5.abstracts = finaloutput.abstracts;								
	row5.custodian = finaloutput.custodian;								
	row5.inspire_themes = finaloutput.inspire_themes;								
	row5.gemet_concepts = finaloutput.gemet_concepts;								
	row5.wlon = finaloutput.wlon;								
	row5.elon = finaloutput.elon;								
	row5.slat = finaloutput.slat;								
	row5.nlat = finaloutput.nlat;								
	row5.stype = finaloutput.stype;								
	row5.scaleres = finaloutput.scaleres;								
	row5.tbegin = finaloutput.tbegin;								
	row5.tend = finaloutput.tend;								
	row5.protocols = finaloutput.protocols;								
	row5.links = finaloutput.links;								
	row5.lineage = finaloutput.lineage;								
	row5.data_src = finaloutput.data_src;								
	row5.published = finaloutput.published;								
	row5.sdiurl = finaloutput.sdiurl;								
	row5.distributionFormat = finaloutput.distributionFormat;								
	row5.place = finaloutput.place;								
	row5.useLimitation = finaloutput.useLimitation;								
	row5.browseGraphic = finaloutput.browseGraphic;								
	row5.shortname = finaloutput.shortname;								
	row5.referenceFlag = finaloutput.referenceFlag;								
	row5.wms = finaloutput.wms;								
	row5.idpTopics = finaloutput.idpTopics;								
	row5.restApi = finaloutput.restApi;								
	row5.status = finaloutput.status;			


 


	tos_count_tReplicate_1++;

/**
 * [tReplicate_1 main ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		


                        String[] rowtFileOutputDelimited_1=new String[34];
                            rowtFileOutputDelimited_1[0]=row3.uuid == null ? null : row3.uuid;
                            rowtFileOutputDelimited_1[1]=row3.dataset_id == null ? null : row3.dataset_id;
                            rowtFileOutputDelimited_1[2]=row3.datestamp == null ? null : row3.datestamp;
                            rowtFileOutputDelimited_1[3]=row3.crs == null ? null : row3.crs;
                            rowtFileOutputDelimited_1[4]=row3.title == null ? null : row3.title;
                            rowtFileOutputDelimited_1[5]=row3.edition == null ? null : row3.edition;
                            rowtFileOutputDelimited_1[6]=row3.abstracts == null ? null : row3.abstracts;
                            rowtFileOutputDelimited_1[7]=row3.custodian == null ? null : row3.custodian;
                            rowtFileOutputDelimited_1[8]=row3.inspire_themes == null ? null : row3.inspire_themes;
                            rowtFileOutputDelimited_1[9]=row3.gemet_concepts == null ? null : row3.gemet_concepts;
                            rowtFileOutputDelimited_1[10]=row3.wlon == null ? null : String.valueOf(row3.wlon);
                            rowtFileOutputDelimited_1[11]=row3.elon == null ? null : String.valueOf(row3.elon);
                            rowtFileOutputDelimited_1[12]=row3.slat == null ? null : String.valueOf(row3.slat);
                            rowtFileOutputDelimited_1[13]=row3.nlat == null ? null : String.valueOf(row3.nlat);
                            rowtFileOutputDelimited_1[14]=row3.stype == null ? null : row3.stype;
                            rowtFileOutputDelimited_1[15]=row3.scaleres == null ? null : row3.scaleres;
                            rowtFileOutputDelimited_1[16]=row3.tbegin == null ? null : row3.tbegin;
                            rowtFileOutputDelimited_1[17]=row3.tend == null ? null : row3.tend;
                            rowtFileOutputDelimited_1[18]=row3.protocols == null ? null : row3.protocols;
                            rowtFileOutputDelimited_1[19]=row3.links == null ? null : row3.links;
                            rowtFileOutputDelimited_1[20]=row3.lineage == null ? null : row3.lineage;
                            rowtFileOutputDelimited_1[21]=row3.data_src == null ? null : row3.data_src;
                            rowtFileOutputDelimited_1[22]=row3.published == null ? null : row3.published;
                            rowtFileOutputDelimited_1[23]=row3.sdiurl == null ? null : row3.sdiurl;
                            rowtFileOutputDelimited_1[24]=row3.distributionFormat == null ? null : row3.distributionFormat;
                            rowtFileOutputDelimited_1[25]=row3.place == null ? null : row3.place;
                            rowtFileOutputDelimited_1[26]=row3.useLimitation == null ? null : row3.useLimitation;
                            rowtFileOutputDelimited_1[27]=row3.browseGraphic == null ? null : row3.browseGraphic;
                            rowtFileOutputDelimited_1[28]=row3.shortname == null ? null : row3.shortname;
                            rowtFileOutputDelimited_1[29]=row3.referenceFlag == null ? null : row3.referenceFlag;
                            rowtFileOutputDelimited_1[30]=row3.wms == null ? null : row3.wms;
                            rowtFileOutputDelimited_1[31]=row3.idpTopics == null ? null : row3.idpTopics;
                            rowtFileOutputDelimited_1[32]=row3.restApi == null ? null : row3.restApi;
                            rowtFileOutputDelimited_1[33]=row3.status == null ? null : row3.status;
                nb_line_tFileOutputDelimited_1++;
                resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);
                                       CsvWritertFileOutputDelimited_1.writeNext(rowtFileOutputDelimited_1);




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */




	
	/**
	 * [tSQLiteOutput_1 main ] start
	 */

	

	
	
	currentComponent="tSQLiteOutput_1";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		
	



        whetherReject_tSQLiteOutput_1 = false;
                    if(row4.uuid == null) {
pstmt_tSQLiteOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(1, row4.uuid);
}

                    if(row4.dataset_id == null) {
pstmt_tSQLiteOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(2, row4.dataset_id);
}

                    if(row4.datestamp == null) {
pstmt_tSQLiteOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(3, row4.datestamp);
}

                    if(row4.crs == null) {
pstmt_tSQLiteOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(4, row4.crs);
}

                    if(row4.title == null) {
pstmt_tSQLiteOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(5, row4.title);
}

                    if(row4.edition == null) {
pstmt_tSQLiteOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(6, row4.edition);
}

                    if(row4.abstracts == null) {
pstmt_tSQLiteOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(7, row4.abstracts);
}

                    if(row4.custodian == null) {
pstmt_tSQLiteOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(8, row4.custodian);
}

                    if(row4.inspire_themes == null) {
pstmt_tSQLiteOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(9, row4.inspire_themes);
}

                    if(row4.gemet_concepts == null) {
pstmt_tSQLiteOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(10, row4.gemet_concepts);
}

                    if(row4.wlon == null) {
pstmt_tSQLiteOutput_1.setNull(11, java.sql.Types.FLOAT);
} else {pstmt_tSQLiteOutput_1.setFloat(11, row4.wlon);
}

                    if(row4.elon == null) {
pstmt_tSQLiteOutput_1.setNull(12, java.sql.Types.FLOAT);
} else {pstmt_tSQLiteOutput_1.setFloat(12, row4.elon);
}

                    if(row4.slat == null) {
pstmt_tSQLiteOutput_1.setNull(13, java.sql.Types.FLOAT);
} else {pstmt_tSQLiteOutput_1.setFloat(13, row4.slat);
}

                    if(row4.nlat == null) {
pstmt_tSQLiteOutput_1.setNull(14, java.sql.Types.FLOAT);
} else {pstmt_tSQLiteOutput_1.setFloat(14, row4.nlat);
}

                    if(row4.stype == null) {
pstmt_tSQLiteOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(15, row4.stype);
}

                    if(row4.scaleres == null) {
pstmt_tSQLiteOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(16, row4.scaleres);
}

                    if(row4.tbegin == null) {
pstmt_tSQLiteOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(17, row4.tbegin);
}

                    if(row4.tend == null) {
pstmt_tSQLiteOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(18, row4.tend);
}

                    if(row4.protocols == null) {
pstmt_tSQLiteOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(19, row4.protocols);
}

                    if(row4.links == null) {
pstmt_tSQLiteOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(20, row4.links);
}

                    if(row4.lineage == null) {
pstmt_tSQLiteOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(21, row4.lineage);
}

                    if(row4.data_src == null) {
pstmt_tSQLiteOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(22, row4.data_src);
}

                    if(row4.published == null) {
pstmt_tSQLiteOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(23, row4.published);
}

                    if(row4.sdiurl == null) {
pstmt_tSQLiteOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(24, row4.sdiurl);
}

                    if(row4.distributionFormat == null) {
pstmt_tSQLiteOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(25, row4.distributionFormat);
}

                    if(row4.place == null) {
pstmt_tSQLiteOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(26, row4.place);
}

                    if(row4.useLimitation == null) {
pstmt_tSQLiteOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(27, row4.useLimitation);
}

                    if(row4.browseGraphic == null) {
pstmt_tSQLiteOutput_1.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(28, row4.browseGraphic);
}

                    if(row4.shortname == null) {
pstmt_tSQLiteOutput_1.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(29, row4.shortname);
}

                    if(row4.referenceFlag == null) {
pstmt_tSQLiteOutput_1.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(30, row4.referenceFlag);
}

                    if(row4.wms == null) {
pstmt_tSQLiteOutput_1.setNull(31, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(31, row4.wms);
}

                    if(row4.idpTopics == null) {
pstmt_tSQLiteOutput_1.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(32, row4.idpTopics);
}

                    if(row4.restApi == null) {
pstmt_tSQLiteOutput_1.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(33, row4.restApi);
}

                    if(row4.status == null) {
pstmt_tSQLiteOutput_1.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(34, row4.status);
}


                       pstmt_tSQLiteOutput_1.addBatch();
                       batchSizeCounter_tSQLiteOutput_1++;
                       nb_line_tSQLiteOutput_1++;
            if(!whetherReject_tSQLiteOutput_1) {
            }
                if ((batchSize_tSQLiteOutput_1 > 0) && (batchSize_tSQLiteOutput_1 <= batchSizeCounter_tSQLiteOutput_1)) {
                    int[] status_tSQLiteOutput_1 = null;
                    int countSum_tSQLiteOutput_1 = 0;
                    try {
                        batchSizeCounter_tSQLiteOutput_1 = 0;
                        status_tSQLiteOutput_1 = pstmt_tSQLiteOutput_1.executeBatch();
                        for(int countEach_tSQLiteOutput_1: status_tSQLiteOutput_1) {
                            countSum_tSQLiteOutput_1 += (countEach_tSQLiteOutput_1 < 0 ? 0 : countEach_tSQLiteOutput_1);
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tSQLiteOutput_1: e.getUpdateCounts()) {
                            countSum_tSQLiteOutput_1 += (countEach_tSQLiteOutput_1 < 0 ? 0 : countEach_tSQLiteOutput_1);
                        }
                        System.err.println(e.getMessage());
                    }
                    try {
                        tmp_batchUpdateCount_tSQLiteOutput_1 = pstmt_tSQLiteOutput_1.getUpdateCount();
                    }catch (java.sql.SQLException e){
                        System.err.println(e.getMessage());
                    }
                    tmp_batchUpdateCount_tSQLiteOutput_1 = tmp_batchUpdateCount_tSQLiteOutput_1 > countSum_tSQLiteOutput_1 ? tmp_batchUpdateCount_tSQLiteOutput_1 : countSum_tSQLiteOutput_1;
                        insertedCount_tSQLiteOutput_1 += tmp_batchUpdateCount_tSQLiteOutput_1;
               }
                commitCounter_tSQLiteOutput_1++;
                if(commitEvery_tSQLiteOutput_1 <= commitCounter_tSQLiteOutput_1) {
                try {
                    if (batchSizeCounter_tSQLiteOutput_1 > 0) {
	                    int countSum_tSQLiteOutput_1 = 0;
	                    
	                    for(int countEach_tSQLiteOutput_1: pstmt_tSQLiteOutput_1.executeBatch()) {
	                        countSum_tSQLiteOutput_1 += (countEach_tSQLiteOutput_1 < 0 ? 0 : countEach_tSQLiteOutput_1);
	                    }
	                    
	                    
	                        insertedCount_tSQLiteOutput_1 += countSum_tSQLiteOutput_1;
	                    
	                    batchSizeCounter_tSQLiteOutput_1 = 0;
                    }
                }catch (java.sql.BatchUpdateException e){
                        int countSum_tSQLiteOutput_1 = 0;
                        for(int countEach_tSQLiteOutput_1: e.getUpdateCounts()) {
                            countSum_tSQLiteOutput_1 += (countEach_tSQLiteOutput_1 < 0 ? 0 : countEach_tSQLiteOutput_1);
                        }
                            insertedCount_tSQLiteOutput_1 += countSum_tSQLiteOutput_1;
                        System.err.println(e.getMessage());
                }
                
                conn_tSQLiteOutput_1.commit();
                commitCounter_tSQLiteOutput_1=0;
            }

 


	tos_count_tSQLiteOutput_1++;

/**
 * [tSQLiteOutput_1 main ] stop
 */




	
	/**
	 * [tFileOutputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		

								   				
	    				if(row5.uuid != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 0;
					

					
						jxl.write.WritableCell cell_0_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.uuid
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_0_tFileOutputExcel_1);
							int currentWith_0_tFileOutputExcel_1 = cell_0_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[0]=fitWidth_tFileOutputExcel_1[0]>currentWith_0_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[0]:currentWith_0_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.dataset_id != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 1;
					

					
						jxl.write.WritableCell cell_1_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.dataset_id
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_1_tFileOutputExcel_1);
							int currentWith_1_tFileOutputExcel_1 = cell_1_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[1]=fitWidth_tFileOutputExcel_1[1]>currentWith_1_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[1]:currentWith_1_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.datestamp != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 2;
					

					
						jxl.write.WritableCell cell_2_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.datestamp
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_2_tFileOutputExcel_1);
							int currentWith_2_tFileOutputExcel_1 = cell_2_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[2]=fitWidth_tFileOutputExcel_1[2]>currentWith_2_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[2]:currentWith_2_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.crs != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 3;
					

					
						jxl.write.WritableCell cell_3_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.crs
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_3_tFileOutputExcel_1);
							int currentWith_3_tFileOutputExcel_1 = cell_3_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[3]=fitWidth_tFileOutputExcel_1[3]>currentWith_3_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[3]:currentWith_3_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.title != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 4;
					

					
						jxl.write.WritableCell cell_4_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.title
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_4_tFileOutputExcel_1);
							int currentWith_4_tFileOutputExcel_1 = cell_4_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[4]=fitWidth_tFileOutputExcel_1[4]>currentWith_4_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[4]:currentWith_4_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.edition != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 5;
					

					
						jxl.write.WritableCell cell_5_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.edition
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_5_tFileOutputExcel_1);
							int currentWith_5_tFileOutputExcel_1 = cell_5_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[5]=fitWidth_tFileOutputExcel_1[5]>currentWith_5_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[5]:currentWith_5_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.abstracts != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 6;
					

					
						jxl.write.WritableCell cell_6_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.abstracts
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_6_tFileOutputExcel_1);
							int currentWith_6_tFileOutputExcel_1 = cell_6_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[6]=fitWidth_tFileOutputExcel_1[6]>currentWith_6_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[6]:currentWith_6_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.custodian != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 7;
					

					
						jxl.write.WritableCell cell_7_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.custodian
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_7_tFileOutputExcel_1);
							int currentWith_7_tFileOutputExcel_1 = cell_7_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[7]=fitWidth_tFileOutputExcel_1[7]>currentWith_7_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[7]:currentWith_7_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.inspire_themes != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 8;
					

					
						jxl.write.WritableCell cell_8_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.inspire_themes
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_8_tFileOutputExcel_1);
							int currentWith_8_tFileOutputExcel_1 = cell_8_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[8]=fitWidth_tFileOutputExcel_1[8]>currentWith_8_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[8]:currentWith_8_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.gemet_concepts != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 9;
					

					
						jxl.write.WritableCell cell_9_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.gemet_concepts
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_9_tFileOutputExcel_1);
							int currentWith_9_tFileOutputExcel_1 = cell_9_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[9]=fitWidth_tFileOutputExcel_1[9]>currentWith_9_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[9]:currentWith_9_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.wlon != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 10;
					

					
						jxl.write.WritableCell cell_10_tFileOutputExcel_1 = new jxl.write.Number(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.wlon
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_10_tFileOutputExcel_1);
							int currentWith_10_tFileOutputExcel_1 = String.valueOf(((jxl.write.Number)cell_10_tFileOutputExcel_1).getValue()).trim().length();
							currentWith_10_tFileOutputExcel_1=currentWith_10_tFileOutputExcel_1>10?10:currentWith_10_tFileOutputExcel_1;
							fitWidth_tFileOutputExcel_1[10]=fitWidth_tFileOutputExcel_1[10]>currentWith_10_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[10]:currentWith_10_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.elon != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 11;
					

					
						jxl.write.WritableCell cell_11_tFileOutputExcel_1 = new jxl.write.Number(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.elon
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_11_tFileOutputExcel_1);
							int currentWith_11_tFileOutputExcel_1 = String.valueOf(((jxl.write.Number)cell_11_tFileOutputExcel_1).getValue()).trim().length();
							currentWith_11_tFileOutputExcel_1=currentWith_11_tFileOutputExcel_1>10?10:currentWith_11_tFileOutputExcel_1;
							fitWidth_tFileOutputExcel_1[11]=fitWidth_tFileOutputExcel_1[11]>currentWith_11_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[11]:currentWith_11_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.slat != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 12;
					

					
						jxl.write.WritableCell cell_12_tFileOutputExcel_1 = new jxl.write.Number(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.slat
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_12_tFileOutputExcel_1);
							int currentWith_12_tFileOutputExcel_1 = String.valueOf(((jxl.write.Number)cell_12_tFileOutputExcel_1).getValue()).trim().length();
							currentWith_12_tFileOutputExcel_1=currentWith_12_tFileOutputExcel_1>10?10:currentWith_12_tFileOutputExcel_1;
							fitWidth_tFileOutputExcel_1[12]=fitWidth_tFileOutputExcel_1[12]>currentWith_12_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[12]:currentWith_12_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.nlat != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 13;
					

					
						jxl.write.WritableCell cell_13_tFileOutputExcel_1 = new jxl.write.Number(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.nlat
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_13_tFileOutputExcel_1);
							int currentWith_13_tFileOutputExcel_1 = String.valueOf(((jxl.write.Number)cell_13_tFileOutputExcel_1).getValue()).trim().length();
							currentWith_13_tFileOutputExcel_1=currentWith_13_tFileOutputExcel_1>10?10:currentWith_13_tFileOutputExcel_1;
							fitWidth_tFileOutputExcel_1[13]=fitWidth_tFileOutputExcel_1[13]>currentWith_13_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[13]:currentWith_13_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.stype != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 14;
					

					
						jxl.write.WritableCell cell_14_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.stype
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_14_tFileOutputExcel_1);
							int currentWith_14_tFileOutputExcel_1 = cell_14_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[14]=fitWidth_tFileOutputExcel_1[14]>currentWith_14_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[14]:currentWith_14_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.scaleres != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 15;
					

					
						jxl.write.WritableCell cell_15_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.scaleres
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_15_tFileOutputExcel_1);
							int currentWith_15_tFileOutputExcel_1 = cell_15_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[15]=fitWidth_tFileOutputExcel_1[15]>currentWith_15_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[15]:currentWith_15_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.tbegin != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 16;
					

					
						jxl.write.WritableCell cell_16_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.tbegin
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_16_tFileOutputExcel_1);
							int currentWith_16_tFileOutputExcel_1 = cell_16_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[16]=fitWidth_tFileOutputExcel_1[16]>currentWith_16_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[16]:currentWith_16_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.tend != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 17;
					

					
						jxl.write.WritableCell cell_17_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.tend
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_17_tFileOutputExcel_1);
							int currentWith_17_tFileOutputExcel_1 = cell_17_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[17]=fitWidth_tFileOutputExcel_1[17]>currentWith_17_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[17]:currentWith_17_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.protocols != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 18;
					

					
						jxl.write.WritableCell cell_18_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.protocols
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_18_tFileOutputExcel_1);
							int currentWith_18_tFileOutputExcel_1 = cell_18_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[18]=fitWidth_tFileOutputExcel_1[18]>currentWith_18_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[18]:currentWith_18_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.links != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 19;
					

					
						jxl.write.WritableCell cell_19_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.links
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_19_tFileOutputExcel_1);
							int currentWith_19_tFileOutputExcel_1 = cell_19_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[19]=fitWidth_tFileOutputExcel_1[19]>currentWith_19_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[19]:currentWith_19_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.lineage != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 20;
					

					
						jxl.write.WritableCell cell_20_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.lineage
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_20_tFileOutputExcel_1);
							int currentWith_20_tFileOutputExcel_1 = cell_20_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[20]=fitWidth_tFileOutputExcel_1[20]>currentWith_20_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[20]:currentWith_20_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.data_src != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 21;
					

					
						jxl.write.WritableCell cell_21_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.data_src
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_21_tFileOutputExcel_1);
							int currentWith_21_tFileOutputExcel_1 = cell_21_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[21]=fitWidth_tFileOutputExcel_1[21]>currentWith_21_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[21]:currentWith_21_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.published != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 22;
					

					
						jxl.write.WritableCell cell_22_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.published
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_22_tFileOutputExcel_1);
							int currentWith_22_tFileOutputExcel_1 = cell_22_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[22]=fitWidth_tFileOutputExcel_1[22]>currentWith_22_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[22]:currentWith_22_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.sdiurl != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 23;
					

					
						jxl.write.WritableCell cell_23_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.sdiurl
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_23_tFileOutputExcel_1);
							int currentWith_23_tFileOutputExcel_1 = cell_23_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[23]=fitWidth_tFileOutputExcel_1[23]>currentWith_23_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[23]:currentWith_23_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.distributionFormat != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 24;
					

					
						jxl.write.WritableCell cell_24_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.distributionFormat
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_24_tFileOutputExcel_1);
							int currentWith_24_tFileOutputExcel_1 = cell_24_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[24]=fitWidth_tFileOutputExcel_1[24]>currentWith_24_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[24]:currentWith_24_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.place != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 25;
					

					
						jxl.write.WritableCell cell_25_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.place
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_25_tFileOutputExcel_1);
							int currentWith_25_tFileOutputExcel_1 = cell_25_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[25]=fitWidth_tFileOutputExcel_1[25]>currentWith_25_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[25]:currentWith_25_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.useLimitation != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 26;
					

					
						jxl.write.WritableCell cell_26_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.useLimitation
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_26_tFileOutputExcel_1);
							int currentWith_26_tFileOutputExcel_1 = cell_26_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[26]=fitWidth_tFileOutputExcel_1[26]>currentWith_26_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[26]:currentWith_26_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.browseGraphic != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 27;
					

					
						jxl.write.WritableCell cell_27_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.browseGraphic
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_27_tFileOutputExcel_1);
							int currentWith_27_tFileOutputExcel_1 = cell_27_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[27]=fitWidth_tFileOutputExcel_1[27]>currentWith_27_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[27]:currentWith_27_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.shortname != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 28;
					

					
						jxl.write.WritableCell cell_28_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.shortname
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_28_tFileOutputExcel_1);
							int currentWith_28_tFileOutputExcel_1 = cell_28_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[28]=fitWidth_tFileOutputExcel_1[28]>currentWith_28_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[28]:currentWith_28_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.referenceFlag != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 29;
					

					
						jxl.write.WritableCell cell_29_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.referenceFlag
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_29_tFileOutputExcel_1);
							int currentWith_29_tFileOutputExcel_1 = cell_29_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[29]=fitWidth_tFileOutputExcel_1[29]>currentWith_29_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[29]:currentWith_29_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.wms != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 30;
					

					
						jxl.write.WritableCell cell_30_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.wms
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_30_tFileOutputExcel_1);
							int currentWith_30_tFileOutputExcel_1 = cell_30_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[30]=fitWidth_tFileOutputExcel_1[30]>currentWith_30_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[30]:currentWith_30_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.idpTopics != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 31;
					

					
						jxl.write.WritableCell cell_31_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.idpTopics
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_31_tFileOutputExcel_1);
							int currentWith_31_tFileOutputExcel_1 = cell_31_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[31]=fitWidth_tFileOutputExcel_1[31]>currentWith_31_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[31]:currentWith_31_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.restApi != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 32;
					

					
						jxl.write.WritableCell cell_32_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.restApi
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_32_tFileOutputExcel_1);
							int currentWith_32_tFileOutputExcel_1 = cell_32_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[32]=fitWidth_tFileOutputExcel_1[32]>currentWith_32_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[32]:currentWith_32_tFileOutputExcel_1+2;
	    				} 
					
								   				
	    				if(row5.status != null) {
    				
					
//modif start
					
						columnIndex_tFileOutputExcel_1 = 33;
					

					
						jxl.write.WritableCell cell_33_tFileOutputExcel_1 = new jxl.write.Label(columnIndex_tFileOutputExcel_1, startRowNum_tFileOutputExcel_1 + nb_line_tFileOutputExcel_1,
					
//modif end
								row5.status
						,format_tFileOutputExcel_1
							);
//modif start					
							//If we keep the cell format from the existing cell in sheet
							
							
//modif ends							
							writableSheet_tFileOutputExcel_1.addCell(cell_33_tFileOutputExcel_1);
							int currentWith_33_tFileOutputExcel_1 = cell_33_tFileOutputExcel_1.getContents().trim().length();
							fitWidth_tFileOutputExcel_1[33]=fitWidth_tFileOutputExcel_1[33]>currentWith_33_tFileOutputExcel_1?fitWidth_tFileOutputExcel_1[33]:currentWith_33_tFileOutputExcel_1+2;
	    				} 
					
    			nb_line_tFileOutputExcel_1++;
				
 


	tos_count_tFileOutputExcel_1++;

/**
 * [tFileOutputExcel_1 main ] stop
 */




} // End of branch "finaloutput"





} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	


				nb_line_tFileInputDelimited_1++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_1!=null){
    					csvReadertFileInputDelimited_1.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_1!=null){
    				globalMap.put("tFileInputDelimited_1_NB_LINE",nb_line_tFileInputDelimited_1);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tReplicate_1 end ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("finaloutput"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tReplicate_1", true);
end_Hash.put("tReplicate_1", System.currentTimeMillis());




/**
 * [tReplicate_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_1!=null) {
				    	CsvWritertFileOutputDelimited_1.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */




	
	/**
	 * [tSQLiteOutput_1 end ] start
	 */

	

	
	
	currentComponent="tSQLiteOutput_1";

	




                    int[] status_tSQLiteOutput_1 = null;
                    int countSum_tSQLiteOutput_1 = 0;
                    try {
                        if(pstmt_tSQLiteOutput_1!=null && batchSizeCounter_tSQLiteOutput_1 > 0 ){
                            status_tSQLiteOutput_1 = pstmt_tSQLiteOutput_1.executeBatch();
                            for(int countEach_tSQLiteOutput_1: status_tSQLiteOutput_1) {
                                countSum_tSQLiteOutput_1 += (countEach_tSQLiteOutput_1 < 0 ? 0 : countEach_tSQLiteOutput_1);
                            }
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tSQLiteOutput_1: e.getUpdateCounts()) {
                            countSum_tSQLiteOutput_1 += (countEach_tSQLiteOutput_1 < 0 ? 0 : countEach_tSQLiteOutput_1);
                        }
                        System.err.println(e.getMessage());
                    }
                    if(pstmt_tSQLiteOutput_1!=null && batchSizeCounter_tSQLiteOutput_1 > 0 ){
                        try {
                            tmp_batchUpdateCount_tSQLiteOutput_1 = pstmt_tSQLiteOutput_1.getUpdateCount();
                        }catch (java.sql.SQLException e){

                        }
                        tmp_batchUpdateCount_tSQLiteOutput_1 = tmp_batchUpdateCount_tSQLiteOutput_1 > countSum_tSQLiteOutput_1 ? tmp_batchUpdateCount_tSQLiteOutput_1 : countSum_tSQLiteOutput_1;
                            insertedCount_tSQLiteOutput_1 += tmp_batchUpdateCount_tSQLiteOutput_1;
                    }
                    if(pstmt_tSQLiteOutput_1 != null) {
                        pstmt_tSQLiteOutput_1.close();
                    }

        if (commitCounter_tSQLiteOutput_1 > 0) {
            conn_tSQLiteOutput_1.commit();
        }
        conn_tSQLiteOutput_1 .close();
		resourceMap.put("finish_tSQLiteOutput_1", true);

	int rejectedCount_tSQLiteOutput_1 = 0;
	nb_line_deleted_tSQLiteOutput_1=nb_line_deleted_tSQLiteOutput_1+ deletedCount_tSQLiteOutput_1;
	nb_line_update_tSQLiteOutput_1=nb_line_update_tSQLiteOutput_1 + updatedCount_tSQLiteOutput_1;
	nb_line_inserted_tSQLiteOutput_1=nb_line_inserted_tSQLiteOutput_1 + insertedCount_tSQLiteOutput_1;
	nb_line_rejected_tSQLiteOutput_1=nb_line_rejected_tSQLiteOutput_1 + rejectedCount_tSQLiteOutput_1;
	
        globalMap.put("tSQLiteOutput_1_NB_LINE",nb_line_tSQLiteOutput_1);
        globalMap.put("tSQLiteOutput_1_NB_LINE_UPDATED",nb_line_update_tSQLiteOutput_1);
        globalMap.put("tSQLiteOutput_1_NB_LINE_INSERTED",nb_line_inserted_tSQLiteOutput_1);
        globalMap.put("tSQLiteOutput_1_NB_LINE_DELETED",nb_line_deleted_tSQLiteOutput_1);
        globalMap.put("tSQLiteOutput_1_NB_LINE_REJECTED", nb_line_rejected_tSQLiteOutput_1);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tSQLiteOutput_1", true);
end_Hash.put("tSQLiteOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tSQLiteRow_1Process(globalMap);



/**
 * [tSQLiteOutput_1 end ] stop
 */




	
	/**
	 * [tFileOutputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

		writeableWorkbook_tFileOutputExcel_1.write();
		writeableWorkbook_tFileOutputExcel_1.close();
		
			nb_line_tFileOutputExcel_1 = nb_line_tFileOutputExcel_1 -1;
		
		globalMap.put("tFileOutputExcel_1_NB_LINE",nb_line_tFileOutputExcel_1);
		
		

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputExcel_1", true);
end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());




/**
 * [tFileOutputExcel_1 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tReplicate_1 finally ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

 



/**
 * [tReplicate_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_1");
					
						if(CsvWritertFileOutputDelimited_1!=null) {
					    	CsvWritertFileOutputDelimited_1.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */




	
	/**
	 * [tSQLiteOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteOutput_1";

	



	
		if(resourceMap.get("finish_tSQLiteOutput_1")==null){
			if(resourceMap.get("conn_tSQLiteOutput_1")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tSQLiteOutput_1")).close();
					
				} catch (java.sql.SQLException sqlEx_tSQLiteOutput_1) {
					String errorMessage_tSQLiteOutput_1 = "failed to close the connection in tSQLiteOutput_1 :" + sqlEx_tSQLiteOutput_1.getMessage();
					
					System.err.println(errorMessage_tSQLiteOutput_1);
				}
			}
		}
	

 



/**
 * [tSQLiteOutput_1 finally ] stop
 */




	
	/**
	 * [tFileOutputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	

public void tSQLiteRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tSQLiteRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteRow_1", false);
		start_Hash.put("tSQLiteRow_1", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteRow_1";

	
		int tos_count_tSQLiteRow_1 = 0;
		
    	class BytesLimit65535_tSQLiteRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteRow_1().limitLog4jByte();

	java.sql.Connection conn_tSQLiteRow_1 = null;
	String query_tSQLiteRow_1 = "";
	boolean whetherReject_tSQLiteRow_1 = false;
			String driverClass_tSQLiteRow_1 = "org.sqlite.JDBC";
		    java.lang.Class.forName(driverClass_tSQLiteRow_1);
		
			String url_tSQLiteRow_1 = "jdbc:sqlite:" + "/" + context.outputDir + "/sdi-internal.sqlite";
		
					conn_tSQLiteRow_1 = java.sql.DriverManager.getConnection(url_tSQLiteRow_1);
				
		java.sql.Statement stmt_tSQLiteRow_1 = conn_tSQLiteRow_1.createStatement();
	

 



/**
 * [tSQLiteRow_1 begin ] stop
 */
	
	/**
	 * [tSQLiteRow_1 main ] start
	 */

	

	
	
	currentComponent="tSQLiteRow_1";

	

query_tSQLiteRow_1 = "VACUUM";
whetherReject_tSQLiteRow_1 = false;
globalMap.put("tSQLiteRow_1_QUERY",query_tSQLiteRow_1);
try {
		stmt_tSQLiteRow_1.execute(query_tSQLiteRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tSQLiteRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	

 


	tos_count_tSQLiteRow_1++;

/**
 * [tSQLiteRow_1 main ] stop
 */
	
	/**
	 * [tSQLiteRow_1 end ] start
	 */

	

	
	
	currentComponent="tSQLiteRow_1";

	

	
	stmt_tSQLiteRow_1.close();	
			conn_tSQLiteRow_1.close();
			

 

ok_Hash.put("tSQLiteRow_1", true);
end_Hash.put("tSQLiteRow_1", System.currentTimeMillis());




/**
 * [tSQLiteRow_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteRow_1 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteRow_1";

	

 



/**
 * [tSQLiteRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteRow_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_merge = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_merge = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String permalink;

				public String getPermalink () {
					return this.permalink;
				}
				
			    public String cmsUrl;

				public String getCmsUrl () {
					return this.cmsUrl;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.permalink == null) ? 0 : this.permalink.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.permalink == null) {
							if (other.permalink != null)
								return false;
						
						} else if (!this.permalink.equals(other.permalink))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.permalink = this.permalink;
	            other.cmsUrl = this.cmsUrl;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.permalink = this.permalink;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_merge.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_merge.length == 0) {
   					commonByteArray_LOCAL_PROJECT_merge = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_merge = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_merge, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_merge, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_merge) {

        	try {

        		int length = 0;
		
					this.permalink = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.permalink,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.cmsUrl = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.cmsUrl, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("permalink="+permalink);
		sb.append(",cmsUrl="+cmsUrl);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.permalink, other.permalink);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row2 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row2().limitLog4jByte();

			   		// connection name:row2
			   		// source node:tFileInputDelimited_2 - inputs:(after_tFileInputDelimited_1) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2) outputs:(finaloutput)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_2().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;	
				
				char fieldSeparator_tFileInputDelimited_2[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)"\t").length() > 0 ){
					fieldSeparator_tFileInputDelimited_2 = ((String)"\t").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_2[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_2 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_2 = /** Start field tFileInputDelimited_2:FILENAME */System.getProperty("java.io.tmpdir") + "/sdiDump/tmp/resolveuid2cmsurl.tsv"/** End field tFileInputDelimited_2:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;
	
				try{
					
						String[] rowtFileInputDelimited_2=null;
						int currentLinetFileInputDelimited_2 = 0;
	        			int outputLinetFileInputDelimited_2 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0;
			if(footer_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_2, fieldSeparator_tFileInputDelimited_2[0], "UTF-8");
							}else{
								csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_2)),"UTF-8")), fieldSeparator_tFileInputDelimited_2[0]);
		        			}
					
					
					csvReadertFileInputDelimited_2.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_2[0] != '\n') && (rowSeparator_tFileInputDelimited_2[0] != '\r') )
	        			csvReadertFileInputDelimited_2.setLineEnd(""+rowSeparator_tFileInputDelimited_2[0]);
						
	        				csvReadertFileInputDelimited_2.setQuoteChar('"');
						
	            				//?????doesn't work for other escapeChar
	            				//the default escape mode is double escape
	            				csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_2 > 0){
						for(totalLinetFileInputDelimited_2=0;totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++){
							csvReadertFileInputDelimited_2.readNext();
						}
						csvReadertFileInputDelimited_2.setSkipEmptyRecords(true);
			            while (csvReadertFileInputDelimited_2.readNext()) {
							
								rowtFileInputDelimited_2=csvReadertFileInputDelimited_2.getValues();
								if(!(rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0]))){//empty line when row separator is '\n'
							
	                
	                		totalLinetFileInputDelimited_2++;
	                
							
								}
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2   < 0? 0 : totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2 ;
	            		if(lastLinetFileInputDelimited_2 > 0){
	                		lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2 : lastLineTemptFileInputDelimited_2; 
	            		}else {
	                		lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
	            		}
	         
			          	csvReadertFileInputDelimited_2.close();
				        if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_2, fieldSeparator_tFileInputDelimited_2[0], "UTF-8");
		        		}else{
				 			csvReadertFileInputDelimited_2=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_2)),"UTF-8")), fieldSeparator_tFileInputDelimited_2[0]);
						}
						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_2[0] != '\n') && (rowSeparator_tFileInputDelimited_2[0] != '\r') )	
	        				csvReadertFileInputDelimited_2.setLineEnd(""+rowSeparator_tFileInputDelimited_2[0]);
						
							csvReadertFileInputDelimited_2.setQuoteChar('"');
						
	        				//?????doesn't work for other escapeChar
	        				//the default escape mode is double escape
	        				csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_2 != 0){
			        	for(currentLinetFileInputDelimited_2=0;currentLinetFileInputDelimited_2 < 1;currentLinetFileInputDelimited_2++){
			        		csvReadertFileInputDelimited_2.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_2.setSkipEmptyRecords(true);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_2 != 0 && csvReadertFileInputDelimited_2!=null && csvReadertFileInputDelimited_2.readNext() ) { 
	        		rowstate_tFileInputDelimited_2.reset();
	        
		        	rowtFileInputDelimited_2=csvReadertFileInputDelimited_2.getValues();
	        	
					
	        			if(rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])){//empty line when row separator is '\n'
	        				continue;
	        			}
					
	        	
	        	
	        		currentLinetFileInputDelimited_2++;
	            
		            if(lastLinetFileInputDelimited_2 > -1 && currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_2++;
	            	if (limittFileInputDelimited_2 > 0 && outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
	                	break;
	            	}  
	                                                                      
					
	    							row2 = null;			
								
	    							row2 = null;			
								
								boolean whetherReject_tFileInputDelimited_2 = false;
								row2 = new row2Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)"\t").length() > 0 ){
					fieldSeparator_tFileInputDelimited_2_ListType = ((String)"\t").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])){//empty line when row separator is '\n'
					
							row2.permalink = null;
					
							row2.cmsUrl = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_2 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_2 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.permalink = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row2.permalink = null;
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_2 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length){
						
						
							
									row2.cmsUrl = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];
									
							
						
						}else{
							row2.cmsUrl = null;
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_2.getException()!=null) {
										throw rowstate_tFileInputDelimited_2.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_2 = true;
        							
                							System.err.println(e.getMessage());
                							row2 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.permalink = row2.permalink;
				
				row2_HashRow.cmsUrl = row2.cmsUrl;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	


				nb_line_tFileInputDelimited_2++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_2!=null){
    					csvReadertFileInputDelimited_2.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_2!=null){
    				globalMap.put("tFileInputDelimited_2_NB_LINE",nb_line_tFileInputDelimited_2);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private java.util.Properties context_param = new java.util.Properties();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final merge mergeClass = new merge();

        int exitCode = mergeClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = merge.class.getClassLoader().getResourceAsStream("local_project/merge_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
            }
                context.outputDir=(String) context.getProperty("outputDir");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("outputDir")) {
                context.outputDir = (String) parentContextMap.get("outputDir");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileDelete_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileDelete_1) {
globalMap.put("tFileDelete_1_SUBPROCESS_STATE", -1);

e_tFileDelete_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : merge");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }




		









    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     245431 characters generated by Talend Open Studio for Big Data 
 *     on the February 27, 2018 5:38:40 PM CET
 ************************************************************************************************/