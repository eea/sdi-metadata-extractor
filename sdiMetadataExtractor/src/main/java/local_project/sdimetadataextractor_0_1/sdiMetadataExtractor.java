// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package local_project.sdimetadataextractor_0_1;

import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.Relational;
import routines.Mathematical;
import routines.Numeric;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaFlex_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: sdiMetadataExtractor Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.2.1.20181218_1206-M1
 * @status 
 */
public class sdiMetadataExtractor implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(username != null){
				
					this.setProperty("username", username.toString());
				
			}
			
			if(password != null){
				
					this.setProperty("password", password.toString());
				
			}
			
			if(outputDir != null){
				
					this.setProperty("outputDir", outputDir.toString());
				
			}
			
		}

public String username;
public String getUsername(){
	return this.username;
}
public java.lang.String password;
public java.lang.String getPassword(){
	return this.password;
}
public String outputDir;
public String getOutputDir(){
	return this.outputDir;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "sdiMetadataExtractor";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	AssertCatcherUtils tAssertCatcher_1 = new AssertCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				sdiMetadataExtractor.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(sdiMetadataExtractor.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tHttpRequest_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tHttpRequest_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplace_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLoop_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaFlex_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplace_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUniqRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplace_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAssertCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tAssertCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row44_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_status_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row40_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row34_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row45_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_2_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_2_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_2_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_10_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_10_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_10_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_2_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_2_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_2_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_10_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_10_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_10_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_8_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_8_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_8_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_9_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_9_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_9_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_3_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_3_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_3_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_5_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_5_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_5_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_1_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_1_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_1_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_6_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_6_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_6_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_4_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_4_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_4_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_8_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_8_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_8_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_5_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_5_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_5_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_7_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_7_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_7_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_7_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_7_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_7_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_6_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_6_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_6_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_3_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_3_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_3_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tXMLMap_11_TXMLMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tXMLMap_11_TXMLMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tXMLMap_11_TXMLMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_4_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_4_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_4_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
								if(!(exception instanceof TDieException)){
									
										tAssertCatcher_1.addMessage(pid, projectName, jobName, "java", null, "Failed", "Job execution error", exception.getMessage());
									
									tAssertCatcher_1Process(globalMap);
								}
								
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHttpRequest_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLoop_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileDelete_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tAssertCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tHttpRequest_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHttpRequest_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tHttpRequest_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHttpRequest_1", false);
		start_Hash.put("tHttpRequest_1", System.currentTimeMillis());
		
	
	currentComponent="tHttpRequest_1";

	
		int tos_count_tHttpRequest_1 = 0;
		

 



/**
 * [tHttpRequest_1 begin ] stop
 */
	
	/**
	 * [tHttpRequest_1 main ] start
	 */

	

	
	
	currentComponent="tHttpRequest_1";

	


int connectTimeOut_tHttpRequest_1 = Integer.valueOf(600)*1000;
int readTimeOut_tHttpRequest_1 = Integer.valueOf(0)*1000;

java.net.URL url_tHttpRequest_1 = new java.net.URL("https://sdi.eea.europa.eu/internal-catalogue/srv/eng/csw");

  java.net.Authenticator.setDefault(new java.net.Authenticator() {
      protected java.net.PasswordAuthentication getPasswordAuthentication() {


	final String decryptedPassword_tHttpRequest_1 = context.password; 

        return new java.net.PasswordAuthentication(context.username, decryptedPassword_tHttpRequest_1.toCharArray());
  }});
java.net.HttpURLConnection urlConn_tHttpRequest_1 = (java.net.HttpURLConnection) url_tHttpRequest_1.openConnection();
urlConn_tHttpRequest_1.setRequestMethod("POST");
urlConn_tHttpRequest_1.setDoOutput(true);
urlConn_tHttpRequest_1.setDoInput(true);
urlConn_tHttpRequest_1.setUseCaches(false);
	urlConn_tHttpRequest_1.setConnectTimeout(connectTimeOut_tHttpRequest_1);
	urlConn_tHttpRequest_1.setReadTimeout(readTimeOut_tHttpRequest_1);

  urlConn_tHttpRequest_1.setRequestProperty("Content-Type", "text/xml");
boolean connected_tHttpRequest_1 = false;
int responseCode_tHttpRequest_1 = 0;
globalMap.put("tHttpRequest_1_CONNECTED", false);
try{
    urlConn_tHttpRequest_1.connect();
    connected_tHttpRequest_1 = true;
    globalMap.put("tHttpRequest_1_CONNECTED", true);

    byte[] buffer_tHttpRequest_1 = new byte[1024];
    int bos_buffer_tHttpRequest_1 = 0;
            java.io.InputStream bisParam_tHttpRequest_1 = new java.io.BufferedInputStream(new java.io.FileInputStream(System.getProperty("java.io.tmpdir") + "/sdiDump/tmp/request.txt"));
            java.io.OutputStream bosParam_tHttpRequest_1 = new java.io.BufferedOutputStream(urlConn_tHttpRequest_1.getOutputStream());

            while ((bos_buffer_tHttpRequest_1 = bisParam_tHttpRequest_1.read(buffer_tHttpRequest_1)) != -1) {
                bosParam_tHttpRequest_1.write(buffer_tHttpRequest_1,0,bos_buffer_tHttpRequest_1);
            }
            bosParam_tHttpRequest_1.flush();
            bosParam_tHttpRequest_1.close();
            bisParam_tHttpRequest_1.close();

    responseCode_tHttpRequest_1 = urlConn_tHttpRequest_1.getResponseCode();
    globalMap.put("tHttpRequest_1_RESPONSE_CODE", responseCode_tHttpRequest_1);

    if (java.net.HttpURLConnection.HTTP_OK == responseCode_tHttpRequest_1) {
        java.io.InputStream bis_tHttpRequest_1 = new java.io.BufferedInputStream(urlConn_tHttpRequest_1.getInputStream());
            java.io.OutputStream bosContent_tHttpRequest_1 = new java.io.BufferedOutputStream(new java.io.FileOutputStream(System.getProperty("java.io.tmpdir") + "/sdiDump/tmp/out.xml"));
        while ((bos_buffer_tHttpRequest_1 = bis_tHttpRequest_1.read(buffer_tHttpRequest_1)) != -1) {bosContent_tHttpRequest_1.write(buffer_tHttpRequest_1,0,bos_buffer_tHttpRequest_1); 
        }
            bosContent_tHttpRequest_1.flush();
            bosContent_tHttpRequest_1.close();
        bis_tHttpRequest_1.close();
    } else {
    	String responseMessage_tHttpRequest_1 = urlConn_tHttpRequest_1.getResponseMessage();
    
        //get details response information which will be used when error appear
        java.io.InputStream err_stream_tHttpRequest_1 = urlConn_tHttpRequest_1.getErrorStream();
        if(err_stream_tHttpRequest_1!=null) {
            java.io.InputStream es_tHttpRequest_1 = new java.io.BufferedInputStream(err_stream_tHttpRequest_1);
        	java.io.ByteArrayOutputStream baos_tHttpRequest_1 = new java.io.ByteArrayOutputStream();
        	
        	byte[] buf_tHttpRequest_1 = new byte[1024];
            int read_tHttpRequest_1 = -1;
        	try {
            	while ((read_tHttpRequest_1 = es_tHttpRequest_1.read(buf_tHttpRequest_1)) > 0) {
            		baos_tHttpRequest_1.write(buf_tHttpRequest_1, 0, read_tHttpRequest_1);
            	}
        	} finally {
        		es_tHttpRequest_1.close();
        	}
        
        	responseMessage_tHttpRequest_1 += ("\n" + new String(baos_tHttpRequest_1.toByteArray()));
        }
    	
            System.err.println(responseCode_tHttpRequest_1 + " " + responseMessage_tHttpRequest_1);
            globalMap.put("tHttpRequest_1" + "_ERROR_MESSAGE","Request failed:" + responseCode_tHttpRequest_1 + " " + responseMessage_tHttpRequest_1);
    }

    urlConn_tHttpRequest_1.disconnect();
}catch(Exception e){
        System.err.println(e.getMessage());
        globalMap.put("tHttpRequest_1" + "_ERROR_MESSAGE",e.getMessage());
}

 


	tos_count_tHttpRequest_1++;

/**
 * [tHttpRequest_1 main ] stop
 */
	
	/**
	 * [tHttpRequest_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHttpRequest_1";

	

 



/**
 * [tHttpRequest_1 process_data_begin ] stop
 */
	
	/**
	 * [tHttpRequest_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHttpRequest_1";

	

 



/**
 * [tHttpRequest_1 process_data_end ] stop
 */
	
	/**
	 * [tHttpRequest_1 end ] start
	 */

	

	
	
	currentComponent="tHttpRequest_1";

	

 

ok_Hash.put("tHttpRequest_1", true);
end_Hash.put("tHttpRequest_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputXML_5Process(globalMap);



/**
 * [tHttpRequest_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHttpRequest_1 finally ] start
	 */

	

	
	
	currentComponent="tHttpRequest_1";

	

 



/**
 * [tHttpRequest_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHttpRequest_1_SUBPROCESS_STATE", 1);
	}
	


public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String dataset_id;

				public String getDataset_id () {
					return this.dataset_id;
				}
				
			    public String datestamp;

				public String getDatestamp () {
					return this.datestamp;
				}
				
			    public String crs;

				public String getCrs () {
					return this.crs;
				}
				
			    public String title;

				public String getTitle () {
					return this.title;
				}
				
			    public String edition;

				public String getEdition () {
					return this.edition;
				}
				
			    public String abstracts;

				public String getAbstracts () {
					return this.abstracts;
				}
				
			    public String custodian;

				public String getCustodian () {
					return this.custodian;
				}
				
			    public String inspire_themes;

				public String getInspire_themes () {
					return this.inspire_themes;
				}
				
			    public String gemet_concepts;

				public String getGemet_concepts () {
					return this.gemet_concepts;
				}
				
			    public Float wlon;

				public Float getWlon () {
					return this.wlon;
				}
				
			    public Float elon;

				public Float getElon () {
					return this.elon;
				}
				
			    public Float slat;

				public Float getSlat () {
					return this.slat;
				}
				
			    public Float nlat;

				public Float getNlat () {
					return this.nlat;
				}
				
			    public String stype;

				public String getStype () {
					return this.stype;
				}
				
			    public String scaleres;

				public String getScaleres () {
					return this.scaleres;
				}
				
			    public String tbegin;

				public String getTbegin () {
					return this.tbegin;
				}
				
			    public String tend;

				public String getTend () {
					return this.tend;
				}
				
			    public String protocols;

				public String getProtocols () {
					return this.protocols;
				}
				
			    public String links;

				public String getLinks () {
					return this.links;
				}
				
			    public String lineage;

				public String getLineage () {
					return this.lineage;
				}
				
			    public String data_src;

				public String getData_src () {
					return this.data_src;
				}
				
			    public String published;

				public String getPublished () {
					return this.published;
				}
				
			    public String sdiurl;

				public String getSdiurl () {
					return this.sdiurl;
				}
				
			    public String distributionFormat;

				public String getDistributionFormat () {
					return this.distributionFormat;
				}
				
			    public String place;

				public String getPlace () {
					return this.place;
				}
				
			    public String useLimitation;

				public String getUseLimitation () {
					return this.useLimitation;
				}
				
			    public String browseGraphic;

				public String getBrowseGraphic () {
					return this.browseGraphic;
				}
				
			    public String shortName;

				public String getShortName () {
					return this.shortName;
				}
				
			    public String referenceFlag;

				public String getReferenceFlag () {
					return this.referenceFlag;
				}
				
			    public String wms;

				public String getWms () {
					return this.wms;
				}
				
			    public String idpTopics;

				public String getIdpTopics () {
					return this.idpTopics;
				}
				
			    public String restApi;

				public String getRestApi () {
					return this.restApi;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.dataset_id = readString(dis);
					
					this.datestamp = readString(dis);
					
					this.crs = readString(dis);
					
					this.title = readString(dis);
					
					this.edition = readString(dis);
					
					this.abstracts = readString(dis);
					
					this.custodian = readString(dis);
					
					this.inspire_themes = readString(dis);
					
					this.gemet_concepts = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.wlon = null;
           				} else {
           			    	this.wlon = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.elon = null;
           				} else {
           			    	this.elon = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.slat = null;
           				} else {
           			    	this.slat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nlat = null;
           				} else {
           			    	this.nlat = dis.readFloat();
           				}
					
					this.stype = readString(dis);
					
					this.scaleres = readString(dis);
					
					this.tbegin = readString(dis);
					
					this.tend = readString(dis);
					
					this.protocols = readString(dis);
					
					this.links = readString(dis);
					
					this.lineage = readString(dis);
					
					this.data_src = readString(dis);
					
					this.published = readString(dis);
					
					this.sdiurl = readString(dis);
					
					this.distributionFormat = readString(dis);
					
					this.place = readString(dis);
					
					this.useLimitation = readString(dis);
					
					this.browseGraphic = readString(dis);
					
					this.shortName = readString(dis);
					
					this.referenceFlag = readString(dis);
					
					this.wms = readString(dis);
					
					this.idpTopics = readString(dis);
					
					this.restApi = readString(dis);
					
					this.status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.dataset_id,dos);
					
					// String
				
						writeString(this.datestamp,dos);
					
					// String
				
						writeString(this.crs,dos);
					
					// String
				
						writeString(this.title,dos);
					
					// String
				
						writeString(this.edition,dos);
					
					// String
				
						writeString(this.abstracts,dos);
					
					// String
				
						writeString(this.custodian,dos);
					
					// String
				
						writeString(this.inspire_themes,dos);
					
					// String
				
						writeString(this.gemet_concepts,dos);
					
					// Float
				
						if(this.wlon == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.wlon);
		            	}
					
					// Float
				
						if(this.elon == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.elon);
		            	}
					
					// Float
				
						if(this.slat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.slat);
		            	}
					
					// Float
				
						if(this.nlat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.nlat);
		            	}
					
					// String
				
						writeString(this.stype,dos);
					
					// String
				
						writeString(this.scaleres,dos);
					
					// String
				
						writeString(this.tbegin,dos);
					
					// String
				
						writeString(this.tend,dos);
					
					// String
				
						writeString(this.protocols,dos);
					
					// String
				
						writeString(this.links,dos);
					
					// String
				
						writeString(this.lineage,dos);
					
					// String
				
						writeString(this.data_src,dos);
					
					// String
				
						writeString(this.published,dos);
					
					// String
				
						writeString(this.sdiurl,dos);
					
					// String
				
						writeString(this.distributionFormat,dos);
					
					// String
				
						writeString(this.place,dos);
					
					// String
				
						writeString(this.useLimitation,dos);
					
					// String
				
						writeString(this.browseGraphic,dos);
					
					// String
				
						writeString(this.shortName,dos);
					
					// String
				
						writeString(this.referenceFlag,dos);
					
					// String
				
						writeString(this.wms,dos);
					
					// String
				
						writeString(this.idpTopics,dos);
					
					// String
				
						writeString(this.restApi,dos);
					
					// String
				
						writeString(this.status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",dataset_id="+dataset_id);
		sb.append(",datestamp="+datestamp);
		sb.append(",crs="+crs);
		sb.append(",title="+title);
		sb.append(",edition="+edition);
		sb.append(",abstracts="+abstracts);
		sb.append(",custodian="+custodian);
		sb.append(",inspire_themes="+inspire_themes);
		sb.append(",gemet_concepts="+gemet_concepts);
		sb.append(",wlon="+String.valueOf(wlon));
		sb.append(",elon="+String.valueOf(elon));
		sb.append(",slat="+String.valueOf(slat));
		sb.append(",nlat="+String.valueOf(nlat));
		sb.append(",stype="+stype);
		sb.append(",scaleres="+scaleres);
		sb.append(",tbegin="+tbegin);
		sb.append(",tend="+tend);
		sb.append(",protocols="+protocols);
		sb.append(",links="+links);
		sb.append(",lineage="+lineage);
		sb.append(",data_src="+data_src);
		sb.append(",published="+published);
		sb.append(",sdiurl="+sdiurl);
		sb.append(",distributionFormat="+distributionFormat);
		sb.append(",place="+place);
		sb.append(",useLimitation="+useLimitation);
		sb.append(",browseGraphic="+browseGraphic);
		sb.append(",shortName="+shortName);
		sb.append(",referenceFlag="+referenceFlag);
		sb.append(",wms="+wms);
		sb.append(",idpTopics="+idpTopics);
		sb.append(",restApi="+restApi);
		sb.append(",status="+status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class mapStruct implements routines.system.IPersistableRow<mapStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String dataset_id;

				public String getDataset_id () {
					return this.dataset_id;
				}
				
			    public String datestamp;

				public String getDatestamp () {
					return this.datestamp;
				}
				
			    public String crs;

				public String getCrs () {
					return this.crs;
				}
				
			    public String title;

				public String getTitle () {
					return this.title;
				}
				
			    public String edition;

				public String getEdition () {
					return this.edition;
				}
				
			    public String abstracts;

				public String getAbstracts () {
					return this.abstracts;
				}
				
			    public String custodian;

				public String getCustodian () {
					return this.custodian;
				}
				
			    public String inspire_themes;

				public String getInspire_themes () {
					return this.inspire_themes;
				}
				
			    public String gemet_concepts;

				public String getGemet_concepts () {
					return this.gemet_concepts;
				}
				
			    public Float wlon;

				public Float getWlon () {
					return this.wlon;
				}
				
			    public Float elon;

				public Float getElon () {
					return this.elon;
				}
				
			    public Float slat;

				public Float getSlat () {
					return this.slat;
				}
				
			    public Float nlat;

				public Float getNlat () {
					return this.nlat;
				}
				
			    public String stype;

				public String getStype () {
					return this.stype;
				}
				
			    public String scaleres;

				public String getScaleres () {
					return this.scaleres;
				}
				
			    public String tbegin;

				public String getTbegin () {
					return this.tbegin;
				}
				
			    public String tend;

				public String getTend () {
					return this.tend;
				}
				
			    public String protocols;

				public String getProtocols () {
					return this.protocols;
				}
				
			    public String links;

				public String getLinks () {
					return this.links;
				}
				
			    public String lineage;

				public String getLineage () {
					return this.lineage;
				}
				
			    public String data_src;

				public String getData_src () {
					return this.data_src;
				}
				
			    public String published;

				public String getPublished () {
					return this.published;
				}
				
			    public String sdiurl;

				public String getSdiurl () {
					return this.sdiurl;
				}
				
			    public String distributionFormat;

				public String getDistributionFormat () {
					return this.distributionFormat;
				}
				
			    public String place;

				public String getPlace () {
					return this.place;
				}
				
			    public String useLimitation;

				public String getUseLimitation () {
					return this.useLimitation;
				}
				
			    public String browseGraphic;

				public String getBrowseGraphic () {
					return this.browseGraphic;
				}
				
			    public String shortName;

				public String getShortName () {
					return this.shortName;
				}
				
			    public String referenceFlag;

				public String getReferenceFlag () {
					return this.referenceFlag;
				}
				
			    public String wms;

				public String getWms () {
					return this.wms;
				}
				
			    public String idpTopics;

				public String getIdpTopics () {
					return this.idpTopics;
				}
				
			    public String restApi;

				public String getRestApi () {
					return this.restApi;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.dataset_id = readString(dis);
					
					this.datestamp = readString(dis);
					
					this.crs = readString(dis);
					
					this.title = readString(dis);
					
					this.edition = readString(dis);
					
					this.abstracts = readString(dis);
					
					this.custodian = readString(dis);
					
					this.inspire_themes = readString(dis);
					
					this.gemet_concepts = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.wlon = null;
           				} else {
           			    	this.wlon = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.elon = null;
           				} else {
           			    	this.elon = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.slat = null;
           				} else {
           			    	this.slat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nlat = null;
           				} else {
           			    	this.nlat = dis.readFloat();
           				}
					
					this.stype = readString(dis);
					
					this.scaleres = readString(dis);
					
					this.tbegin = readString(dis);
					
					this.tend = readString(dis);
					
					this.protocols = readString(dis);
					
					this.links = readString(dis);
					
					this.lineage = readString(dis);
					
					this.data_src = readString(dis);
					
					this.published = readString(dis);
					
					this.sdiurl = readString(dis);
					
					this.distributionFormat = readString(dis);
					
					this.place = readString(dis);
					
					this.useLimitation = readString(dis);
					
					this.browseGraphic = readString(dis);
					
					this.shortName = readString(dis);
					
					this.referenceFlag = readString(dis);
					
					this.wms = readString(dis);
					
					this.idpTopics = readString(dis);
					
					this.restApi = readString(dis);
					
					this.status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.dataset_id,dos);
					
					// String
				
						writeString(this.datestamp,dos);
					
					// String
				
						writeString(this.crs,dos);
					
					// String
				
						writeString(this.title,dos);
					
					// String
				
						writeString(this.edition,dos);
					
					// String
				
						writeString(this.abstracts,dos);
					
					// String
				
						writeString(this.custodian,dos);
					
					// String
				
						writeString(this.inspire_themes,dos);
					
					// String
				
						writeString(this.gemet_concepts,dos);
					
					// Float
				
						if(this.wlon == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.wlon);
		            	}
					
					// Float
				
						if(this.elon == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.elon);
		            	}
					
					// Float
				
						if(this.slat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.slat);
		            	}
					
					// Float
				
						if(this.nlat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.nlat);
		            	}
					
					// String
				
						writeString(this.stype,dos);
					
					// String
				
						writeString(this.scaleres,dos);
					
					// String
				
						writeString(this.tbegin,dos);
					
					// String
				
						writeString(this.tend,dos);
					
					// String
				
						writeString(this.protocols,dos);
					
					// String
				
						writeString(this.links,dos);
					
					// String
				
						writeString(this.lineage,dos);
					
					// String
				
						writeString(this.data_src,dos);
					
					// String
				
						writeString(this.published,dos);
					
					// String
				
						writeString(this.sdiurl,dos);
					
					// String
				
						writeString(this.distributionFormat,dos);
					
					// String
				
						writeString(this.place,dos);
					
					// String
				
						writeString(this.useLimitation,dos);
					
					// String
				
						writeString(this.browseGraphic,dos);
					
					// String
				
						writeString(this.shortName,dos);
					
					// String
				
						writeString(this.referenceFlag,dos);
					
					// String
				
						writeString(this.wms,dos);
					
					// String
				
						writeString(this.idpTopics,dos);
					
					// String
				
						writeString(this.restApi,dos);
					
					// String
				
						writeString(this.status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",dataset_id="+dataset_id);
		sb.append(",datestamp="+datestamp);
		sb.append(",crs="+crs);
		sb.append(",title="+title);
		sb.append(",edition="+edition);
		sb.append(",abstracts="+abstracts);
		sb.append(",custodian="+custodian);
		sb.append(",inspire_themes="+inspire_themes);
		sb.append(",gemet_concepts="+gemet_concepts);
		sb.append(",wlon="+String.valueOf(wlon));
		sb.append(",elon="+String.valueOf(elon));
		sb.append(",slat="+String.valueOf(slat));
		sb.append(",nlat="+String.valueOf(nlat));
		sb.append(",stype="+stype);
		sb.append(",scaleres="+scaleres);
		sb.append(",tbegin="+tbegin);
		sb.append(",tend="+tend);
		sb.append(",protocols="+protocols);
		sb.append(",links="+links);
		sb.append(",lineage="+lineage);
		sb.append(",data_src="+data_src);
		sb.append(",published="+published);
		sb.append(",sdiurl="+sdiurl);
		sb.append(",distributionFormat="+distributionFormat);
		sb.append(",place="+place);
		sb.append(",useLimitation="+useLimitation);
		sb.append(",browseGraphic="+browseGraphic);
		sb.append(",shortName="+shortName);
		sb.append(",referenceFlag="+referenceFlag);
		sb.append(",wms="+wms);
		sb.append(",idpTopics="+idpTopics);
		sb.append(",restApi="+restApi);
		sb.append(",status="+status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(mapStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String dataset_id;

				public String getDataset_id () {
					return this.dataset_id;
				}
				
			    public String datestamp;

				public String getDatestamp () {
					return this.datestamp;
				}
				
			    public String crs;

				public String getCrs () {
					return this.crs;
				}
				
			    public String title;

				public String getTitle () {
					return this.title;
				}
				
			    public String edition;

				public String getEdition () {
					return this.edition;
				}
				
			    public String abstracts;

				public String getAbstracts () {
					return this.abstracts;
				}
				
			    public String custodian;

				public String getCustodian () {
					return this.custodian;
				}
				
			    public String browseGraphic;

				public String getBrowseGraphic () {
					return this.browseGraphic;
				}
				
			    public String places;

				public String getPlaces () {
					return this.places;
				}
				
			    public Float wlon;

				public Float getWlon () {
					return this.wlon;
				}
				
			    public Float elon;

				public Float getElon () {
					return this.elon;
				}
				
			    public Float slat;

				public Float getSlat () {
					return this.slat;
				}
				
			    public Float nlat;

				public Float getNlat () {
					return this.nlat;
				}
				
			    public String stype;

				public String getStype () {
					return this.stype;
				}
				
			    public String scaleres;

				public String getScaleres () {
					return this.scaleres;
				}
				
			    public String scaleres2;

				public String getScaleres2 () {
					return this.scaleres2;
				}
				
			    public String scaleres3;

				public String getScaleres3 () {
					return this.scaleres3;
				}
				
			    public String tbegin;

				public String getTbegin () {
					return this.tbegin;
				}
				
			    public String tbegin2;

				public String getTbegin2 () {
					return this.tbegin2;
				}
				
			    public String tend;

				public String getTend () {
					return this.tend;
				}
				
			    public String tend2;

				public String getTend2 () {
					return this.tend2;
				}
				
			    public String lineage;

				public String getLineage () {
					return this.lineage;
				}
				
			    public String data_src;

				public String getData_src () {
					return this.data_src;
				}
				
			    public String publication;

				public String getPublication () {
					return this.publication;
				}
				
			    public String url;

				public String getUrl () {
					return this.url;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.dataset_id = readString(dis);
					
					this.datestamp = readString(dis);
					
					this.crs = readString(dis);
					
					this.title = readString(dis);
					
					this.edition = readString(dis);
					
					this.abstracts = readString(dis);
					
					this.custodian = readString(dis);
					
					this.browseGraphic = readString(dis);
					
					this.places = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.wlon = null;
           				} else {
           			    	this.wlon = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.elon = null;
           				} else {
           			    	this.elon = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.slat = null;
           				} else {
           			    	this.slat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nlat = null;
           				} else {
           			    	this.nlat = dis.readFloat();
           				}
					
					this.stype = readString(dis);
					
					this.scaleres = readString(dis);
					
					this.scaleres2 = readString(dis);
					
					this.scaleres3 = readString(dis);
					
					this.tbegin = readString(dis);
					
					this.tbegin2 = readString(dis);
					
					this.tend = readString(dis);
					
					this.tend2 = readString(dis);
					
					this.lineage = readString(dis);
					
					this.data_src = readString(dis);
					
					this.publication = readString(dis);
					
					this.url = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.dataset_id,dos);
					
					// String
				
						writeString(this.datestamp,dos);
					
					// String
				
						writeString(this.crs,dos);
					
					// String
				
						writeString(this.title,dos);
					
					// String
				
						writeString(this.edition,dos);
					
					// String
				
						writeString(this.abstracts,dos);
					
					// String
				
						writeString(this.custodian,dos);
					
					// String
				
						writeString(this.browseGraphic,dos);
					
					// String
				
						writeString(this.places,dos);
					
					// Float
				
						if(this.wlon == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.wlon);
		            	}
					
					// Float
				
						if(this.elon == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.elon);
		            	}
					
					// Float
				
						if(this.slat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.slat);
		            	}
					
					// Float
				
						if(this.nlat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.nlat);
		            	}
					
					// String
				
						writeString(this.stype,dos);
					
					// String
				
						writeString(this.scaleres,dos);
					
					// String
				
						writeString(this.scaleres2,dos);
					
					// String
				
						writeString(this.scaleres3,dos);
					
					// String
				
						writeString(this.tbegin,dos);
					
					// String
				
						writeString(this.tbegin2,dos);
					
					// String
				
						writeString(this.tend,dos);
					
					// String
				
						writeString(this.tend2,dos);
					
					// String
				
						writeString(this.lineage,dos);
					
					// String
				
						writeString(this.data_src,dos);
					
					// String
				
						writeString(this.publication,dos);
					
					// String
				
						writeString(this.url,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",dataset_id="+dataset_id);
		sb.append(",datestamp="+datestamp);
		sb.append(",crs="+crs);
		sb.append(",title="+title);
		sb.append(",edition="+edition);
		sb.append(",abstracts="+abstracts);
		sb.append(",custodian="+custodian);
		sb.append(",browseGraphic="+browseGraphic);
		sb.append(",places="+places);
		sb.append(",wlon="+String.valueOf(wlon));
		sb.append(",elon="+String.valueOf(elon));
		sb.append(",slat="+String.valueOf(slat));
		sb.append(",nlat="+String.valueOf(nlat));
		sb.append(",stype="+stype);
		sb.append(",scaleres="+scaleres);
		sb.append(",scaleres2="+scaleres2);
		sb.append(",scaleres3="+scaleres3);
		sb.append(",tbegin="+tbegin);
		sb.append(",tbegin2="+tbegin2);
		sb.append(",tend="+tend);
		sb.append(",tend2="+tend2);
		sb.append(",lineage="+lineage);
		sb.append(",data_src="+data_src);
		sb.append(",publication="+publication);
		sb.append(",url="+url);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputXML_5Struct implements routines.system.IPersistableRow<after_tFileInputXML_5Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String dataset_id;

				public String getDataset_id () {
					return this.dataset_id;
				}
				
			    public String datestamp;

				public String getDatestamp () {
					return this.datestamp;
				}
				
			    public String crs;

				public String getCrs () {
					return this.crs;
				}
				
			    public String title;

				public String getTitle () {
					return this.title;
				}
				
			    public String edition;

				public String getEdition () {
					return this.edition;
				}
				
			    public String abstracts;

				public String getAbstracts () {
					return this.abstracts;
				}
				
			    public String custodian;

				public String getCustodian () {
					return this.custodian;
				}
				
			    public String browseGraphic;

				public String getBrowseGraphic () {
					return this.browseGraphic;
				}
				
			    public String places;

				public String getPlaces () {
					return this.places;
				}
				
			    public Float wlon;

				public Float getWlon () {
					return this.wlon;
				}
				
			    public Float elon;

				public Float getElon () {
					return this.elon;
				}
				
			    public Float slat;

				public Float getSlat () {
					return this.slat;
				}
				
			    public Float nlat;

				public Float getNlat () {
					return this.nlat;
				}
				
			    public String stype;

				public String getStype () {
					return this.stype;
				}
				
			    public String scaleres;

				public String getScaleres () {
					return this.scaleres;
				}
				
			    public String scaleres2;

				public String getScaleres2 () {
					return this.scaleres2;
				}
				
			    public String scaleres3;

				public String getScaleres3 () {
					return this.scaleres3;
				}
				
			    public String tbegin;

				public String getTbegin () {
					return this.tbegin;
				}
				
			    public String tbegin2;

				public String getTbegin2 () {
					return this.tbegin2;
				}
				
			    public String tend;

				public String getTend () {
					return this.tend;
				}
				
			    public String tend2;

				public String getTend2 () {
					return this.tend2;
				}
				
			    public String lineage;

				public String getLineage () {
					return this.lineage;
				}
				
			    public String data_src;

				public String getData_src () {
					return this.data_src;
				}
				
			    public String publication;

				public String getPublication () {
					return this.publication;
				}
				
			    public String url;

				public String getUrl () {
					return this.url;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.dataset_id = readString(dis);
					
					this.datestamp = readString(dis);
					
					this.crs = readString(dis);
					
					this.title = readString(dis);
					
					this.edition = readString(dis);
					
					this.abstracts = readString(dis);
					
					this.custodian = readString(dis);
					
					this.browseGraphic = readString(dis);
					
					this.places = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.wlon = null;
           				} else {
           			    	this.wlon = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.elon = null;
           				} else {
           			    	this.elon = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.slat = null;
           				} else {
           			    	this.slat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nlat = null;
           				} else {
           			    	this.nlat = dis.readFloat();
           				}
					
					this.stype = readString(dis);
					
					this.scaleres = readString(dis);
					
					this.scaleres2 = readString(dis);
					
					this.scaleres3 = readString(dis);
					
					this.tbegin = readString(dis);
					
					this.tbegin2 = readString(dis);
					
					this.tend = readString(dis);
					
					this.tend2 = readString(dis);
					
					this.lineage = readString(dis);
					
					this.data_src = readString(dis);
					
					this.publication = readString(dis);
					
					this.url = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.dataset_id,dos);
					
					// String
				
						writeString(this.datestamp,dos);
					
					// String
				
						writeString(this.crs,dos);
					
					// String
				
						writeString(this.title,dos);
					
					// String
				
						writeString(this.edition,dos);
					
					// String
				
						writeString(this.abstracts,dos);
					
					// String
				
						writeString(this.custodian,dos);
					
					// String
				
						writeString(this.browseGraphic,dos);
					
					// String
				
						writeString(this.places,dos);
					
					// Float
				
						if(this.wlon == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.wlon);
		            	}
					
					// Float
				
						if(this.elon == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.elon);
		            	}
					
					// Float
				
						if(this.slat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.slat);
		            	}
					
					// Float
				
						if(this.nlat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.nlat);
		            	}
					
					// String
				
						writeString(this.stype,dos);
					
					// String
				
						writeString(this.scaleres,dos);
					
					// String
				
						writeString(this.scaleres2,dos);
					
					// String
				
						writeString(this.scaleres3,dos);
					
					// String
				
						writeString(this.tbegin,dos);
					
					// String
				
						writeString(this.tbegin2,dos);
					
					// String
				
						writeString(this.tend,dos);
					
					// String
				
						writeString(this.tend2,dos);
					
					// String
				
						writeString(this.lineage,dos);
					
					// String
				
						writeString(this.data_src,dos);
					
					// String
				
						writeString(this.publication,dos);
					
					// String
				
						writeString(this.url,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",dataset_id="+dataset_id);
		sb.append(",datestamp="+datestamp);
		sb.append(",crs="+crs);
		sb.append(",title="+title);
		sb.append(",edition="+edition);
		sb.append(",abstracts="+abstracts);
		sb.append(",custodian="+custodian);
		sb.append(",browseGraphic="+browseGraphic);
		sb.append(",places="+places);
		sb.append(",wlon="+String.valueOf(wlon));
		sb.append(",elon="+String.valueOf(elon));
		sb.append(",slat="+String.valueOf(slat));
		sb.append(",nlat="+String.valueOf(nlat));
		sb.append(",stype="+stype);
		sb.append(",scaleres="+scaleres);
		sb.append(",scaleres2="+scaleres2);
		sb.append(",scaleres3="+scaleres3);
		sb.append(",tbegin="+tbegin);
		sb.append(",tbegin2="+tbegin2);
		sb.append(",tend="+tend);
		sb.append(",tend2="+tend2);
		sb.append(",lineage="+lineage);
		sb.append(",data_src="+data_src);
		sb.append(",publication="+publication);
		sb.append(",url="+url);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputXML_5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputXML_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputXML_8Process(globalMap);
		tFileInputXML_2Process(globalMap);
		tFileInputXML_15Process(globalMap);
		tFileInputXML_13Process(globalMap);
		tFileInputXML_3Process(globalMap);
		tFileInputXML_4Process(globalMap);
		tFileInputXML_6Process(globalMap);
		tFileInputXML_7Process(globalMap);
		tFileInputXML_9Process(globalMap);
		tFileInputXML_12Process(globalMap);
		tFileInputXML_11Process(globalMap);
		tFileInputXML_10Process(globalMap);
		tFileInputXML_1Process(globalMap);

		row2Struct row2 = new row2Struct();
mapStruct map = new mapStruct();
row31Struct row31 = new row31Struct();






	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row31" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(System.getProperty("java.io.tmpdir") + "/sdiDump/tmp/out.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
                String[] headColutFileOutputDelimited_1=new String[34];
            class CSVBasicSet_tFileOutputDelimited_1{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_1[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_1 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator(";");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_1[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_1 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_1[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_1[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_1 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 =0;
            int currentRow_tFileOutputDelimited_1 = 0;


            CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
            csvSettings_tFileOutputDelimited_1.setFieldSeparator(";");
            csvSettings_tFileOutputDelimited_1.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_1.setEscapeAndTextEnclosure("\"","\"");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;

                            CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true), "UTF-8")));
                            CsvWritertFileOutputDelimited_1.setSeparator(csvSettings_tFileOutputDelimited_1.getFieldDelim());
                    if(!csvSettings_tFileOutputDelimited_1.isUseCRLFRecordDelimiter() && csvSettings_tFileOutputDelimited_1.getRowDelim()!='\r' && csvSettings_tFileOutputDelimited_1.getRowDelim()!='\n') {
                        CsvWritertFileOutputDelimited_1.setLineEnd(""+csvSettings_tFileOutputDelimited_1.getRowDelim());
                    }
                        if(filetFileOutputDelimited_1.length()==0){
                                    headColutFileOutputDelimited_1[0]="uuid";
                                    headColutFileOutputDelimited_1[1]="dataset_id";
                                    headColutFileOutputDelimited_1[2]="datestamp";
                                    headColutFileOutputDelimited_1[3]="crs";
                                    headColutFileOutputDelimited_1[4]="title";
                                    headColutFileOutputDelimited_1[5]="edition";
                                    headColutFileOutputDelimited_1[6]="abstracts";
                                    headColutFileOutputDelimited_1[7]="custodian";
                                    headColutFileOutputDelimited_1[8]="inspire_themes";
                                    headColutFileOutputDelimited_1[9]="gemet_concepts";
                                    headColutFileOutputDelimited_1[10]="wlon";
                                    headColutFileOutputDelimited_1[11]="elon";
                                    headColutFileOutputDelimited_1[12]="slat";
                                    headColutFileOutputDelimited_1[13]="nlat";
                                    headColutFileOutputDelimited_1[14]="stype";
                                    headColutFileOutputDelimited_1[15]="scaleres";
                                    headColutFileOutputDelimited_1[16]="tbegin";
                                    headColutFileOutputDelimited_1[17]="tend";
                                    headColutFileOutputDelimited_1[18]="protocols";
                                    headColutFileOutputDelimited_1[19]="links";
                                    headColutFileOutputDelimited_1[20]="lineage";
                                    headColutFileOutputDelimited_1[21]="data_src";
                                    headColutFileOutputDelimited_1[22]="published";
                                    headColutFileOutputDelimited_1[23]="sdiurl";
                                    headColutFileOutputDelimited_1[24]="distributionFormat";
                                    headColutFileOutputDelimited_1[25]="place";
                                    headColutFileOutputDelimited_1[26]="useLimitation";
                                    headColutFileOutputDelimited_1[27]="browseGraphic";
                                    headColutFileOutputDelimited_1[28]="shortName";
                                    headColutFileOutputDelimited_1[29]="referenceFlag";
                                    headColutFileOutputDelimited_1[30]="wms";
                                    headColutFileOutputDelimited_1[31]="idpTopics";
                                    headColutFileOutputDelimited_1[32]="restApi";
                                    headColutFileOutputDelimited_1[33]="status";
                            CsvWritertFileOutputDelimited_1.writeNext(headColutFileOutputDelimited_1);
                            CsvWritertFileOutputDelimited_1.flush();
                        }
                CsvWritertFileOutputDelimited_1.setEscapeChar(csvSettings_tFileOutputDelimited_1.getEscapeChar());
                CsvWritertFileOutputDelimited_1.setQuoteChar(csvSettings_tFileOutputDelimited_1.getTextEnclosure());
                CsvWritertFileOutputDelimited_1.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_1", CsvWritertFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tReplace_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplace_1", false);
		start_Hash.put("tReplace_1", System.currentTimeMillis());
		
	
	currentComponent="tReplace_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("map" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tReplace_1 = 0;
		


int nb_line_tReplace_1 = 0;
 



/**
 * [tReplace_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
					globalMap.get( "tHash_Lookup_row6" ))
					;					
					
	

row6Struct row6HashKey = new row6Struct();
row6Struct row6Default = new row6Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
					globalMap.get( "tHash_Lookup_row8" ))
					;					
					
	

row8Struct row8HashKey = new row8Struct();
row8Struct row8Default = new row8Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
					globalMap.get( "tHash_Lookup_row13" ))
					;					
					
	

row13Struct row13HashKey = new row13Struct();
row13Struct row13Default = new row13Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) 
					globalMap.get( "tHash_Lookup_row15" ))
					;					
					
	

row15Struct row15HashKey = new row15Struct();
row15Struct row15Default = new row15Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) 
					globalMap.get( "tHash_Lookup_row19" ))
					;					
					
	

row19Struct row19HashKey = new row19Struct();
row19Struct row19Default = new row19Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) 
					globalMap.get( "tHash_Lookup_row22" ))
					;					
					
	

row22Struct row22HashKey = new row22Struct();
row22Struct row22Default = new row22Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct> tHash_Lookup_row23 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct>) 
					globalMap.get( "tHash_Lookup_row23" ))
					;					
					
	

row23Struct row23HashKey = new row23Struct();
row23Struct row23Default = new row23Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct> tHash_Lookup_row27 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct>) 
					globalMap.get( "tHash_Lookup_row27" ))
					;					
					
	

row27Struct row27HashKey = new row27Struct();
row27Struct row27Default = new row27Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct> tHash_Lookup_row34 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct>) 
					globalMap.get( "tHash_Lookup_row34" ))
					;					
					
	

row34Struct row34HashKey = new row34Struct();
row34Struct row34Default = new row34Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct> tHash_Lookup_row40 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct>) 
					globalMap.get( "tHash_Lookup_row40" ))
					;					
					
	

row40Struct row40HashKey = new row40Struct();
row40Struct row40Default = new row40Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row44Struct> tHash_Lookup_row44 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row44Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row44Struct>) 
					globalMap.get( "tHash_Lookup_row44" ))
					;					
					
	

row44Struct row44HashKey = new row44Struct();
row44Struct row44Default = new row44Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row45Struct> tHash_Lookup_row45 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row45Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row45Struct>) 
					globalMap.get( "tHash_Lookup_row45" ))
					;					
					
	

row45Struct row45HashKey = new row45Struct();
row45Struct row45Default = new row45Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<statusStruct> tHash_Lookup_status = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<statusStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<statusStruct>) 
					globalMap.get( "tHash_Lookup_status" ))
					;					
					
	

statusStruct statusHashKey = new statusStruct();
statusStruct statusDefault = new statusStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
mapStruct map_tmp = new mapStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tFileInputXML_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_5", false);
		start_Hash.put("tFileInputXML_5", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_5";

	
		int tos_count_tFileInputXML_5 = 0;
		

	

int nb_line_tFileInputXML_5 = 0;

	String os_tFileInputXML_5 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_5=false;
	if(os_tFileInputXML_5.indexOf("windows") > -1 || os_tFileInputXML_5.indexOf("nt") > -1){
		isWindows_tFileInputXML_5=true;
	}
class NameSpaceTool_tFileInputXML_5 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_5{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_5 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_5 = null;
try {
	filename_tFileInputXML_5 = System.getProperty("java.io.tmpdir") + "/sdiDump/tmp/out.xml";
} catch(java.lang.Exception e) {
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_5 != null && filename_tFileInputXML_5 instanceof String && filename_tFileInputXML_5.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_5){
		filename_tFileInputXML_5 = filename_tFileInputXML_5.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_5 = true;
org.dom4j.Document doc_tFileInputXML_5 = null;
java.io.Closeable toClose_tFileInputXML_5 = null;
try{
	if(filename_tFileInputXML_5 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_5 = (java.io.InputStream)filename_tFileInputXML_5;
		toClose_tFileInputXML_5 = inputStream_tFileInputXML_5;
		doc_tFileInputXML_5 = reader_tFileInputXML_5.read(inputStream_tFileInputXML_5);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_5 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_5)),"UTF-8");
		toClose_tFileInputXML_5 = unicodeReader_tFileInputXML_5;
		org.xml.sax.InputSource in_tFileInputXML_5= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_5);
		doc_tFileInputXML_5 = reader_tFileInputXML_5.read(in_tFileInputXML_5);
	}
}catch(java.lang.Exception e){
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_5 = false;
} finally {
	if(toClose_tFileInputXML_5!=null) {
		toClose_tFileInputXML_5.close();
	}
}
if(isValidFile_tFileInputXML_5){
NameSpaceTool_tFileInputXML_5 nsTool_tFileInputXML_5 = new NameSpaceTool_tFileInputXML_5();
nsTool_tFileInputXML_5.countNSMap(doc_tFileInputXML_5.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_5 = nsTool_tFileInputXML_5.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_5 = doc_tFileInputXML_5.createXPath(nsTool_tFileInputXML_5.addDefaultNSPrefix("/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata"));  
x_tFileInputXML_5.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_5); 

java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_5 = (java.util.List<org.dom4j.tree.AbstractNode>)x_tFileInputXML_5.selectNodes(doc_tFileInputXML_5);	
XML_API_tFileInputXML_5 xml_api_tFileInputXML_5 = new XML_API_tFileInputXML_5();
String str_tFileInputXML_5 = "";
org.dom4j.Node node_tFileInputXML_5 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_5=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_5{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_5 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("gmd:fileIdentifier/gco:CharacterString","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:identifier/gmd:RS_Identifier/gmd:code/gco:CharacterString","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata"));
	xpath_1.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(1,xpath_1);
			
	org.dom4j.XPath xpath_2 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("gmd:dateStamp/gco:DateTime","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata"));
	xpath_2.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(2,xpath_2);
			
	org.dom4j.XPath xpath_3 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("gmd:referenceSystemInfo/gmd:MD_ReferenceSystem/gmd:referenceSystemIdentifier/gmd:RS_Identifier/gmd:code/gco:CharacterString","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata"));
	xpath_3.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(3,xpath_3);
			
	org.dom4j.XPath xpath_4 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:title/gco:CharacterString","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata"));
	xpath_4.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(4,xpath_4);
			
	org.dom4j.XPath xpath_5 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:edition/gco:CharacterString","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata"));
	xpath_5.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(5,xpath_5);
			
	org.dom4j.XPath xpath_6 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("gmd:identificationInfo/gmd:MD_DataIdentification/gmd:abstract/gco:CharacterString","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata"));
	xpath_6.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(6,xpath_6);
			
	org.dom4j.XPath xpath_7 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("gmd:identificationInfo/gmd:MD_DataIdentification/gmd:pointOfContact/gmd:CI_ResponsibleParty/gmd:role/gmd:CI_RoleCode[@codeListValue=\"custodian\"]/../../gmd:organisationName/gco:CharacterString","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata"));
	xpath_7.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(7,xpath_7);
			
	org.dom4j.XPath xpath_8 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("gmd:identificationInfo/gmd:MD_DataIdentification/gmd:graphicOverview/gmd:MD_BrowseGraphic/gmd:fileName/gco:CharacterString","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata"));
	xpath_8.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(8,xpath_8);
			
	org.dom4j.XPath xpath_9 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:type/gmd:MD_KeywordTypeCode[@codeListValue='place']/../../gmd:keyword/gco:CharacterString","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata"));
	xpath_9.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(9,xpath_9);
			
	org.dom4j.XPath xpath_10 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:geographicElement/gmd:EX_GeographicBoundingBox/gmd:westBoundLongitude/gco:Decimal","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata"));
	xpath_10.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(10,xpath_10);
			
	org.dom4j.XPath xpath_11 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:geographicElement/gmd:EX_GeographicBoundingBox/gmd:eastBoundLongitude/gco:Decimal","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata"));
	xpath_11.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(11,xpath_11);
			
	org.dom4j.XPath xpath_12 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:geographicElement/gmd:EX_GeographicBoundingBox/gmd:southBoundLatitude/gco:Decimal","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata"));
	xpath_12.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(12,xpath_12);
			
	org.dom4j.XPath xpath_13 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:geographicElement/gmd:EX_GeographicBoundingBox/gmd:northBoundLatitude/gco:Decimal","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata"));
	xpath_13.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(13,xpath_13);
			
	org.dom4j.XPath xpath_14 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("gmd:identificationInfo/gmd:MD_DataIdentification/gmd:spatialRepresentationType/gmd:MD_SpatialRepresentationTypeCode/@codeListValue","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata"));
	xpath_14.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(14,xpath_14);
			
	org.dom4j.XPath xpath_15 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("gmd:identificationInfo/gmd:MD_DataIdentification/gmd:spatialResolution/gmd:MD_Resolution/gmd:equivalentScale/gmd:MD_RepresentativeFraction/gmd:denominator/gco:Integer","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata"));
	xpath_15.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(15,xpath_15);
			
	org.dom4j.XPath xpath_16 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("gmd:identificationInfo/gmd:MD_DataIdentification/gmd:spatialResolution[1]/gmd:MD_Resolution/gmd:distance/gco:Distance","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata"));
	xpath_16.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(16,xpath_16);
			
	org.dom4j.XPath xpath_17 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("gmd:identificationInfo/gmd:MD_DataIdentification/gmd:spatialResolution[1]/gmd:MD_Resolution/gmd:distance/gco:Distance/@uom","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata"));
	xpath_17.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(17,xpath_17);
			
	org.dom4j.XPath xpath_18 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:temporalElement/gmd:EX_TemporalExtent/gmd:extent/gml:TimePeriod/gml:beginPosition","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata"));
	xpath_18.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(18,xpath_18);
			
	org.dom4j.XPath xpath_19 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:temporalElement/gmd:EX_TemporalExtent/gmd:extent/gml:TimePeriod/gml:begin/gml:TimeInstant/gml:timePosition","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata"));
	xpath_19.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(19,xpath_19);
			
	org.dom4j.XPath xpath_20 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:temporalElement/gmd:EX_TemporalExtent/gmd:extent/gml:TimePeriod/gml:endPosition","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata"));
	xpath_20.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(20,xpath_20);
			
	org.dom4j.XPath xpath_21 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("gmd:identificationInfo/gmd:MD_DataIdentification/gmd:extent/gmd:EX_Extent/gmd:temporalElement/gmd:EX_TemporalExtent/gmd:extent/gml:TimePeriod/gml:end/gml:TimeInstant/gml:timePosition","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata"));
	xpath_21.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(21,xpath_21);
			
	org.dom4j.XPath xpath_22 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("gmd:dataQualityInfo/gmd:DQ_DataQuality/gmd:lineage/gmd:LI_Lineage/gmd:statement/gco:CharacterString","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata"));
	xpath_22.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(22,xpath_22);
			
	org.dom4j.XPath xpath_23 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("gmd:dataQualityInfo/gmd:DQ_DataQuality/gmd:lineage/gmd:LI_Lineage/gmd:source/@uuidref","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata"));
	xpath_23.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(23,xpath_23);
			
	org.dom4j.XPath xpath_24 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("gmd:identificationInfo/gmd:MD_DataIdentification/gmd:citation/gmd:CI_Citation/gmd:date/gmd:CI_Date/gmd:dateType/gmd:CI_DateTypeCode/@codeListValue","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata"));
	xpath_24.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(24,xpath_24);
			
	org.dom4j.XPath xpath_25 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("gmd:distributionInfo/gmd:MD_Distribution/gmd:transferOptions/gmd:MD_DigitalTransferOptions/gmd:onLine/gmd:CI_OnlineResource/gmd:protocol[gco:CharacterString=\"WWW:LINK-1.0-http--link\"]/../gmd:linkage/gmd:URL","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata"));
	xpath_25.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(25,xpath_25);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_5 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_5 xPathUtil_tFileInputXML_5 = new XPathUtil_tFileInputXML_5();
	xPathUtil_tFileInputXML_5.initXPaths(xpaths_tFileInputXML_5, nsTool_tFileInputXML_5, xmlNameSpaceMap_tFileInputXML_5);
for (org.dom4j.tree.AbstractNode temp_tFileInputXML_5: nodeList_tFileInputXML_5) {
		nb_line_tFileInputXML_5++;
		
	row2 = null;			
	boolean whetherReject_tFileInputXML_5 = false;
	row2 = new row2Struct();
	try{
    Object obj0_tFileInputXML_5 = xpaths_tFileInputXML_5.get(0).evaluate(temp_tFileInputXML_5);
    if(obj0_tFileInputXML_5 == null) {
    	node_tFileInputXML_5 = null;
    	str_tFileInputXML_5 = "";
    	
    } else if(obj0_tFileInputXML_5 instanceof org.dom4j.Node) {
    	node_tFileInputXML_5 = (org.dom4j.Node)obj0_tFileInputXML_5;
    	str_tFileInputXML_5 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj0_tFileInputXML_5 instanceof String || obj0_tFileInputXML_5 instanceof Number){
    	node_tFileInputXML_5 = temp_tFileInputXML_5;
    	str_tFileInputXML_5 = String.valueOf(obj0_tFileInputXML_5);
    } else if(obj0_tFileInputXML_5 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_5 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_5;
    	node_tFileInputXML_5 = nodes_tFileInputXML_5.size()>0 ? nodes_tFileInputXML_5.get(0) : null;
    	str_tFileInputXML_5 = node_tFileInputXML_5==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_5.isDefNull(node_tFileInputXML_5)){
											row2.uuid =null;
									}else if(xml_api_tFileInputXML_5.isEmpty(node_tFileInputXML_5)){
										row2.uuid ="";
									}else if(xml_api_tFileInputXML_5.isMissing(node_tFileInputXML_5 )){ 
										row2.uuid =null;
									}else{
		row2.uuid = str_tFileInputXML_5;
	}
    Object obj1_tFileInputXML_5 = xpaths_tFileInputXML_5.get(1).evaluate(temp_tFileInputXML_5);
    if(obj1_tFileInputXML_5 == null) {
    	node_tFileInputXML_5 = null;
    	str_tFileInputXML_5 = "";
    	
    } else if(obj1_tFileInputXML_5 instanceof org.dom4j.Node) {
    	node_tFileInputXML_5 = (org.dom4j.Node)obj1_tFileInputXML_5;
    	str_tFileInputXML_5 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj1_tFileInputXML_5 instanceof String || obj1_tFileInputXML_5 instanceof Number){
    	node_tFileInputXML_5 = temp_tFileInputXML_5;
    	str_tFileInputXML_5 = String.valueOf(obj1_tFileInputXML_5);
    } else if(obj1_tFileInputXML_5 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_5 = (java.util.List<org.dom4j.Node>)obj1_tFileInputXML_5;
    	node_tFileInputXML_5 = nodes_tFileInputXML_5.size()>0 ? nodes_tFileInputXML_5.get(0) : null;
    	str_tFileInputXML_5 = node_tFileInputXML_5==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_5.isDefNull(node_tFileInputXML_5)){
											row2.dataset_id =null;
									}else if(xml_api_tFileInputXML_5.isEmpty(node_tFileInputXML_5)){
										row2.dataset_id ="";
									}else if(xml_api_tFileInputXML_5.isMissing(node_tFileInputXML_5 )){ 
										row2.dataset_id =null;
									}else{
		row2.dataset_id = str_tFileInputXML_5;
	}
    Object obj2_tFileInputXML_5 = xpaths_tFileInputXML_5.get(2).evaluate(temp_tFileInputXML_5);
    if(obj2_tFileInputXML_5 == null) {
    	node_tFileInputXML_5 = null;
    	str_tFileInputXML_5 = "";
    	
    } else if(obj2_tFileInputXML_5 instanceof org.dom4j.Node) {
    	node_tFileInputXML_5 = (org.dom4j.Node)obj2_tFileInputXML_5;
    	str_tFileInputXML_5 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj2_tFileInputXML_5 instanceof String || obj2_tFileInputXML_5 instanceof Number){
    	node_tFileInputXML_5 = temp_tFileInputXML_5;
    	str_tFileInputXML_5 = String.valueOf(obj2_tFileInputXML_5);
    } else if(obj2_tFileInputXML_5 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_5 = (java.util.List<org.dom4j.Node>)obj2_tFileInputXML_5;
    	node_tFileInputXML_5 = nodes_tFileInputXML_5.size()>0 ? nodes_tFileInputXML_5.get(0) : null;
    	str_tFileInputXML_5 = node_tFileInputXML_5==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_5.isDefNull(node_tFileInputXML_5)){
											row2.datestamp =null;
									}else if(xml_api_tFileInputXML_5.isEmpty(node_tFileInputXML_5)){
										row2.datestamp ="";
									}else if(xml_api_tFileInputXML_5.isMissing(node_tFileInputXML_5 )){ 
										row2.datestamp =null;
									}else{
		row2.datestamp = str_tFileInputXML_5;
	}
    Object obj3_tFileInputXML_5 = xpaths_tFileInputXML_5.get(3).evaluate(temp_tFileInputXML_5);
    if(obj3_tFileInputXML_5 == null) {
    	node_tFileInputXML_5 = null;
    	str_tFileInputXML_5 = "";
    	
    } else if(obj3_tFileInputXML_5 instanceof org.dom4j.Node) {
    	node_tFileInputXML_5 = (org.dom4j.Node)obj3_tFileInputXML_5;
    	str_tFileInputXML_5 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj3_tFileInputXML_5 instanceof String || obj3_tFileInputXML_5 instanceof Number){
    	node_tFileInputXML_5 = temp_tFileInputXML_5;
    	str_tFileInputXML_5 = String.valueOf(obj3_tFileInputXML_5);
    } else if(obj3_tFileInputXML_5 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_5 = (java.util.List<org.dom4j.Node>)obj3_tFileInputXML_5;
    	node_tFileInputXML_5 = nodes_tFileInputXML_5.size()>0 ? nodes_tFileInputXML_5.get(0) : null;
    	str_tFileInputXML_5 = node_tFileInputXML_5==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_5.isDefNull(node_tFileInputXML_5)){
											row2.crs =null;
									}else if(xml_api_tFileInputXML_5.isEmpty(node_tFileInputXML_5)){
										row2.crs ="";
									}else if(xml_api_tFileInputXML_5.isMissing(node_tFileInputXML_5 )){ 
										row2.crs =null;
									}else{
		row2.crs = str_tFileInputXML_5;
	}
    Object obj4_tFileInputXML_5 = xpaths_tFileInputXML_5.get(4).evaluate(temp_tFileInputXML_5);
    if(obj4_tFileInputXML_5 == null) {
    	node_tFileInputXML_5 = null;
    	str_tFileInputXML_5 = "";
    	
    } else if(obj4_tFileInputXML_5 instanceof org.dom4j.Node) {
    	node_tFileInputXML_5 = (org.dom4j.Node)obj4_tFileInputXML_5;
    	str_tFileInputXML_5 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj4_tFileInputXML_5 instanceof String || obj4_tFileInputXML_5 instanceof Number){
    	node_tFileInputXML_5 = temp_tFileInputXML_5;
    	str_tFileInputXML_5 = String.valueOf(obj4_tFileInputXML_5);
    } else if(obj4_tFileInputXML_5 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_5 = (java.util.List<org.dom4j.Node>)obj4_tFileInputXML_5;
    	node_tFileInputXML_5 = nodes_tFileInputXML_5.size()>0 ? nodes_tFileInputXML_5.get(0) : null;
    	str_tFileInputXML_5 = node_tFileInputXML_5==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_5.isDefNull(node_tFileInputXML_5)){
											row2.title =null;
									}else if(xml_api_tFileInputXML_5.isEmpty(node_tFileInputXML_5)){
										row2.title ="";
									}else if(xml_api_tFileInputXML_5.isMissing(node_tFileInputXML_5 )){ 
										row2.title =null;
									}else{
		row2.title = str_tFileInputXML_5;
	}
    Object obj5_tFileInputXML_5 = xpaths_tFileInputXML_5.get(5).evaluate(temp_tFileInputXML_5);
    if(obj5_tFileInputXML_5 == null) {
    	node_tFileInputXML_5 = null;
    	str_tFileInputXML_5 = "";
    	
    } else if(obj5_tFileInputXML_5 instanceof org.dom4j.Node) {
    	node_tFileInputXML_5 = (org.dom4j.Node)obj5_tFileInputXML_5;
    	str_tFileInputXML_5 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj5_tFileInputXML_5 instanceof String || obj5_tFileInputXML_5 instanceof Number){
    	node_tFileInputXML_5 = temp_tFileInputXML_5;
    	str_tFileInputXML_5 = String.valueOf(obj5_tFileInputXML_5);
    } else if(obj5_tFileInputXML_5 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_5 = (java.util.List<org.dom4j.Node>)obj5_tFileInputXML_5;
    	node_tFileInputXML_5 = nodes_tFileInputXML_5.size()>0 ? nodes_tFileInputXML_5.get(0) : null;
    	str_tFileInputXML_5 = node_tFileInputXML_5==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_5.isDefNull(node_tFileInputXML_5)){
											row2.edition =null;
									}else if(xml_api_tFileInputXML_5.isEmpty(node_tFileInputXML_5)){
										row2.edition ="";
									}else if(xml_api_tFileInputXML_5.isMissing(node_tFileInputXML_5 )){ 
										row2.edition =null;
									}else{
		row2.edition = str_tFileInputXML_5;
	}
    Object obj6_tFileInputXML_5 = xpaths_tFileInputXML_5.get(6).evaluate(temp_tFileInputXML_5);
    if(obj6_tFileInputXML_5 == null) {
    	node_tFileInputXML_5 = null;
    	str_tFileInputXML_5 = "";
    	
    } else if(obj6_tFileInputXML_5 instanceof org.dom4j.Node) {
    	node_tFileInputXML_5 = (org.dom4j.Node)obj6_tFileInputXML_5;
    	str_tFileInputXML_5 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj6_tFileInputXML_5 instanceof String || obj6_tFileInputXML_5 instanceof Number){
    	node_tFileInputXML_5 = temp_tFileInputXML_5;
    	str_tFileInputXML_5 = String.valueOf(obj6_tFileInputXML_5);
    } else if(obj6_tFileInputXML_5 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_5 = (java.util.List<org.dom4j.Node>)obj6_tFileInputXML_5;
    	node_tFileInputXML_5 = nodes_tFileInputXML_5.size()>0 ? nodes_tFileInputXML_5.get(0) : null;
    	str_tFileInputXML_5 = node_tFileInputXML_5==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_5.isDefNull(node_tFileInputXML_5)){
											row2.abstracts =null;
									}else if(xml_api_tFileInputXML_5.isEmpty(node_tFileInputXML_5)){
										row2.abstracts ="";
									}else if(xml_api_tFileInputXML_5.isMissing(node_tFileInputXML_5 )){ 
										row2.abstracts =null;
									}else{
		row2.abstracts = str_tFileInputXML_5;
	}
    Object obj7_tFileInputXML_5 = xpaths_tFileInputXML_5.get(7).evaluate(temp_tFileInputXML_5);
    if(obj7_tFileInputXML_5 == null) {
    	node_tFileInputXML_5 = null;
    	str_tFileInputXML_5 = "";
    	
    } else if(obj7_tFileInputXML_5 instanceof org.dom4j.Node) {
    	node_tFileInputXML_5 = (org.dom4j.Node)obj7_tFileInputXML_5;
    	str_tFileInputXML_5 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj7_tFileInputXML_5 instanceof String || obj7_tFileInputXML_5 instanceof Number){
    	node_tFileInputXML_5 = temp_tFileInputXML_5;
    	str_tFileInputXML_5 = String.valueOf(obj7_tFileInputXML_5);
    } else if(obj7_tFileInputXML_5 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_5 = (java.util.List<org.dom4j.Node>)obj7_tFileInputXML_5;
    	node_tFileInputXML_5 = nodes_tFileInputXML_5.size()>0 ? nodes_tFileInputXML_5.get(0) : null;
    	str_tFileInputXML_5 = node_tFileInputXML_5==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_5.isDefNull(node_tFileInputXML_5)){
											row2.custodian =null;
									}else if(xml_api_tFileInputXML_5.isEmpty(node_tFileInputXML_5)){
										row2.custodian ="";
									}else if(xml_api_tFileInputXML_5.isMissing(node_tFileInputXML_5 )){ 
										row2.custodian =null;
									}else{
		row2.custodian = str_tFileInputXML_5;
	}
    Object obj8_tFileInputXML_5 = xpaths_tFileInputXML_5.get(8).evaluate(temp_tFileInputXML_5);
    if(obj8_tFileInputXML_5 == null) {
    	node_tFileInputXML_5 = null;
    	str_tFileInputXML_5 = "";
    	
    } else if(obj8_tFileInputXML_5 instanceof org.dom4j.Node) {
    	node_tFileInputXML_5 = (org.dom4j.Node)obj8_tFileInputXML_5;
    	str_tFileInputXML_5 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj8_tFileInputXML_5 instanceof String || obj8_tFileInputXML_5 instanceof Number){
    	node_tFileInputXML_5 = temp_tFileInputXML_5;
    	str_tFileInputXML_5 = String.valueOf(obj8_tFileInputXML_5);
    } else if(obj8_tFileInputXML_5 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_5 = (java.util.List<org.dom4j.Node>)obj8_tFileInputXML_5;
    	node_tFileInputXML_5 = nodes_tFileInputXML_5.size()>0 ? nodes_tFileInputXML_5.get(0) : null;
    	str_tFileInputXML_5 = node_tFileInputXML_5==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_5.isDefNull(node_tFileInputXML_5)){
											row2.browseGraphic =null;
									}else if(xml_api_tFileInputXML_5.isEmpty(node_tFileInputXML_5)){
										row2.browseGraphic ="";
									}else if(xml_api_tFileInputXML_5.isMissing(node_tFileInputXML_5 )){ 
										row2.browseGraphic =null;
									}else{
		row2.browseGraphic = str_tFileInputXML_5;
	}
    Object obj9_tFileInputXML_5 = xpaths_tFileInputXML_5.get(9).evaluate(temp_tFileInputXML_5);
    if(obj9_tFileInputXML_5 == null) {
    	node_tFileInputXML_5 = null;
    	str_tFileInputXML_5 = "";
    	
    } else if(obj9_tFileInputXML_5 instanceof org.dom4j.Node) {
    	node_tFileInputXML_5 = (org.dom4j.Node)obj9_tFileInputXML_5;
    	str_tFileInputXML_5 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj9_tFileInputXML_5 instanceof String || obj9_tFileInputXML_5 instanceof Number){
    	node_tFileInputXML_5 = temp_tFileInputXML_5;
    	str_tFileInputXML_5 = String.valueOf(obj9_tFileInputXML_5);
    } else if(obj9_tFileInputXML_5 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_5 = (java.util.List<org.dom4j.Node>)obj9_tFileInputXML_5;
    	node_tFileInputXML_5 = nodes_tFileInputXML_5.size()>0 ? nodes_tFileInputXML_5.get(0) : null;
    	str_tFileInputXML_5 = node_tFileInputXML_5==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_5.isDefNull(node_tFileInputXML_5)){
											row2.places =null;
									}else if(xml_api_tFileInputXML_5.isEmpty(node_tFileInputXML_5)){
										row2.places ="";
									}else if(xml_api_tFileInputXML_5.isMissing(node_tFileInputXML_5 )){ 
										row2.places =null;
									}else{
		row2.places = str_tFileInputXML_5;
	}
    Object obj10_tFileInputXML_5 = xpaths_tFileInputXML_5.get(10).evaluate(temp_tFileInputXML_5);
    if(obj10_tFileInputXML_5 == null) {
    	node_tFileInputXML_5 = null;
    	str_tFileInputXML_5 = "";
    	
    } else if(obj10_tFileInputXML_5 instanceof org.dom4j.Node) {
    	node_tFileInputXML_5 = (org.dom4j.Node)obj10_tFileInputXML_5;
    	str_tFileInputXML_5 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj10_tFileInputXML_5 instanceof String || obj10_tFileInputXML_5 instanceof Number){
    	node_tFileInputXML_5 = temp_tFileInputXML_5;
    	str_tFileInputXML_5 = String.valueOf(obj10_tFileInputXML_5);
    } else if(obj10_tFileInputXML_5 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_5 = (java.util.List<org.dom4j.Node>)obj10_tFileInputXML_5;
    	node_tFileInputXML_5 = nodes_tFileInputXML_5.size()>0 ? nodes_tFileInputXML_5.get(0) : null;
    	str_tFileInputXML_5 = node_tFileInputXML_5==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}	
										if(xml_api_tFileInputXML_5.isDefNull(node_tFileInputXML_5)){
											row2.wlon =null;
										}else if(xml_api_tFileInputXML_5.isEmpty(node_tFileInputXML_5) || xml_api_tFileInputXML_5.isMissing(node_tFileInputXML_5)){
											row2.wlon=null;
										}else{
		row2.wlon = ParserUtils.parseTo_Float(str_tFileInputXML_5);
	}
    Object obj11_tFileInputXML_5 = xpaths_tFileInputXML_5.get(11).evaluate(temp_tFileInputXML_5);
    if(obj11_tFileInputXML_5 == null) {
    	node_tFileInputXML_5 = null;
    	str_tFileInputXML_5 = "";
    	
    } else if(obj11_tFileInputXML_5 instanceof org.dom4j.Node) {
    	node_tFileInputXML_5 = (org.dom4j.Node)obj11_tFileInputXML_5;
    	str_tFileInputXML_5 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj11_tFileInputXML_5 instanceof String || obj11_tFileInputXML_5 instanceof Number){
    	node_tFileInputXML_5 = temp_tFileInputXML_5;
    	str_tFileInputXML_5 = String.valueOf(obj11_tFileInputXML_5);
    } else if(obj11_tFileInputXML_5 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_5 = (java.util.List<org.dom4j.Node>)obj11_tFileInputXML_5;
    	node_tFileInputXML_5 = nodes_tFileInputXML_5.size()>0 ? nodes_tFileInputXML_5.get(0) : null;
    	str_tFileInputXML_5 = node_tFileInputXML_5==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}	
										if(xml_api_tFileInputXML_5.isDefNull(node_tFileInputXML_5)){
											row2.elon =null;
										}else if(xml_api_tFileInputXML_5.isEmpty(node_tFileInputXML_5) || xml_api_tFileInputXML_5.isMissing(node_tFileInputXML_5)){
											row2.elon=null;
										}else{
		row2.elon = ParserUtils.parseTo_Float(str_tFileInputXML_5);
	}
    Object obj12_tFileInputXML_5 = xpaths_tFileInputXML_5.get(12).evaluate(temp_tFileInputXML_5);
    if(obj12_tFileInputXML_5 == null) {
    	node_tFileInputXML_5 = null;
    	str_tFileInputXML_5 = "";
    	
    } else if(obj12_tFileInputXML_5 instanceof org.dom4j.Node) {
    	node_tFileInputXML_5 = (org.dom4j.Node)obj12_tFileInputXML_5;
    	str_tFileInputXML_5 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj12_tFileInputXML_5 instanceof String || obj12_tFileInputXML_5 instanceof Number){
    	node_tFileInputXML_5 = temp_tFileInputXML_5;
    	str_tFileInputXML_5 = String.valueOf(obj12_tFileInputXML_5);
    } else if(obj12_tFileInputXML_5 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_5 = (java.util.List<org.dom4j.Node>)obj12_tFileInputXML_5;
    	node_tFileInputXML_5 = nodes_tFileInputXML_5.size()>0 ? nodes_tFileInputXML_5.get(0) : null;
    	str_tFileInputXML_5 = node_tFileInputXML_5==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}	
										if(xml_api_tFileInputXML_5.isDefNull(node_tFileInputXML_5)){
											row2.slat =null;
										}else if(xml_api_tFileInputXML_5.isEmpty(node_tFileInputXML_5) || xml_api_tFileInputXML_5.isMissing(node_tFileInputXML_5)){
											row2.slat=null;
										}else{
		row2.slat = ParserUtils.parseTo_Float(str_tFileInputXML_5);
	}
    Object obj13_tFileInputXML_5 = xpaths_tFileInputXML_5.get(13).evaluate(temp_tFileInputXML_5);
    if(obj13_tFileInputXML_5 == null) {
    	node_tFileInputXML_5 = null;
    	str_tFileInputXML_5 = "";
    	
    } else if(obj13_tFileInputXML_5 instanceof org.dom4j.Node) {
    	node_tFileInputXML_5 = (org.dom4j.Node)obj13_tFileInputXML_5;
    	str_tFileInputXML_5 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj13_tFileInputXML_5 instanceof String || obj13_tFileInputXML_5 instanceof Number){
    	node_tFileInputXML_5 = temp_tFileInputXML_5;
    	str_tFileInputXML_5 = String.valueOf(obj13_tFileInputXML_5);
    } else if(obj13_tFileInputXML_5 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_5 = (java.util.List<org.dom4j.Node>)obj13_tFileInputXML_5;
    	node_tFileInputXML_5 = nodes_tFileInputXML_5.size()>0 ? nodes_tFileInputXML_5.get(0) : null;
    	str_tFileInputXML_5 = node_tFileInputXML_5==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}	
										if(xml_api_tFileInputXML_5.isDefNull(node_tFileInputXML_5)){
											row2.nlat =null;
										}else if(xml_api_tFileInputXML_5.isEmpty(node_tFileInputXML_5) || xml_api_tFileInputXML_5.isMissing(node_tFileInputXML_5)){
											row2.nlat=null;
										}else{
		row2.nlat = ParserUtils.parseTo_Float(str_tFileInputXML_5);
	}
    Object obj14_tFileInputXML_5 = xpaths_tFileInputXML_5.get(14).evaluate(temp_tFileInputXML_5);
    if(obj14_tFileInputXML_5 == null) {
    	node_tFileInputXML_5 = null;
    	str_tFileInputXML_5 = "";
    	
    } else if(obj14_tFileInputXML_5 instanceof org.dom4j.Node) {
    	node_tFileInputXML_5 = (org.dom4j.Node)obj14_tFileInputXML_5;
    	str_tFileInputXML_5 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj14_tFileInputXML_5 instanceof String || obj14_tFileInputXML_5 instanceof Number){
    	node_tFileInputXML_5 = temp_tFileInputXML_5;
    	str_tFileInputXML_5 = String.valueOf(obj14_tFileInputXML_5);
    } else if(obj14_tFileInputXML_5 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_5 = (java.util.List<org.dom4j.Node>)obj14_tFileInputXML_5;
    	node_tFileInputXML_5 = nodes_tFileInputXML_5.size()>0 ? nodes_tFileInputXML_5.get(0) : null;
    	str_tFileInputXML_5 = node_tFileInputXML_5==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_5.isDefNull(node_tFileInputXML_5)){
											row2.stype =null;
									}else if(xml_api_tFileInputXML_5.isEmpty(node_tFileInputXML_5)){
										row2.stype ="";
									}else if(xml_api_tFileInputXML_5.isMissing(node_tFileInputXML_5 )){ 
										row2.stype =null;
									}else{
		row2.stype = str_tFileInputXML_5;
	}
    Object obj15_tFileInputXML_5 = xpaths_tFileInputXML_5.get(15).evaluate(temp_tFileInputXML_5);
    if(obj15_tFileInputXML_5 == null) {
    	node_tFileInputXML_5 = null;
    	str_tFileInputXML_5 = "";
    	
    } else if(obj15_tFileInputXML_5 instanceof org.dom4j.Node) {
    	node_tFileInputXML_5 = (org.dom4j.Node)obj15_tFileInputXML_5;
    	str_tFileInputXML_5 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj15_tFileInputXML_5 instanceof String || obj15_tFileInputXML_5 instanceof Number){
    	node_tFileInputXML_5 = temp_tFileInputXML_5;
    	str_tFileInputXML_5 = String.valueOf(obj15_tFileInputXML_5);
    } else if(obj15_tFileInputXML_5 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_5 = (java.util.List<org.dom4j.Node>)obj15_tFileInputXML_5;
    	node_tFileInputXML_5 = nodes_tFileInputXML_5.size()>0 ? nodes_tFileInputXML_5.get(0) : null;
    	str_tFileInputXML_5 = node_tFileInputXML_5==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_5.isDefNull(node_tFileInputXML_5)){
											row2.scaleres =null;
									}else if(xml_api_tFileInputXML_5.isEmpty(node_tFileInputXML_5)){
										row2.scaleres ="";
									}else if(xml_api_tFileInputXML_5.isMissing(node_tFileInputXML_5 )){ 
										row2.scaleres =null;
									}else{
		row2.scaleres = str_tFileInputXML_5;
	}
    Object obj16_tFileInputXML_5 = xpaths_tFileInputXML_5.get(16).evaluate(temp_tFileInputXML_5);
    if(obj16_tFileInputXML_5 == null) {
    	node_tFileInputXML_5 = null;
    	str_tFileInputXML_5 = "";
    	
    } else if(obj16_tFileInputXML_5 instanceof org.dom4j.Node) {
    	node_tFileInputXML_5 = (org.dom4j.Node)obj16_tFileInputXML_5;
    	str_tFileInputXML_5 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj16_tFileInputXML_5 instanceof String || obj16_tFileInputXML_5 instanceof Number){
    	node_tFileInputXML_5 = temp_tFileInputXML_5;
    	str_tFileInputXML_5 = String.valueOf(obj16_tFileInputXML_5);
    } else if(obj16_tFileInputXML_5 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_5 = (java.util.List<org.dom4j.Node>)obj16_tFileInputXML_5;
    	node_tFileInputXML_5 = nodes_tFileInputXML_5.size()>0 ? nodes_tFileInputXML_5.get(0) : null;
    	str_tFileInputXML_5 = node_tFileInputXML_5==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_5.isDefNull(node_tFileInputXML_5)){
											row2.scaleres2 =null;
									}else if(xml_api_tFileInputXML_5.isEmpty(node_tFileInputXML_5)){
										row2.scaleres2 ="";
									}else if(xml_api_tFileInputXML_5.isMissing(node_tFileInputXML_5 )){ 
										row2.scaleres2 =null;
									}else{
		row2.scaleres2 = str_tFileInputXML_5;
	}
    Object obj17_tFileInputXML_5 = xpaths_tFileInputXML_5.get(17).evaluate(temp_tFileInputXML_5);
    if(obj17_tFileInputXML_5 == null) {
    	node_tFileInputXML_5 = null;
    	str_tFileInputXML_5 = "";
    	
    } else if(obj17_tFileInputXML_5 instanceof org.dom4j.Node) {
    	node_tFileInputXML_5 = (org.dom4j.Node)obj17_tFileInputXML_5;
    	str_tFileInputXML_5 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj17_tFileInputXML_5 instanceof String || obj17_tFileInputXML_5 instanceof Number){
    	node_tFileInputXML_5 = temp_tFileInputXML_5;
    	str_tFileInputXML_5 = String.valueOf(obj17_tFileInputXML_5);
    } else if(obj17_tFileInputXML_5 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_5 = (java.util.List<org.dom4j.Node>)obj17_tFileInputXML_5;
    	node_tFileInputXML_5 = nodes_tFileInputXML_5.size()>0 ? nodes_tFileInputXML_5.get(0) : null;
    	str_tFileInputXML_5 = node_tFileInputXML_5==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_5.isDefNull(node_tFileInputXML_5)){
											row2.scaleres3 =null;
									}else if(xml_api_tFileInputXML_5.isEmpty(node_tFileInputXML_5)){
										row2.scaleres3 ="";
									}else if(xml_api_tFileInputXML_5.isMissing(node_tFileInputXML_5 )){ 
										row2.scaleres3 =null;
									}else{
		row2.scaleres3 = str_tFileInputXML_5;
	}
    Object obj18_tFileInputXML_5 = xpaths_tFileInputXML_5.get(18).evaluate(temp_tFileInputXML_5);
    if(obj18_tFileInputXML_5 == null) {
    	node_tFileInputXML_5 = null;
    	str_tFileInputXML_5 = "";
    	
    } else if(obj18_tFileInputXML_5 instanceof org.dom4j.Node) {
    	node_tFileInputXML_5 = (org.dom4j.Node)obj18_tFileInputXML_5;
    	str_tFileInputXML_5 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj18_tFileInputXML_5 instanceof String || obj18_tFileInputXML_5 instanceof Number){
    	node_tFileInputXML_5 = temp_tFileInputXML_5;
    	str_tFileInputXML_5 = String.valueOf(obj18_tFileInputXML_5);
    } else if(obj18_tFileInputXML_5 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_5 = (java.util.List<org.dom4j.Node>)obj18_tFileInputXML_5;
    	node_tFileInputXML_5 = nodes_tFileInputXML_5.size()>0 ? nodes_tFileInputXML_5.get(0) : null;
    	str_tFileInputXML_5 = node_tFileInputXML_5==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_5.isDefNull(node_tFileInputXML_5)){
											row2.tbegin =null;
									}else if(xml_api_tFileInputXML_5.isEmpty(node_tFileInputXML_5)){
										row2.tbegin ="";
									}else if(xml_api_tFileInputXML_5.isMissing(node_tFileInputXML_5 )){ 
										row2.tbegin =null;
									}else{
		row2.tbegin = str_tFileInputXML_5;
	}
    Object obj19_tFileInputXML_5 = xpaths_tFileInputXML_5.get(19).evaluate(temp_tFileInputXML_5);
    if(obj19_tFileInputXML_5 == null) {
    	node_tFileInputXML_5 = null;
    	str_tFileInputXML_5 = "";
    	
    } else if(obj19_tFileInputXML_5 instanceof org.dom4j.Node) {
    	node_tFileInputXML_5 = (org.dom4j.Node)obj19_tFileInputXML_5;
    	str_tFileInputXML_5 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj19_tFileInputXML_5 instanceof String || obj19_tFileInputXML_5 instanceof Number){
    	node_tFileInputXML_5 = temp_tFileInputXML_5;
    	str_tFileInputXML_5 = String.valueOf(obj19_tFileInputXML_5);
    } else if(obj19_tFileInputXML_5 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_5 = (java.util.List<org.dom4j.Node>)obj19_tFileInputXML_5;
    	node_tFileInputXML_5 = nodes_tFileInputXML_5.size()>0 ? nodes_tFileInputXML_5.get(0) : null;
    	str_tFileInputXML_5 = node_tFileInputXML_5==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_5.isDefNull(node_tFileInputXML_5)){
											row2.tbegin2 =null;
									}else if(xml_api_tFileInputXML_5.isEmpty(node_tFileInputXML_5)){
										row2.tbegin2 ="";
									}else if(xml_api_tFileInputXML_5.isMissing(node_tFileInputXML_5 )){ 
										row2.tbegin2 =null;
									}else{
		row2.tbegin2 = str_tFileInputXML_5;
	}
    Object obj20_tFileInputXML_5 = xpaths_tFileInputXML_5.get(20).evaluate(temp_tFileInputXML_5);
    if(obj20_tFileInputXML_5 == null) {
    	node_tFileInputXML_5 = null;
    	str_tFileInputXML_5 = "";
    	
    } else if(obj20_tFileInputXML_5 instanceof org.dom4j.Node) {
    	node_tFileInputXML_5 = (org.dom4j.Node)obj20_tFileInputXML_5;
    	str_tFileInputXML_5 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj20_tFileInputXML_5 instanceof String || obj20_tFileInputXML_5 instanceof Number){
    	node_tFileInputXML_5 = temp_tFileInputXML_5;
    	str_tFileInputXML_5 = String.valueOf(obj20_tFileInputXML_5);
    } else if(obj20_tFileInputXML_5 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_5 = (java.util.List<org.dom4j.Node>)obj20_tFileInputXML_5;
    	node_tFileInputXML_5 = nodes_tFileInputXML_5.size()>0 ? nodes_tFileInputXML_5.get(0) : null;
    	str_tFileInputXML_5 = node_tFileInputXML_5==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_5.isDefNull(node_tFileInputXML_5)){
											row2.tend =null;
									}else if(xml_api_tFileInputXML_5.isEmpty(node_tFileInputXML_5)){
										row2.tend ="";
									}else if(xml_api_tFileInputXML_5.isMissing(node_tFileInputXML_5 )){ 
										row2.tend =null;
									}else{
		row2.tend = str_tFileInputXML_5;
	}
    Object obj21_tFileInputXML_5 = xpaths_tFileInputXML_5.get(21).evaluate(temp_tFileInputXML_5);
    if(obj21_tFileInputXML_5 == null) {
    	node_tFileInputXML_5 = null;
    	str_tFileInputXML_5 = "";
    	
    } else if(obj21_tFileInputXML_5 instanceof org.dom4j.Node) {
    	node_tFileInputXML_5 = (org.dom4j.Node)obj21_tFileInputXML_5;
    	str_tFileInputXML_5 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj21_tFileInputXML_5 instanceof String || obj21_tFileInputXML_5 instanceof Number){
    	node_tFileInputXML_5 = temp_tFileInputXML_5;
    	str_tFileInputXML_5 = String.valueOf(obj21_tFileInputXML_5);
    } else if(obj21_tFileInputXML_5 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_5 = (java.util.List<org.dom4j.Node>)obj21_tFileInputXML_5;
    	node_tFileInputXML_5 = nodes_tFileInputXML_5.size()>0 ? nodes_tFileInputXML_5.get(0) : null;
    	str_tFileInputXML_5 = node_tFileInputXML_5==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_5.isDefNull(node_tFileInputXML_5)){
											row2.tend2 =null;
									}else if(xml_api_tFileInputXML_5.isEmpty(node_tFileInputXML_5)){
										row2.tend2 ="";
									}else if(xml_api_tFileInputXML_5.isMissing(node_tFileInputXML_5 )){ 
										row2.tend2 =null;
									}else{
		row2.tend2 = str_tFileInputXML_5;
	}
    Object obj22_tFileInputXML_5 = xpaths_tFileInputXML_5.get(22).evaluate(temp_tFileInputXML_5);
    if(obj22_tFileInputXML_5 == null) {
    	node_tFileInputXML_5 = null;
    	str_tFileInputXML_5 = "";
    	
    } else if(obj22_tFileInputXML_5 instanceof org.dom4j.Node) {
    	node_tFileInputXML_5 = (org.dom4j.Node)obj22_tFileInputXML_5;
    	str_tFileInputXML_5 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj22_tFileInputXML_5 instanceof String || obj22_tFileInputXML_5 instanceof Number){
    	node_tFileInputXML_5 = temp_tFileInputXML_5;
    	str_tFileInputXML_5 = String.valueOf(obj22_tFileInputXML_5);
    } else if(obj22_tFileInputXML_5 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_5 = (java.util.List<org.dom4j.Node>)obj22_tFileInputXML_5;
    	node_tFileInputXML_5 = nodes_tFileInputXML_5.size()>0 ? nodes_tFileInputXML_5.get(0) : null;
    	str_tFileInputXML_5 = node_tFileInputXML_5==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_5.isDefNull(node_tFileInputXML_5)){
											row2.lineage =null;
									}else if(xml_api_tFileInputXML_5.isEmpty(node_tFileInputXML_5)){
										row2.lineage ="";
									}else if(xml_api_tFileInputXML_5.isMissing(node_tFileInputXML_5 )){ 
										row2.lineage =null;
									}else{
		row2.lineage = str_tFileInputXML_5;
	}
    Object obj23_tFileInputXML_5 = xpaths_tFileInputXML_5.get(23).evaluate(temp_tFileInputXML_5);
    if(obj23_tFileInputXML_5 == null) {
    	node_tFileInputXML_5 = null;
    	str_tFileInputXML_5 = "";
    	
    } else if(obj23_tFileInputXML_5 instanceof org.dom4j.Node) {
    	node_tFileInputXML_5 = (org.dom4j.Node)obj23_tFileInputXML_5;
    	str_tFileInputXML_5 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj23_tFileInputXML_5 instanceof String || obj23_tFileInputXML_5 instanceof Number){
    	node_tFileInputXML_5 = temp_tFileInputXML_5;
    	str_tFileInputXML_5 = String.valueOf(obj23_tFileInputXML_5);
    } else if(obj23_tFileInputXML_5 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_5 = (java.util.List<org.dom4j.Node>)obj23_tFileInputXML_5;
    	node_tFileInputXML_5 = nodes_tFileInputXML_5.size()>0 ? nodes_tFileInputXML_5.get(0) : null;
    	str_tFileInputXML_5 = node_tFileInputXML_5==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_5.isDefNull(node_tFileInputXML_5)){
											row2.data_src =null;
									}else if(xml_api_tFileInputXML_5.isEmpty(node_tFileInputXML_5)){
										row2.data_src ="";
									}else if(xml_api_tFileInputXML_5.isMissing(node_tFileInputXML_5 )){ 
										row2.data_src =null;
									}else{
		row2.data_src = str_tFileInputXML_5;
	}
    Object obj24_tFileInputXML_5 = xpaths_tFileInputXML_5.get(24).evaluate(temp_tFileInputXML_5);
    if(obj24_tFileInputXML_5 == null) {
    	node_tFileInputXML_5 = null;
    	str_tFileInputXML_5 = "";
    	
    } else if(obj24_tFileInputXML_5 instanceof org.dom4j.Node) {
    	node_tFileInputXML_5 = (org.dom4j.Node)obj24_tFileInputXML_5;
    	str_tFileInputXML_5 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj24_tFileInputXML_5 instanceof String || obj24_tFileInputXML_5 instanceof Number){
    	node_tFileInputXML_5 = temp_tFileInputXML_5;
    	str_tFileInputXML_5 = String.valueOf(obj24_tFileInputXML_5);
    } else if(obj24_tFileInputXML_5 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_5 = (java.util.List<org.dom4j.Node>)obj24_tFileInputXML_5;
    	node_tFileInputXML_5 = nodes_tFileInputXML_5.size()>0 ? nodes_tFileInputXML_5.get(0) : null;
    	str_tFileInputXML_5 = node_tFileInputXML_5==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_5.isDefNull(node_tFileInputXML_5)){
											row2.publication =null;
									}else if(xml_api_tFileInputXML_5.isEmpty(node_tFileInputXML_5)){
										row2.publication ="";
									}else if(xml_api_tFileInputXML_5.isMissing(node_tFileInputXML_5 )){ 
										row2.publication =null;
									}else{
		row2.publication = str_tFileInputXML_5;
	}
    Object obj25_tFileInputXML_5 = xpaths_tFileInputXML_5.get(25).evaluate(temp_tFileInputXML_5);
    if(obj25_tFileInputXML_5 == null) {
    	node_tFileInputXML_5 = null;
    	str_tFileInputXML_5 = "";
    	
    } else if(obj25_tFileInputXML_5 instanceof org.dom4j.Node) {
    	node_tFileInputXML_5 = (org.dom4j.Node)obj25_tFileInputXML_5;
    	str_tFileInputXML_5 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj25_tFileInputXML_5 instanceof String || obj25_tFileInputXML_5 instanceof Number){
    	node_tFileInputXML_5 = temp_tFileInputXML_5;
    	str_tFileInputXML_5 = String.valueOf(obj25_tFileInputXML_5);
    } else if(obj25_tFileInputXML_5 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_5 = (java.util.List<org.dom4j.Node>)obj25_tFileInputXML_5;
    	node_tFileInputXML_5 = nodes_tFileInputXML_5.size()>0 ? nodes_tFileInputXML_5.get(0) : null;
    	str_tFileInputXML_5 = node_tFileInputXML_5==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_5,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_5.isDefNull(node_tFileInputXML_5)){
											row2.url =null;
									}else if(xml_api_tFileInputXML_5.isEmpty(node_tFileInputXML_5)){
										row2.url ="";
									}else if(xml_api_tFileInputXML_5.isMissing(node_tFileInputXML_5 )){ 
										row2.url =null;
									}else{
		row2.url = str_tFileInputXML_5;
	} 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_5 = true;
                System.err.println(e.getMessage());
                row2 = null;
    }
			
			

 



/**
 * [tFileInputXML_5 begin ] stop
 */
	
	/**
	 * [tFileInputXML_5 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_5";

	

 


	tos_count_tFileInputXML_5++;

/**
 * [tFileInputXML_5 main ] stop
 */
	
	/**
	 * [tFileInputXML_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_5";

	

 



/**
 * [tFileInputXML_5 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row6" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow6 = false;
       		  	    	
       		  	    	
 							row6Struct row6ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row6HashKey.uuid = row2.uuid ;
                        		    		

								
		                        	row6HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row6.lookup( row6HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row6 != null && tHash_Lookup_row6.getCount(row6HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row6' and it contains more one result from keys :  row6.uuid = '" + row6HashKey.uuid + "'");
								} // G 071
							

							row6Struct row6 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row6Struct fromLookup_row6 = null;
							row6 = row6Default;
										 
							
								 
							
							
								if (tHash_Lookup_row6 !=null && tHash_Lookup_row6.hasNext()) { // G 099
								
							
								
								fromLookup_row6 = tHash_Lookup_row6.next();

							
							
								} // G 099
							
							

							if(fromLookup_row6 != null) {
								row6 = fromLookup_row6;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row8" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow8 = false;
       		  	    	
       		  	    	
 							row8Struct row8ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row8HashKey.uuid = row2.uuid ;
                        		    		

								
		                        	row8HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row8.lookup( row8HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row8 != null && tHash_Lookup_row8.getCount(row8HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row8' and it contains more one result from keys :  row8.uuid = '" + row8HashKey.uuid + "'");
								} // G 071
							

							row8Struct row8 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row8Struct fromLookup_row8 = null;
							row8 = row8Default;
										 
							
								 
							
							
								if (tHash_Lookup_row8 !=null && tHash_Lookup_row8.hasNext()) { // G 099
								
							
								
								fromLookup_row8 = tHash_Lookup_row8.next();

							
							
								} // G 099
							
							

							if(fromLookup_row8 != null) {
								row8 = fromLookup_row8;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row13" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow13 = false;
       		  	    	
       		  	    	
 							row13Struct row13ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row13HashKey.uuid = row2.uuid ;
                        		    		

								
		                        	row13HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row13.lookup( row13HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row13 != null && tHash_Lookup_row13.getCount(row13HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row13' and it contains more one result from keys :  row13.uuid = '" + row13HashKey.uuid + "'");
								} // G 071
							

							row13Struct row13 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row13Struct fromLookup_row13 = null;
							row13 = row13Default;
										 
							
								 
							
							
								if (tHash_Lookup_row13 !=null && tHash_Lookup_row13.hasNext()) { // G 099
								
							
								
								fromLookup_row13 = tHash_Lookup_row13.next();

							
							
								} // G 099
							
							

							if(fromLookup_row13 != null) {
								row13 = fromLookup_row13;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row15" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow15 = false;
       		  	    	
       		  	    	
 							row15Struct row15ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row15HashKey.uuid = row2.uuid ;
                        		    		

								
		                        	row15HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row15.lookup( row15HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row15 != null && tHash_Lookup_row15.getCount(row15HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row15' and it contains more one result from keys :  row15.uuid = '" + row15HashKey.uuid + "'");
								} // G 071
							

							row15Struct row15 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row15Struct fromLookup_row15 = null;
							row15 = row15Default;
										 
							
								 
							
							
								if (tHash_Lookup_row15 !=null && tHash_Lookup_row15.hasNext()) { // G 099
								
							
								
								fromLookup_row15 = tHash_Lookup_row15.next();

							
							
								} // G 099
							
							

							if(fromLookup_row15 != null) {
								row15 = fromLookup_row15;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row19" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow19 = false;
       		  	    	
       		  	    	
 							row19Struct row19ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row19HashKey.uuid = row2.uuid ;
                        		    		

								
		                        	row19HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row19.lookup( row19HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row19 != null && tHash_Lookup_row19.getCount(row19HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row19' and it contains more one result from keys :  row19.uuid = '" + row19HashKey.uuid + "'");
								} // G 071
							

							row19Struct row19 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row19Struct fromLookup_row19 = null;
							row19 = row19Default;
										 
							
								 
							
							
								if (tHash_Lookup_row19 !=null && tHash_Lookup_row19.hasNext()) { // G 099
								
							
								
								fromLookup_row19 = tHash_Lookup_row19.next();

							
							
								} // G 099
							
							

							if(fromLookup_row19 != null) {
								row19 = fromLookup_row19;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row22" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow22 = false;
       		  	    	
       		  	    	
 							row22Struct row22ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row22HashKey.uuid = row2.uuid ;
                        		    		

								
		                        	row22HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row22.lookup( row22HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row22 != null && tHash_Lookup_row22.getCount(row22HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row22' and it contains more one result from keys :  row22.uuid = '" + row22HashKey.uuid + "'");
								} // G 071
							

							row22Struct row22 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row22Struct fromLookup_row22 = null;
							row22 = row22Default;
										 
							
								 
							
							
								if (tHash_Lookup_row22 !=null && tHash_Lookup_row22.hasNext()) { // G 099
								
							
								
								fromLookup_row22 = tHash_Lookup_row22.next();

							
							
								} // G 099
							
							

							if(fromLookup_row22 != null) {
								row22 = fromLookup_row22;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row23" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow23 = false;
       		  	    	
       		  	    	
 							row23Struct row23ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row23HashKey.uuid = row2.uuid ;
                        		    		

								
		                        	row23HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row23.lookup( row23HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row23 != null && tHash_Lookup_row23.getCount(row23HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row23' and it contains more one result from keys :  row23.uuid = '" + row23HashKey.uuid + "'");
								} // G 071
							

							row23Struct row23 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row23Struct fromLookup_row23 = null;
							row23 = row23Default;
										 
							
								 
							
							
								if (tHash_Lookup_row23 !=null && tHash_Lookup_row23.hasNext()) { // G 099
								
							
								
								fromLookup_row23 = tHash_Lookup_row23.next();

							
							
								} // G 099
							
							

							if(fromLookup_row23 != null) {
								row23 = fromLookup_row23;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row27" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow27 = false;
       		  	    	
       		  	    	
 							row27Struct row27ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row27HashKey.uuid = row2.uuid ;
                        		    		

								
		                        	row27HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row27.lookup( row27HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row27 != null && tHash_Lookup_row27.getCount(row27HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row27' and it contains more one result from keys :  row27.uuid = '" + row27HashKey.uuid + "'");
								} // G 071
							

							row27Struct row27 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row27Struct fromLookup_row27 = null;
							row27 = row27Default;
										 
							
								 
							
							
								if (tHash_Lookup_row27 !=null && tHash_Lookup_row27.hasNext()) { // G 099
								
							
								
								fromLookup_row27 = tHash_Lookup_row27.next();

							
							
								} // G 099
							
							

							if(fromLookup_row27 != null) {
								row27 = fromLookup_row27;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row34" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow34 = false;
       		  	    	
       		  	    	
 							row34Struct row34ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row34HashKey.uuid = row2.uuid ;
                        		    		

								
		                        	row34HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row34.lookup( row34HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row34 != null && tHash_Lookup_row34.getCount(row34HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row34' and it contains more one result from keys :  row34.uuid = '" + row34HashKey.uuid + "'");
								} // G 071
							

							row34Struct row34 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row34Struct fromLookup_row34 = null;
							row34 = row34Default;
										 
							
								 
							
							
								if (tHash_Lookup_row34 !=null && tHash_Lookup_row34.hasNext()) { // G 099
								
							
								
								fromLookup_row34 = tHash_Lookup_row34.next();

							
							
								} // G 099
							
							

							if(fromLookup_row34 != null) {
								row34 = fromLookup_row34;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row40" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow40 = false;
       		  	    	
       		  	    	
 							row40Struct row40ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row40HashKey.uuid = row2.uuid ;
                        		    		

								
		                        	row40HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row40.lookup( row40HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row40 != null && tHash_Lookup_row40.getCount(row40HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row40' and it contains more one result from keys :  row40.uuid = '" + row40HashKey.uuid + "'");
								} // G 071
							

							row40Struct row40 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row40Struct fromLookup_row40 = null;
							row40 = row40Default;
										 
							
								 
							
							
								if (tHash_Lookup_row40 !=null && tHash_Lookup_row40.hasNext()) { // G 099
								
							
								
								fromLookup_row40 = tHash_Lookup_row40.next();

							
							
								} // G 099
							
							

							if(fromLookup_row40 != null) {
								row40 = fromLookup_row40;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row44" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow44 = false;
       		  	    	
       		  	    	
 							row44Struct row44ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row44HashKey.uuid = row2.uuid ;
                        		    		

								
		                        	row44HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row44.lookup( row44HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row44 != null && tHash_Lookup_row44.getCount(row44HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row44' and it contains more one result from keys :  row44.uuid = '" + row44HashKey.uuid + "'");
								} // G 071
							

							row44Struct row44 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row44Struct fromLookup_row44 = null;
							row44 = row44Default;
										 
							
								 
							
							
								if (tHash_Lookup_row44 !=null && tHash_Lookup_row44.hasNext()) { // G 099
								
							
								
								fromLookup_row44 = tHash_Lookup_row44.next();

							
							
								} // G 099
							
							

							if(fromLookup_row44 != null) {
								row44 = fromLookup_row44;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row45" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow45 = false;
       		  	    	
       		  	    	
 							row45Struct row45ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row45HashKey.uuid = row2.uuid ;
                        		    		

								
		                        	row45HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row45.lookup( row45HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row45 != null && tHash_Lookup_row45.getCount(row45HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row45' and it contains more one result from keys :  row45.uuid = '" + row45HashKey.uuid + "'");
								} // G 071
							

							row45Struct row45 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row45Struct fromLookup_row45 = null;
							row45 = row45Default;
										 
							
								 
							
							
								if (tHash_Lookup_row45 !=null && tHash_Lookup_row45.hasNext()) { // G 099
								
							
								
								fromLookup_row45 = tHash_Lookup_row45.next();

							
							
								} // G 099
							
							

							if(fromLookup_row45 != null) {
								row45 = fromLookup_row45;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "status" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopstatus = false;
       		  	    	
       		  	    	
 							statusStruct statusObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		statusHashKey.uuid = row2.uuid ;
                        		    		

								
		                        	statusHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_status.lookup( statusHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_status != null && tHash_Lookup_status.getCount(statusHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'status' and it contains more one result from keys :  status.uuid = '" + statusHashKey.uuid + "'");
								} // G 071
							

							statusStruct status = null;
                    		  	 
							   
                    		  	 
	       		  	    	statusStruct fromLookup_status = null;
							status = statusDefault;
										 
							
								 
							
							
								if (tHash_Lookup_status !=null && tHash_Lookup_status.hasNext()) { // G 099
								
							
								
								fromLookup_status = tHash_Lookup_status.next();

							
							
								} // G 099
							
							

							if(fromLookup_status != null) {
								status = fromLookup_status;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

map = null;


// # Output table : 'map'
map_tmp.uuid = row2.uuid;
map_tmp.dataset_id = row2.dataset_id;
map_tmp.datestamp = row2.datestamp;
map_tmp.crs = row2.crs;
map_tmp.title = row2.title;
map_tmp.edition = row2.edition;
map_tmp.abstracts = row2.abstracts;
map_tmp.custodian = row2.custodian;
map_tmp.inspire_themes = row15.keyword ;
map_tmp.gemet_concepts = row19.keyword ;
map_tmp.wlon = row2.wlon;
map_tmp.elon = row2.elon;
map_tmp.slat = row2.slat;
map_tmp.nlat = row2.nlat;
map_tmp.stype = row2.stype;
map_tmp.scaleres = row6.denominator != null ? row6.denominator : row2.scaleres2 != null ? row2.scaleres2 + row2.scaleres3.substring(row2.scaleres3.indexOf("#") + 1) : "" ;
map_tmp.tbegin = row2.tbegin  == "" ? row2.tbegin2 : row2.tbegin ;
map_tmp.tend = row2.tend  == "" ? row2.tend2 : row2.tend ;
map_tmp.protocols = row13.protocols;
map_tmp.links = row13.links;
map_tmp.lineage = row2.lineage;
map_tmp.data_src = row2.data_src ;
map_tmp.published = row2.publication.equals("publication") ? "TRUE" : "FALSE" ;
map_tmp.sdiurl = row2.url == "" ? "No URL provided (published version different than referenced version?)" : row2.url ;
map_tmp.distributionFormat = row8.distributionFormat ;
map_tmp.place = row22.keyword ;
map_tmp.useLimitation = row23.useLimitation;
map_tmp.browseGraphic = row2.browseGraphic ;
map_tmp.shortName = row45.keyword ;
map_tmp.referenceFlag = row27.keyword ;
map_tmp.wms = row34.url ;
map_tmp.idpTopics = row40.keyword ;
map_tmp.restApi = row44.url ;
map_tmp.status = status.status ;
map = map_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "map"
if(map != null) { 



	
	/**
	 * [tReplace_1 main ] start
	 */

	

	
	
	currentComponent="tReplace_1";

	

			//map
			//map


			
				if(execStat){
					runStat.updateStatOnConnection("map"+iterateId,1, 1);
				} 
			

		

						String searchStr_tReplace_1_1 = "https" + "";
							map.sdiurl = StringUtils.replaceAllStrictly(map.sdiurl, searchStr_tReplace_1_1, "http" + "", false, false);
						String searchStr_tReplace_1_2 = "https" + "";
							map.wms = StringUtils.replaceAllStrictly(map.wms, searchStr_tReplace_1_2, "http" + "", false, false);
	        row31.uuid = map.uuid;
	        
	        row31.dataset_id = map.dataset_id;
	        
	        row31.datestamp = map.datestamp;
	        
	        row31.crs = map.crs;
	        
	        row31.title = map.title;
	        
	        row31.edition = map.edition;
	        
	        row31.abstracts = map.abstracts;
	        
	        row31.custodian = map.custodian;
	        
	        row31.inspire_themes = map.inspire_themes;
	        
	        row31.gemet_concepts = map.gemet_concepts;
	        
	        row31.wlon = map.wlon;
	        
	        row31.elon = map.elon;
	        
	        row31.slat = map.slat;
	        
	        row31.nlat = map.nlat;
	        
	        row31.stype = map.stype;
	        
	        row31.scaleres = map.scaleres;
	        
	        row31.tbegin = map.tbegin;
	        
	        row31.tend = map.tend;
	        
	        row31.protocols = map.protocols;
	        
	        row31.links = map.links;
	        
	        row31.lineage = map.lineage;
	        
	        row31.data_src = map.data_src;
	        
	        row31.published = map.published;
	        
	        row31.sdiurl = map.sdiurl;
	        
	        row31.distributionFormat = map.distributionFormat;
	        
	        row31.place = map.place;
	        
	        row31.useLimitation = map.useLimitation;
	        
	        row31.browseGraphic = map.browseGraphic;
	        
	        row31.shortName = map.shortName;
	        
	        row31.referenceFlag = map.referenceFlag;
	        
	        row31.wms = map.wms;
	        
	        row31.idpTopics = map.idpTopics;
	        
	        row31.restApi = map.restApi;
	        
	        row31.status = map.status;
	        
    nb_line_tReplace_1++;

 


	tos_count_tReplace_1++;

/**
 * [tReplace_1 main ] stop
 */
	
	/**
	 * [tReplace_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tReplace_1";

	

 



/**
 * [tReplace_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

			//row31
			//row31


			
				if(execStat){
					runStat.updateStatOnConnection("row31"+iterateId,1, 1);
				} 
			

		


                        String[] rowtFileOutputDelimited_1=new String[34];
                            rowtFileOutputDelimited_1[0]=row31.uuid == null ? null : row31.uuid;
                            rowtFileOutputDelimited_1[1]=row31.dataset_id == null ? null : row31.dataset_id;
                            rowtFileOutputDelimited_1[2]=row31.datestamp == null ? null : row31.datestamp;
                            rowtFileOutputDelimited_1[3]=row31.crs == null ? null : row31.crs;
                            rowtFileOutputDelimited_1[4]=row31.title == null ? null : row31.title;
                            rowtFileOutputDelimited_1[5]=row31.edition == null ? null : row31.edition;
                            rowtFileOutputDelimited_1[6]=row31.abstracts == null ? null : row31.abstracts;
                            rowtFileOutputDelimited_1[7]=row31.custodian == null ? null : row31.custodian;
                            rowtFileOutputDelimited_1[8]=row31.inspire_themes == null ? null : row31.inspire_themes;
                            rowtFileOutputDelimited_1[9]=row31.gemet_concepts == null ? null : row31.gemet_concepts;
                            rowtFileOutputDelimited_1[10]=row31.wlon == null ? null : String.valueOf(row31.wlon);
                            rowtFileOutputDelimited_1[11]=row31.elon == null ? null : String.valueOf(row31.elon);
                            rowtFileOutputDelimited_1[12]=row31.slat == null ? null : String.valueOf(row31.slat);
                            rowtFileOutputDelimited_1[13]=row31.nlat == null ? null : String.valueOf(row31.nlat);
                            rowtFileOutputDelimited_1[14]=row31.stype == null ? null : row31.stype;
                            rowtFileOutputDelimited_1[15]=row31.scaleres == null ? null : row31.scaleres;
                            rowtFileOutputDelimited_1[16]=row31.tbegin == null ? null : row31.tbegin;
                            rowtFileOutputDelimited_1[17]=row31.tend == null ? null : row31.tend;
                            rowtFileOutputDelimited_1[18]=row31.protocols == null ? null : row31.protocols;
                            rowtFileOutputDelimited_1[19]=row31.links == null ? null : row31.links;
                            rowtFileOutputDelimited_1[20]=row31.lineage == null ? null : row31.lineage;
                            rowtFileOutputDelimited_1[21]=row31.data_src == null ? null : row31.data_src;
                            rowtFileOutputDelimited_1[22]=row31.published == null ? null : row31.published;
                            rowtFileOutputDelimited_1[23]=row31.sdiurl == null ? null : row31.sdiurl;
                            rowtFileOutputDelimited_1[24]=row31.distributionFormat == null ? null : row31.distributionFormat;
                            rowtFileOutputDelimited_1[25]=row31.place == null ? null : row31.place;
                            rowtFileOutputDelimited_1[26]=row31.useLimitation == null ? null : row31.useLimitation;
                            rowtFileOutputDelimited_1[27]=row31.browseGraphic == null ? null : row31.browseGraphic;
                            rowtFileOutputDelimited_1[28]=row31.shortName == null ? null : row31.shortName;
                            rowtFileOutputDelimited_1[29]=row31.referenceFlag == null ? null : row31.referenceFlag;
                            rowtFileOutputDelimited_1[30]=row31.wms == null ? null : row31.wms;
                            rowtFileOutputDelimited_1[31]=row31.idpTopics == null ? null : row31.idpTopics;
                            rowtFileOutputDelimited_1[32]=row31.restApi == null ? null : row31.restApi;
                            rowtFileOutputDelimited_1[33]=row31.status == null ? null : row31.status;
                nb_line_tFileOutputDelimited_1++;
                resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);
                                       CsvWritertFileOutputDelimited_1.writeNext(rowtFileOutputDelimited_1);




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tReplace_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tReplace_1";

	

 



/**
 * [tReplace_1 process_data_end ] stop
 */

} // End of branch "map"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tFileInputXML_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_5";

	

 



/**
 * [tFileInputXML_5 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_5 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_5";

	


}
	}
	globalMap.put("tFileInputXML_5_NB_LINE",nb_line_tFileInputXML_5);

	
 

ok_Hash.put("tFileInputXML_5", true);
end_Hash.put("tFileInputXML_5", System.currentTimeMillis());




/**
 * [tFileInputXML_5 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row6 != null) {
						tHash_Lookup_row6.endGet();
					}
					globalMap.remove( "tHash_Lookup_row6" );

					
					
				
					if(tHash_Lookup_row8 != null) {
						tHash_Lookup_row8.endGet();
					}
					globalMap.remove( "tHash_Lookup_row8" );

					
					
				
					if(tHash_Lookup_row13 != null) {
						tHash_Lookup_row13.endGet();
					}
					globalMap.remove( "tHash_Lookup_row13" );

					
					
				
					if(tHash_Lookup_row15 != null) {
						tHash_Lookup_row15.endGet();
					}
					globalMap.remove( "tHash_Lookup_row15" );

					
					
				
					if(tHash_Lookup_row19 != null) {
						tHash_Lookup_row19.endGet();
					}
					globalMap.remove( "tHash_Lookup_row19" );

					
					
				
					if(tHash_Lookup_row22 != null) {
						tHash_Lookup_row22.endGet();
					}
					globalMap.remove( "tHash_Lookup_row22" );

					
					
				
					if(tHash_Lookup_row23 != null) {
						tHash_Lookup_row23.endGet();
					}
					globalMap.remove( "tHash_Lookup_row23" );

					
					
				
					if(tHash_Lookup_row27 != null) {
						tHash_Lookup_row27.endGet();
					}
					globalMap.remove( "tHash_Lookup_row27" );

					
					
				
					if(tHash_Lookup_row34 != null) {
						tHash_Lookup_row34.endGet();
					}
					globalMap.remove( "tHash_Lookup_row34" );

					
					
				
					if(tHash_Lookup_row40 != null) {
						tHash_Lookup_row40.endGet();
					}
					globalMap.remove( "tHash_Lookup_row40" );

					
					
				
					if(tHash_Lookup_row44 != null) {
						tHash_Lookup_row44.endGet();
					}
					globalMap.remove( "tHash_Lookup_row44" );

					
					
				
					if(tHash_Lookup_row45 != null) {
						tHash_Lookup_row45.endGet();
					}
					globalMap.remove( "tHash_Lookup_row45" );

					
					
				
					if(tHash_Lookup_status != null) {
						tHash_Lookup_status.endGet();
					}
					globalMap.remove( "tHash_Lookup_status" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tReplace_1 end ] start
	 */

	

	
	
	currentComponent="tReplace_1";

	


globalMap.put("tReplace_1_NB_LINE",nb_line_tReplace_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("map"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tReplace_1", true);
end_Hash.put("tReplace_1", System.currentTimeMillis());




/**
 * [tReplace_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_1!=null) {
				    	CsvWritertFileOutputDelimited_1.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row31"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row44"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row6"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_status"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row40"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row8"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row13"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row19"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row22"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row23"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row34"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row45"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row27"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row15"); 
				     			
				try{
					
	
	/**
	 * [tFileInputXML_5 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_5";

	

 



/**
 * [tFileInputXML_5 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tReplace_1 finally ] start
	 */

	

	
	
	currentComponent="tReplace_1";

	

 



/**
 * [tReplace_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_1");
					
						if(CsvWritertFileOutputDelimited_1!=null) {
					    	CsvWritertFileOutputDelimited_1.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_5_SUBPROCESS_STATE", 1);
	}
	


public static class mappedStruct implements routines.system.IPersistableRow<mappedStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String output;

				public String getOutput () {
					return this.output;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.output = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.output,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("output="+output);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(mappedStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLoop_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLoop_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
mappedStruct mapped = new mappedStruct();



	
	/**
	 * [tLoop_1 begin ] start
	 */

				
			int NB_ITERATE_tJavaFlex_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tLoop_1", false);
		start_Hash.put("tLoop_1", System.currentTimeMillis());
		
	
	currentComponent="tLoop_1";

	
		int tos_count_tLoop_1 = 0;
		

int current_iteration_tLoop_1 = 0;

for(int looptLoop_1 =1; looptLoop_1<=4999; looptLoop_1=looptLoop_1+250){
	
current_iteration_tLoop_1++;
globalMap.put("tLoop_1_CURRENT_VALUE",looptLoop_1);
globalMap.put("tLoop_1_CURRENT_ITERATION",current_iteration_tLoop_1);


 



/**
 * [tLoop_1 begin ] stop
 */
	
	/**
	 * [tLoop_1 main ] start
	 */

	

	
	
	currentComponent="tLoop_1";

	

 


	tos_count_tLoop_1++;

/**
 * [tLoop_1 main ] stop
 */
	
	/**
	 * [tLoop_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLoop_1";

	

 



/**
 * [tLoop_1 process_data_begin ] stop
 */
	NB_ITERATE_tJavaFlex_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row34", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row10", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row13", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row15", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("copyOfcopyOfcopyOfmap", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row29", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tFileInputXML_5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row45", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row22", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row26", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tFileInputXML_5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row40", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tFileInputXML_5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("copyOfmapped3_1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row19", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row8", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row46", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("mapp", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("copyOfmap", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tFileInputXML_5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("copyOfmapped3_0", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tFileInputXML_5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row12", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tFileInputXML_5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row43", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tFileInputXML_5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row24", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row33", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("map", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row25", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("status", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row23", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("copyOfcopyOfmapped2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row34", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row21", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row15", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("copyOfcopyOfcopyOfmapped3_0", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row28", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("map1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row40", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row22", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tFileInputXML_5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tFileInputXML_5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tFileInputXML_5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row44", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("mapped", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("denominator", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row23", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row32", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row27", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row20", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row16", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row31", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row35", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row11", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row27", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row18", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row13", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("mapped3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row42", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row45", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tFileInputXML_5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row36", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row19", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row39", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row9", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row8", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row17", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("status", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tFileInputXML_5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("copyOfcopyOfmapped3_0", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row30", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row44", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row14", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tFileInputXML_5", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tJavaFlex_1);
					//Thread.sleep(1000);
				}				
			



	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("mapped" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(System.getProperty("java.io.tmpdir") + "/sdiDump/tmp/request.txt")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                        if(fileToDelete_tFileOutputDelimited_2.exists()) {
                            fileToDelete_tFileOutputDelimited_2.delete();
                        }
                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
mappedStruct mapped_tmp = new mappedStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tJavaFlex_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaFlex_1", false);
		start_Hash.put("tJavaFlex_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaFlex_1";

	
		int tos_count_tJavaFlex_1 = 0;
		


// start part of your Java code
      


 



/**
 * [tJavaFlex_1 begin ] stop
 */
	
	/**
	 * [tJavaFlex_1 main ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	



// here is the main part of the component,
// a piece of code executed in the row
// loop
System.out.println("Fetching: " + ((Integer)globalMap.get("tLoop_1_CURRENT_VALUE")) + "/" + ((Integer)globalMap.get("tLoop_1_CURRENT_VALUE")+249) );

 


	tos_count_tJavaFlex_1++;

/**
 * [tJavaFlex_1 main ] stop
 */
	
	/**
	 * [tJavaFlex_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

mapped = null;


// # Output table : 'mapped'
mapped_tmp.output = "<?xml version=\"1.0\"?><csw:GetRecords xmlns:csw=\"http://www.opengis.net/cat/csw/2.0.2\" service=\"CSW\" version=\"2.0.2\" resultType=\"results\" outputSchema=\"csw:IsoRecord\" startPosition=\"" + ((Integer)globalMap.get("tLoop_1_CURRENT_VALUE")) + "\" maxRecords=\"250\"><csw:Query typeNames=\"gmd:MD_Metadata\"><csw:ElementSetName>full</csw:ElementSetName></csw:Query></csw:GetRecords>" ;
mapped = mapped_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "mapped"
if(mapped != null) { 



	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

			//mapped
			//mapped


			
				if(execStat){
					runStat.updateStatOnConnection("mapped"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(mapped.output != null) {
                        sb_tFileOutputDelimited_2.append(
                            mapped.output
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */

} // End of branch "mapped"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaFlex_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 process_data_end ] stop
 */
	
	/**
	 * [tJavaFlex_1 end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	


// end of the component, outside/closing the loop
//System.out.println("tmp dir is: " + System.getProperty("java.io.tmpdir") );

 

ok_Hash.put("tJavaFlex_1", true);
end_Hash.put("tJavaFlex_1", System.currentTimeMillis());




/**
 * [tJavaFlex_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("mapped"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tHttpRequest_1Process(globalMap);



/**
 * [tFileOutputDelimited_2 end ] stop
 */






						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tJavaFlex_1);
						}				
					




	
	/**
	 * [tLoop_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLoop_1";

	

 



/**
 * [tLoop_1 process_data_end ] stop
 */
	
	/**
	 * [tLoop_1 end ] start
	 */

	

	
	
	currentComponent="tLoop_1";

	


	}


 

ok_Hash.put("tLoop_1", true);
end_Hash.put("tLoop_1", System.currentTimeMillis());




/**
 * [tLoop_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLoop_1 finally ] start
	 */

	

	
	
	currentComponent="tLoop_1";

	

 



/**
 * [tLoop_1 finally ] stop
 */

	
	/**
	 * [tJavaFlex_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLoop_1_SUBPROCESS_STATE", 1);
	}
	


public static class row44Struct implements routines.system.IPersistableComparableLookupRow<row44Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String url;

				public String getUrl () {
					return this.url;
				}
				
			    public String protocol;

				public String getProtocol () {
					return this.protocol;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row44Struct other = (row44Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row44Struct other) {

		other.uuid = this.uuid;
	            other.url = this.url;
	            other.protocol = this.protocol;
	            
	}

	public void copyKeysDataTo(row44Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.url = readString(dis,ois);
					
						this.protocol = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.url, dos, oos);
					
						writeString(this.protocol, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",url="+url);
		sb.append(",protocol="+protocol);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row44Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_10 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_10> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String url;

				public String getUrl () {
					return this.url;
				}
				
			    public String protocol;

				public String getProtocol () {
					return this.protocol;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.url = readString(dis);
					
					this.protocol = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.url,dos);
					
					// String
				
						writeString(this.protocol,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",url="+url);
		sb.append(",protocol="+protocol);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_10 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row43Struct implements routines.system.IPersistableRow<row43Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String url;

				public String getUrl () {
					return this.url;
				}
				
			    public String protocol;

				public String getProtocol () {
					return this.protocol;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.url = readString(dis);
					
					this.protocol = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.url,dos);
					
					// String
				
						writeString(this.protocol,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",url="+url);
		sb.append(",protocol="+protocol);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row43Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row42Struct implements routines.system.IPersistableRow<row42Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String url;

				public String getUrl () {
					return this.url;
				}
				
			    public String protocol;

				public String getProtocol () {
					return this.protocol;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.url = readString(dis);
					
					this.protocol = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.url,dos);
					
					// String
				
						writeString(this.protocol,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",url="+url);
		sb.append(",protocol="+protocol);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row42Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfmapStruct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfmapStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String url;

				public String getUrl () {
					return this.url;
				}
				
			    public String protocol;

				public String getProtocol () {
					return this.protocol;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.url = readString(dis);
					
					this.protocol = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.url,dos);
					
					// String
				
						writeString(this.protocol,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",url="+url);
		sb.append(",protocol="+protocol);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfmapStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public routines.system.Document xmldoc;

				public routines.system.Document getXmldoc () {
					return this.xmldoc;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
						this.xmldoc = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.xmldoc);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("xmldoc="+String.valueOf(xmldoc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputXML_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();
copyOfcopyOfcopyOfmapStruct copyOfcopyOfcopyOfmap = new copyOfcopyOfcopyOfmapStruct();
row42Struct row42 = new row42Struct();
row43Struct row43 = new row43Struct();
row44Struct row44 = new row44Struct();




	
	/**
	 * [tXMLMap_2_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_2_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_2_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_OUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row11" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tXMLMap_2_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_2_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_2_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_2_TXMLMAP_OUT__Struct Var__tXMLMap_2_TXMLMAP_OUT = new Var__tXMLMap_2_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfmapStruct copyOfcopyOfcopyOfmap_tmp = new copyOfcopyOfcopyOfmapStruct();
copyOfcopyOfcopyOfmapStruct copyOfcopyOfcopyOfmap_save = null;
//the aggregate variable
copyOfcopyOfcopyOfmapStruct copyOfcopyOfcopyOfmap_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_2 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_2",allOutsForAggregate_tXMLMap_2);
// ###############################
class TreeNode_API_tXMLMap_2_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
	java.util.Date get_Date(String xpath, String pattern){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Date(content, pattern);
	}
	Integer get_Integer(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Integer(content);
	}
	Float get_Float(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Float(content);
	}
	Character get_Character(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Character(content);
	}
	Double get_Double(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Double(content);
	}
}
			TreeNode_API_tXMLMap_2_TXMLMAP_OUT treeNodeAPI_tXMLMap_2_TXMLMAP_OUT = new TreeNode_API_tXMLMap_2_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_2_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_2_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_2_TXMLMAP_OUT xml_api_tXMLMap_2_TXMLMAP_OUT = new XML_API_tXMLMap_2_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_2_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            
 



/**
 * [tXMLMap_2_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tFileInputXML_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_8", false);
		start_Hash.put("tFileInputXML_8", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_8";

	
		int tos_count_tFileInputXML_8 = 0;
		

	

int nb_line_tFileInputXML_8 = 0;

	String os_tFileInputXML_8 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_8=false;
	if(os_tFileInputXML_8.indexOf("windows") > -1 || os_tFileInputXML_8.indexOf("nt") > -1){
		isWindows_tFileInputXML_8=true;
	}
class NameSpaceTool_tFileInputXML_8 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_8{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_8 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_8 = null;
try {
	filename_tFileInputXML_8 = System.getProperty("java.io.tmpdir") + "/sdiDump/tmp/out.xml";
} catch(java.lang.Exception e) {
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_8 != null && filename_tFileInputXML_8 instanceof String && filename_tFileInputXML_8.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_8){
		filename_tFileInputXML_8 = filename_tFileInputXML_8.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_8 = true;
org.dom4j.Document doc_tFileInputXML_8 = null;
java.io.Closeable toClose_tFileInputXML_8 = null;
try{
	if(filename_tFileInputXML_8 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_8 = (java.io.InputStream)filename_tFileInputXML_8;
		toClose_tFileInputXML_8 = inputStream_tFileInputXML_8;
		doc_tFileInputXML_8 = reader_tFileInputXML_8.read(inputStream_tFileInputXML_8);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_8 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_8)),"ISO-8859-15");
		toClose_tFileInputXML_8 = unicodeReader_tFileInputXML_8;
		org.xml.sax.InputSource in_tFileInputXML_8= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_8);
		doc_tFileInputXML_8 = reader_tFileInputXML_8.read(in_tFileInputXML_8);
	}
}catch(java.lang.Exception e){
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_8 = false;
} finally {
	if(toClose_tFileInputXML_8!=null) {
		toClose_tFileInputXML_8.close();
	}
}
if(isValidFile_tFileInputXML_8){
NameSpaceTool_tFileInputXML_8 nsTool_tFileInputXML_8 = new NameSpaceTool_tFileInputXML_8();
nsTool_tFileInputXML_8.countNSMap(doc_tFileInputXML_8.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_8 = nsTool_tFileInputXML_8.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_8 = doc_tFileInputXML_8.createXPath(nsTool_tFileInputXML_8.addDefaultNSPrefix("/csw:GetRecordsResponse"));  
x_tFileInputXML_8.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_8); 

java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_8 = (java.util.List<org.dom4j.tree.AbstractNode>)x_tFileInputXML_8.selectNodes(doc_tFileInputXML_8);	
XML_API_tFileInputXML_8 xml_api_tFileInputXML_8 = new XML_API_tFileInputXML_8();
String str_tFileInputXML_8 = "";
org.dom4j.Node node_tFileInputXML_8 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_8=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_8{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_8 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix(".","/csw:GetRecordsResponse"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_8 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_8 xPathUtil_tFileInputXML_8 = new XPathUtil_tFileInputXML_8();
	xPathUtil_tFileInputXML_8.initXPaths(xpaths_tFileInputXML_8, nsTool_tFileInputXML_8, xmlNameSpaceMap_tFileInputXML_8);
for (org.dom4j.tree.AbstractNode temp_tFileInputXML_8: nodeList_tFileInputXML_8) {
		nb_line_tFileInputXML_8++;
		
	row11 = null;			
	boolean whetherReject_tFileInputXML_8 = false;
	row11 = new row11Struct();
	try{
    Object obj0_tFileInputXML_8 = xpaths_tFileInputXML_8.get(0).evaluate(temp_tFileInputXML_8);
    if(obj0_tFileInputXML_8 == null) {
    	node_tFileInputXML_8 = null;
		str_tFileInputXML_8 = null;
    	
    } else if(obj0_tFileInputXML_8 instanceof org.dom4j.Node) {
    	node_tFileInputXML_8 = (org.dom4j.Node)obj0_tFileInputXML_8;
		str_tFileInputXML_8 = node_tFileInputXML_8.asXML();
    } else if(obj0_tFileInputXML_8 instanceof String || obj0_tFileInputXML_8 instanceof Number){
    	node_tFileInputXML_8 = temp_tFileInputXML_8;
    	str_tFileInputXML_8 = String.valueOf(obj0_tFileInputXML_8);
    } else if(obj0_tFileInputXML_8 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_8 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_8;
    	node_tFileInputXML_8 = nodes_tFileInputXML_8.size()>0 ? nodes_tFileInputXML_8.get(0) : null;
		str_tFileInputXML_8 = node_tFileInputXML_8==null?null:node_tFileInputXML_8.asXML();
	}
								row11.xmldoc = ParserUtils.parseTo_Document(str_tFileInputXML_8,false,"ISO-8859-15"); 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_8 = true;
                System.err.println(e.getMessage());
                row11 = null;
    }
			
			

 



/**
 * [tFileInputXML_8 begin ] stop
 */
	
	/**
	 * [tFileInputXML_8 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_8";

	

 


	tos_count_tFileInputXML_8++;

/**
 * [tFileInputXML_8 main ] stop
 */
	
	/**
	 * [tFileInputXML_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_8";

	

 



/**
 * [tFileInputXML_8 process_data_begin ] stop
 */
// Start of branch "row11"
if(row11 != null) { 



	
	/**
	 * [tXMLMap_2_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_OUT";

	

			//row11
			//row11


			
				if(execStat){
					runStat.updateStatOnConnection("row11"+iterateId,1, 1);
				} 
			

		

	boolean rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_2_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_2_TXMLMAP_OUT = false;
	  
	
			

		
		
				//init document to flat tool
				routines.system.DocumentToFlat docToFlat_tXMLMap_2_TXMLMAP_OUT = new routines.system.DocumentToFlat();
				docToFlat_tXMLMap_2_TXMLMAP_OUT.setOriginalLoop("/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:distributionInfo/gmd:MD_Distribution/gmd:transferOptions/gmd:MD_DigitalTransferOptions/gmd:onLine/gmd:CI_OnlineResource");
				docToFlat_tXMLMap_2_TXMLMAP_OUT.setIsOptional(false);
				if(row11.xmldoc == null || row11.xmldoc.getDocument() == null) {
					throw new RuntimeException("row11.xmldoc can't be empty");
				}
				org.dom4j.Document doc_tXMLMap_2_TXMLMAP_OUT = row11.xmldoc.getDocument();
				docToFlat_tXMLMap_2_TXMLMAP_OUT.setDoc(doc_tXMLMap_2_TXMLMAP_OUT);
				docToFlat_tXMLMap_2_TXMLMAP_OUT.setDefineNS(true);
				docToFlat_tXMLMap_2_TXMLMAP_OUT.setNamespaceTool(nsTool_tXMLMap_2_TXMLMAP_OUT);
				
					java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT = new java.util.HashMap<String,String>();
					xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT.put("gco","http://www.isotc211.org/2005/gco");xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT.put("gmx","http://www.isotc211.org/2005/gmx");xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT.put("csw","http://www.opengis.net/cat/csw/2.0.2");xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT.put("gml","http://www.opengis.net/gml");xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT.put("gmd","http://www.isotc211.org/2005/gmd");
				
				docToFlat_tXMLMap_2_TXMLMAP_OUT.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_2_TXMLMAP_OUT);
				
				String[] absolutePathMappings_tXMLMap_2_TXMLMAP_OUT = new String[3];
				String[] relativePathMappings_tXMLMap_2_TXMLMAP_OUT = new String[3];
				
				absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[0] = "row11.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:distributionInfo/gmd:MD_Distribution/gmd:transferOptions/gmd:MD_DigitalTransferOptions/gmd:onLine/gmd:CI_OnlineResource/gmd:protocol/gco:CharacterString";
				relativePathMappings_tXMLMap_2_TXMLMAP_OUT[0] = "gmd:protocol/gco:CharacterString";
				
				absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[1] = "row11.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:distributionInfo/gmd:MD_Distribution/gmd:transferOptions/gmd:MD_DigitalTransferOptions/gmd:onLine/gmd:CI_OnlineResource/gmd:linkage/gmd:URL";
				relativePathMappings_tXMLMap_2_TXMLMAP_OUT[1] = "gmd:linkage/gmd:URL";
				
				absolutePathMappings_tXMLMap_2_TXMLMAP_OUT[2] = "row11.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:fileIdentifier/gco:CharacterString";
				relativePathMappings_tXMLMap_2_TXMLMAP_OUT[2] = "../../../../../../gmd:fileIdentifier/gco:CharacterString";
				
				docToFlat_tXMLMap_2_TXMLMAP_OUT.setAbsolutePathMappings(absolutePathMappings_tXMLMap_2_TXMLMAP_OUT);
				docToFlat_tXMLMap_2_TXMLMAP_OUT.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_2_TXMLMAP_OUT);
				//generate document to flat data
				docToFlat_tXMLMap_2_TXMLMAP_OUT.flat();
				//get flat data
				java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_2_TXMLMAP_OUT = docToFlat_tXMLMap_2_TXMLMAP_OUT.getResultSet();
				
				for (java.util.Map<String,String> oneRow_tXMLMap_2_TXMLMAP_OUT: resultSet_tXMLMap_2_TXMLMAP_OUT) { // G_TXM_M_001
					nb_line_tXMLMap_2_TXMLMAP_OUT++;
			    	rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
			    	rejectedDocInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;
					mainRowRejected_tXMLMap_2_TXMLMAP_OUT=false;
				    isMatchDocRowtXMLMap_2_TXMLMAP_OUT = false;
					
			    	treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.clear();
			    	for(java.util.Map.Entry<String, String> entry_tXMLMap_2_TXMLMAP_OUT : oneRow_tXMLMap_2_TXMLMAP_OUT.entrySet()) {
						treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.put(entry_tXMLMap_2_TXMLMAP_OUT.getKey(),entry_tXMLMap_2_TXMLMAP_OUT.getValue());
					}
					


			
{ // start of Var scope

	// ###############################
	// # Vars tables

Var__tXMLMap_2_TXMLMAP_OUT__Struct Var = Var__tXMLMap_2_TXMLMAP_OUT;
		// ###############################
		// # Output tables

copyOfcopyOfcopyOfmap = null;


// # Output table : 'copyOfcopyOfcopyOfmap'

copyOfcopyOfcopyOfmap_tmp = new copyOfcopyOfcopyOfmapStruct();
copyOfcopyOfcopyOfmap_tmp.uuid = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String("row11.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:fileIdentifier/gco:CharacterString");
copyOfcopyOfcopyOfmap_tmp.url = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String("row11.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:distributionInfo/gmd:MD_Distribution/gmd:transferOptions/gmd:MD_DigitalTransferOptions/gmd:onLine/gmd:CI_OnlineResource/gmd:linkage/gmd:URL");
copyOfcopyOfcopyOfmap_tmp.protocol = treeNodeAPI_tXMLMap_2_TXMLMAP_OUT.get_String("row11.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:distributionInfo/gmd:MD_Distribution/gmd:transferOptions/gmd:MD_DigitalTransferOptions/gmd:onLine/gmd:CI_OnlineResource/gmd:protocol/gco:CharacterString");allOutsForAggregate_tXMLMap_2.add(copyOfcopyOfcopyOfmap_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_2_TXMLMAP_OUT = false;


		}//G_TXM_M_001 close
	

 


	tos_count_tXMLMap_2_TXMLMAP_OUT++;

/**
 * [tXMLMap_2_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_2_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_2_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_2_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_2_TXMLMAP_OUT process_data_end ] stop
 */

} // End of branch "row11"




	
	/**
	 * [tFileInputXML_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_8";

	

 



/**
 * [tFileInputXML_8 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_8 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_8";

	


}
	}
	globalMap.put("tFileInputXML_8_NB_LINE",nb_line_tFileInputXML_8);

	
 

ok_Hash.put("tFileInputXML_8", true);
end_Hash.put("tFileInputXML_8", System.currentTimeMillis());




/**
 * [tFileInputXML_8 end ] stop
 */

	
	/**
	 * [tXMLMap_2_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_OUT";

	




			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row11"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tXMLMap_2_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_2_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_2_TXMLMAP_OUT end ] stop
 */




	
	/**
	 * [tAggregateRow_10_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_10_AGGOUT", false);
		start_Hash.put("tAggregateRow_10_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_10";
	
	currentComponent="tAggregateRow_10_AGGOUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row43" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAggregateRow_10_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_10 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_10 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_10 utilClass_tAggregateRow_10 = new UtilClass_tAggregateRow_10();

	

	class AggOperationStruct_tAggregateRow_10 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String uuid;StringBuilder url_list = new StringBuilder();
           			boolean url_list_firstEmpty = false;
           			StringBuilder protocol_list = new StringBuilder();
           			boolean protocol_list_firstEmpty = false;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_10 other = (AggOperationStruct_tAggregateRow_10) obj;
			
							if (this.uuid == null) {
								if (other.uuid != null) 
									return false;
							} else if (!this.uuid.equals(other.uuid)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_10 operation_result_tAggregateRow_10 = null;
	AggOperationStruct_tAggregateRow_10 operation_finder_tAggregateRow_10 = new AggOperationStruct_tAggregateRow_10();
	java.util.Map<AggOperationStruct_tAggregateRow_10,AggOperationStruct_tAggregateRow_10> hash_tAggregateRow_10 = new java.util.HashMap<AggOperationStruct_tAggregateRow_10,AggOperationStruct_tAggregateRow_10>();
	
	String delimiter_tAggregateRow_10 = "|";
	

 



/**
 * [tAggregateRow_10_AGGOUT begin ] stop
 */



	
	/**
	 * [tUniqRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_2", false);
		start_Hash.put("tUniqRow_2", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row42" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tUniqRow_2 = 0;
		

	
		class KeyStruct_tUniqRow_2 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String uuid;
					String url;
					String protocol;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
								
								result = prime * result + ((this.url == null) ? 0 : this.url.hashCode());
								
								result = prime * result + ((this.protocol == null) ? 0 : this.protocol.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;
				
									if (this.uuid == null) {
										if (other.uuid != null) 
											return false;
								
									} else if (!this.uuid.equals(other.uuid))
								 
										return false;
								
									if (this.url == null) {
										if (other.url != null) 
											return false;
								
									} else if (!this.url.equals(other.url))
								 
										return false;
								
									if (this.protocol == null) {
										if (other.protocol != null) 
											return false;
								
									} else if (!this.protocol.equals(other.protocol))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_2 = 0;
int nb_duplicates_tUniqRow_2 = 0;
KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>(); 

 



/**
 * [tUniqRow_2 begin ] stop
 */



	
	/**
	 * [tFilterRow_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_14", false);
		start_Hash.put("tFilterRow_14", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_14";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("copyOfcopyOfcopyOfmap" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_14 = 0;
		
    int nb_line_tFilterRow_14 = 0;
    int nb_line_ok_tFilterRow_14 = 0;
    int nb_line_reject_tFilterRow_14 = 0;

    class Operator_tFilterRow_14 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_14(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_14 begin ] stop
 */



	
	/**
	 * [tXMLMap_2_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_2_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_2_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_IN";

	
		int tos_count_tXMLMap_2_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_2 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_2");
for(Object  row_out_tXMLMap_2_TXMLMAP_IN : outs_tXMLMap_2) {//TD512
 



/**
 * [tXMLMap_2_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_2_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_IN";

	

	copyOfcopyOfcopyOfmap = null;
	if(row_out_tXMLMap_2_TXMLMAP_IN!=null && row_out_tXMLMap_2_TXMLMAP_IN instanceof copyOfcopyOfcopyOfmapStruct) {
		copyOfcopyOfcopyOfmap = (copyOfcopyOfcopyOfmapStruct)row_out_tXMLMap_2_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_2_TXMLMAP_IN++;

/**
 * [tXMLMap_2_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_2_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_2_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfmap"
if(copyOfcopyOfcopyOfmap != null) { 



	
	/**
	 * [tFilterRow_14 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_14";

	

			//copyOfcopyOfcopyOfmap
			//copyOfcopyOfcopyOfmap


			
				if(execStat){
					runStat.updateStatOnConnection("copyOfcopyOfcopyOfmap"+iterateId,1, 1);
				} 
			

		

          row42 = null;
    Operator_tFilterRow_14 ope_tFilterRow_14 = new Operator_tFilterRow_14("&&");
      ope_tFilterRow_14.matches((copyOfcopyOfcopyOfmap.protocol.contains("REST")
			), "advanced condition failed");
    
    if (ope_tFilterRow_14.getMatchFlag()) {
              if(row42 == null){ 
                row42 = new row42Struct();
              }
               row42.uuid = copyOfcopyOfcopyOfmap.uuid;
               row42.url = copyOfcopyOfcopyOfmap.url;
               row42.protocol = copyOfcopyOfcopyOfmap.protocol;    
      nb_line_ok_tFilterRow_14++;
    } else {
      nb_line_reject_tFilterRow_14++;
    }

nb_line_tFilterRow_14++;

 


	tos_count_tFilterRow_14++;

/**
 * [tFilterRow_14 main ] stop
 */
	
	/**
	 * [tFilterRow_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_14";

	

 



/**
 * [tFilterRow_14 process_data_begin ] stop
 */
// Start of branch "row42"
if(row42 != null) { 



	
	/**
	 * [tUniqRow_2 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

			//row42
			//row42


			
				if(execStat){
					runStat.updateStatOnConnection("row42"+iterateId,1, 1);
				} 
			

		
row43 = null;			
if(row42.uuid == null){
	finder_tUniqRow_2.uuid = null;
}else{
	finder_tUniqRow_2.uuid = row42.uuid.toLowerCase();
}
if(row42.url == null){
	finder_tUniqRow_2.url = null;
}else{
	finder_tUniqRow_2.url = row42.url.toLowerCase();
}
if(row42.protocol == null){
	finder_tUniqRow_2.protocol = null;
}else{
	finder_tUniqRow_2.protocol = row42.protocol.toLowerCase();
}	
finder_tUniqRow_2.hashCodeDirty = true;
if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
		KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

		
if(row42.uuid == null){
	new_tUniqRow_2.uuid = null;
}else{
	new_tUniqRow_2.uuid = row42.uuid.toLowerCase();
}
if(row42.url == null){
	new_tUniqRow_2.url = null;
}else{
	new_tUniqRow_2.url = row42.url.toLowerCase();
}
if(row42.protocol == null){
	new_tUniqRow_2.protocol = null;
}else{
	new_tUniqRow_2.protocol = row42.protocol.toLowerCase();
}
		
		keystUniqRow_2.add(new_tUniqRow_2);if(row43 == null){ 
	
	row43 = new row43Struct();
}row43.uuid = row42.uuid;			row43.url = row42.url;			row43.protocol = row42.protocol;					
		nb_uniques_tUniqRow_2++;
	} else {
	  nb_duplicates_tUniqRow_2++;
	}

 


	tos_count_tUniqRow_2++;

/**
 * [tUniqRow_2 main ] stop
 */
	
	/**
	 * [tUniqRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_begin ] stop
 */
// Start of branch "row43"
if(row43 != null) { 



	
	/**
	 * [tAggregateRow_10_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_10";
	
	currentComponent="tAggregateRow_10_AGGOUT";

	

			//row43
			//row43


			
				if(execStat){
					runStat.updateStatOnConnection("row43"+iterateId,1, 1);
				} 
			

		
	
operation_finder_tAggregateRow_10.uuid = row43.uuid;
			

	operation_finder_tAggregateRow_10.hashCodeDirty = true;
	
	operation_result_tAggregateRow_10 = hash_tAggregateRow_10.get(operation_finder_tAggregateRow_10);

	

	if(operation_result_tAggregateRow_10 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_10 = new AggOperationStruct_tAggregateRow_10();

		operation_result_tAggregateRow_10.uuid = operation_finder_tAggregateRow_10.uuid;
				
		
		

		hash_tAggregateRow_10.put(operation_result_tAggregateRow_10, operation_result_tAggregateRow_10);
	
	} // G_OutMain_AggR_001


	
				if(row43.url != null) { // G_OutMain_AggR_546
				
				if(operation_result_tAggregateRow_10.url_list.length() > 0) {
					operation_result_tAggregateRow_10.url_list.append("|");
				} 
				else if(operation_result_tAggregateRow_10.url_list_firstEmpty){
					operation_result_tAggregateRow_10.url_list.append("|");
				}
					if(operation_result_tAggregateRow_10.url_list != null) {
						if(operation_result_tAggregateRow_10.url_list_firstEmpty==false && ("").equals(String.valueOf(row43.url))){
							operation_result_tAggregateRow_10.url_list_firstEmpty = true;
						}
						operation_result_tAggregateRow_10.url_list = operation_result_tAggregateRow_10.url_list.append(String.valueOf(row43.url));
					}
				
				} // G_OutMain_AggR_546
				
				if(row43.protocol != null) { // G_OutMain_AggR_546
				
				if(operation_result_tAggregateRow_10.protocol_list.length() > 0) {
					operation_result_tAggregateRow_10.protocol_list.append("|");
				} 
				else if(operation_result_tAggregateRow_10.protocol_list_firstEmpty){
					operation_result_tAggregateRow_10.protocol_list.append("|");
				}
					if(operation_result_tAggregateRow_10.protocol_list != null) {
						if(operation_result_tAggregateRow_10.protocol_list_firstEmpty==false && ("").equals(String.valueOf(row43.protocol))){
							operation_result_tAggregateRow_10.protocol_list_firstEmpty = true;
						}
						operation_result_tAggregateRow_10.protocol_list = operation_result_tAggregateRow_10.protocol_list.append(String.valueOf(row43.protocol));
					}
				
				} // G_OutMain_AggR_546
				


 


	tos_count_tAggregateRow_10_AGGOUT++;

/**
 * [tAggregateRow_10_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_10_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_10";
	
	currentComponent="tAggregateRow_10_AGGOUT";

	

 



/**
 * [tAggregateRow_10_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_10_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_10";
	
	currentComponent="tAggregateRow_10_AGGOUT";

	

 



/**
 * [tAggregateRow_10_AGGOUT process_data_end ] stop
 */

} // End of branch "row43"




	
	/**
	 * [tUniqRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 process_data_end ] stop
 */

} // End of branch "row42"




	
	/**
	 * [tFilterRow_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_14";

	

 



/**
 * [tFilterRow_14 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfmap"




	
	/**
	 * [tXMLMap_2_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_2_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_2_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_IN";

	

}//TD512
 

ok_Hash.put("tXMLMap_2_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_2_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_2_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tFilterRow_14 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_14";

	
    globalMap.put("tFilterRow_14_NB_LINE", nb_line_tFilterRow_14);
    globalMap.put("tFilterRow_14_NB_LINE_OK", nb_line_ok_tFilterRow_14);
    globalMap.put("tFilterRow_14_NB_LINE_REJECT", nb_line_reject_tFilterRow_14);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("copyOfcopyOfcopyOfmap"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_14", true);
end_Hash.put("tFilterRow_14", System.currentTimeMillis());




/**
 * [tFilterRow_14 end ] stop
 */

	
	/**
	 * [tUniqRow_2 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

globalMap.put("tUniqRow_2_NB_UNIQUES",nb_uniques_tUniqRow_2);
globalMap.put("tUniqRow_2_NB_DUPLICATES",nb_duplicates_tUniqRow_2);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row42"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tUniqRow_2", true);
end_Hash.put("tUniqRow_2", System.currentTimeMillis());




/**
 * [tUniqRow_2 end ] stop
 */

	
	/**
	 * [tAggregateRow_10_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_10";
	
	currentComponent="tAggregateRow_10_AGGOUT";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row43"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAggregateRow_10_AGGOUT", true);
end_Hash.put("tAggregateRow_10_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_10_AGGOUT end ] stop
 */


	
	/**
	 * [tAdvancedHash_row44 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row44", false);
		start_Hash.put("tAdvancedHash_row44", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row44";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row44" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row44 = 0;
		

			   		// connection name:row44
			   		// source node:tAggregateRow_10_AGGIN - inputs:(OnRowsEnd) outputs:(row44,row44) | target node:tAdvancedHash_row44 - inputs:(row44) outputs:()
			   		// linked node: tMap_2 - inputs:(row2,row44,row6,status,row40,row8,row13,row19,row22,row23,row34,row45,row27,row15) outputs:(map)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row44 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row44Struct> tHash_Lookup_row44 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row44Struct>getLookup(matchingModeEnum_row44);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row44", tHash_Lookup_row44);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row44 begin ] stop
 */



	
	/**
	 * [tAggregateRow_10_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_10_AGGIN", false);
		start_Hash.put("tAggregateRow_10_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_10";
	
	currentComponent="tAggregateRow_10_AGGIN";

	
		int tos_count_tAggregateRow_10_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_10> values_tAggregateRow_10 = hash_tAggregateRow_10.values();

globalMap.put("tAggregateRow_10_NB_LINE", values_tAggregateRow_10.size());

for(AggOperationStruct_tAggregateRow_10 aggregated_row_tAggregateRow_10 : values_tAggregateRow_10) { // G_AggR_600



 



/**
 * [tAggregateRow_10_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_10_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_10";
	
	currentComponent="tAggregateRow_10_AGGIN";

	

            				    row44.uuid = aggregated_row_tAggregateRow_10.uuid;
            				    
    								row44.url = aggregated_row_tAggregateRow_10.url_list.toString();
	    						
    								row44.protocol = aggregated_row_tAggregateRow_10.protocol_list.toString();
	    						

 


	tos_count_tAggregateRow_10_AGGIN++;

/**
 * [tAggregateRow_10_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_10_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_10";
	
	currentComponent="tAggregateRow_10_AGGIN";

	

 



/**
 * [tAggregateRow_10_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row44 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row44";

	

			//row44
			//row44


			
				if(execStat){
					runStat.updateStatOnConnection("row44"+iterateId,1, 1);
				} 
			

		


			   
			   

					row44Struct row44_HashRow = new row44Struct();
		   	   	   
				
				row44_HashRow.uuid = row44.uuid;
				
				row44_HashRow.url = row44.url;
				
				row44_HashRow.protocol = row44.protocol;
				
			tHash_Lookup_row44.put(row44_HashRow);
			
            




 


	tos_count_tAdvancedHash_row44++;

/**
 * [tAdvancedHash_row44 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row44 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row44";

	

 



/**
 * [tAdvancedHash_row44 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row44 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row44";

	

 



/**
 * [tAdvancedHash_row44 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_10_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_10";
	
	currentComponent="tAggregateRow_10_AGGIN";

	

 



/**
 * [tAggregateRow_10_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_10_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_10";
	
	currentComponent="tAggregateRow_10_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_10_AGGIN", true);
end_Hash.put("tAggregateRow_10_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_10_AGGIN end ] stop
 */

	
	/**
	 * [tAdvancedHash_row44 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row44";

	

tHash_Lookup_row44.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row44"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row44", true);
end_Hash.put("tAdvancedHash_row44", System.currentTimeMillis());




/**
 * [tAdvancedHash_row44 end ] stop
 */





















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_10_AGGIN"
							globalMap.remove("tAggregateRow_10");
						
				try{
					
	
	/**
	 * [tFileInputXML_8 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_8";

	

 



/**
 * [tFileInputXML_8 finally ] stop
 */

	
	/**
	 * [tXMLMap_2_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_2_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_2_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_2";
	
	currentComponent="tXMLMap_2_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_2_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tFilterRow_14 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_14";

	

 



/**
 * [tFilterRow_14 finally ] stop
 */

	
	/**
	 * [tUniqRow_2 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_2";

	

 



/**
 * [tUniqRow_2 finally ] stop
 */

	
	/**
	 * [tAggregateRow_10_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_10";
	
	currentComponent="tAggregateRow_10_AGGOUT";

	

 



/**
 * [tAggregateRow_10_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_10_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_10";
	
	currentComponent="tAggregateRow_10_AGGIN";

	

 



/**
 * [tAggregateRow_10_AGGIN finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row44 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row44";

	

 



/**
 * [tAdvancedHash_row44 finally ] stop
 */





















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_8_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableComparableLookupRow<row6Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String denominator;

				public String getDenominator () {
					return this.denominator;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.uuid = this.uuid;
	            other.denominator = this.denominator;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.denominator = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.denominator, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",denominator="+denominator);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_2 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_2> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String denominator;

				public String getDenominator () {
					return this.denominator;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.denominator = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.denominator,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",denominator="+denominator);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_2 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class denominatorStruct implements routines.system.IPersistableRow<denominatorStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String denominator;

				public String getDenominator () {
					return this.denominator;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.denominator = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.denominator,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",denominator="+denominator);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(denominatorStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String denominator;

				public String getDenominator () {
					return this.denominator;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.denominator = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.denominator,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",denominator="+denominator);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputXML_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
denominatorStruct denominator = new denominatorStruct();
row6Struct row6 = new row6Struct();





	
	/**
	 * [tAggregateRow_2_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_2_AGGOUT", false);
		start_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("denominator" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAggregateRow_2_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_2 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_2 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_2 utilClass_tAggregateRow_2 = new UtilClass_tAggregateRow_2();

	

	class AggOperationStruct_tAggregateRow_2 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String uuid;StringBuilder denominator_list = new StringBuilder();
           			boolean denominator_list_firstEmpty = false;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_2 other = (AggOperationStruct_tAggregateRow_2) obj;
			
							if (this.uuid == null) {
								if (other.uuid != null) 
									return false;
							} else if (!this.uuid.equals(other.uuid)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_2 operation_result_tAggregateRow_2 = null;
	AggOperationStruct_tAggregateRow_2 operation_finder_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();
	java.util.Map<AggOperationStruct_tAggregateRow_2,AggOperationStruct_tAggregateRow_2> hash_tAggregateRow_2 = new java.util.HashMap<AggOperationStruct_tAggregateRow_2,AggOperationStruct_tAggregateRow_2>();
	
	String delimiter_tAggregateRow_2 = "|";
	

 



/**
 * [tAggregateRow_2_AGGOUT begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
denominatorStruct denominator_tmp = new denominatorStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tFileInputXML_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_2", false);
		start_Hash.put("tFileInputXML_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_2";

	
		int tos_count_tFileInputXML_2 = 0;
		

	

int nb_line_tFileInputXML_2 = 0;

	String os_tFileInputXML_2 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_2=false;
	if(os_tFileInputXML_2.indexOf("windows") > -1 || os_tFileInputXML_2.indexOf("nt") > -1){
		isWindows_tFileInputXML_2=true;
	}
class NameSpaceTool_tFileInputXML_2 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_2{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_2 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_2 = null;
try {
	filename_tFileInputXML_2 = System.getProperty("java.io.tmpdir") + "/sdiDump/tmp/out.xml";
} catch(java.lang.Exception e) {
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_2 != null && filename_tFileInputXML_2 instanceof String && filename_tFileInputXML_2.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_2){
		filename_tFileInputXML_2 = filename_tFileInputXML_2.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_2 = true;
org.dom4j.Document doc_tFileInputXML_2 = null;
java.io.Closeable toClose_tFileInputXML_2 = null;
try{
	if(filename_tFileInputXML_2 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_2 = (java.io.InputStream)filename_tFileInputXML_2;
		toClose_tFileInputXML_2 = inputStream_tFileInputXML_2;
		doc_tFileInputXML_2 = reader_tFileInputXML_2.read(inputStream_tFileInputXML_2);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_2 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_2)),"UTF-8");
		toClose_tFileInputXML_2 = unicodeReader_tFileInputXML_2;
		org.xml.sax.InputSource in_tFileInputXML_2= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_2);
		doc_tFileInputXML_2 = reader_tFileInputXML_2.read(in_tFileInputXML_2);
	}
}catch(java.lang.Exception e){
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_2 = false;
} finally {
	if(toClose_tFileInputXML_2!=null) {
		toClose_tFileInputXML_2.close();
	}
}
if(isValidFile_tFileInputXML_2){
NameSpaceTool_tFileInputXML_2 nsTool_tFileInputXML_2 = new NameSpaceTool_tFileInputXML_2();
nsTool_tFileInputXML_2.countNSMap(doc_tFileInputXML_2.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_2 = nsTool_tFileInputXML_2.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_2 = doc_tFileInputXML_2.createXPath(nsTool_tFileInputXML_2.addDefaultNSPrefix("/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:spatialResolution/gmd:MD_Resolution/gmd:equivalentScale/gmd:MD_RepresentativeFraction/gmd:denominator/gco:Integer"));  
x_tFileInputXML_2.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_2); 

java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_2 = (java.util.List<org.dom4j.tree.AbstractNode>)x_tFileInputXML_2.selectNodes(doc_tFileInputXML_2);	
XML_API_tFileInputXML_2 xml_api_tFileInputXML_2 = new XML_API_tFileInputXML_2();
String str_tFileInputXML_2 = "";
org.dom4j.Node node_tFileInputXML_2 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_2=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_2{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_2 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("../../../../../../../../gmd:fileIdentifier/gco:CharacterString","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:spatialResolution/gmd:MD_Resolution/gmd:equivalentScale/gmd:MD_RepresentativeFraction/gmd:denominator/gco:Integer"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix(".","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:spatialResolution/gmd:MD_Resolution/gmd:equivalentScale/gmd:MD_RepresentativeFraction/gmd:denominator/gco:Integer"));
	xpath_1.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(1,xpath_1);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_2 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_2 xPathUtil_tFileInputXML_2 = new XPathUtil_tFileInputXML_2();
	xPathUtil_tFileInputXML_2.initXPaths(xpaths_tFileInputXML_2, nsTool_tFileInputXML_2, xmlNameSpaceMap_tFileInputXML_2);
for (org.dom4j.tree.AbstractNode temp_tFileInputXML_2: nodeList_tFileInputXML_2) {
		nb_line_tFileInputXML_2++;
		
	row5 = null;			
	boolean whetherReject_tFileInputXML_2 = false;
	row5 = new row5Struct();
	try{
    Object obj0_tFileInputXML_2 = xpaths_tFileInputXML_2.get(0).evaluate(temp_tFileInputXML_2);
    if(obj0_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj0_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj0_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj0_tFileInputXML_2 instanceof String || obj0_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj0_tFileInputXML_2);
    } else if(obj0_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row5.uuid =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row5.uuid ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row5.uuid =null;
									}else{
		row5.uuid = str_tFileInputXML_2;
	}
    Object obj1_tFileInputXML_2 = xpaths_tFileInputXML_2.get(1).evaluate(temp_tFileInputXML_2);
    if(obj1_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj1_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj1_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj1_tFileInputXML_2 instanceof String || obj1_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj1_tFileInputXML_2);
    } else if(obj1_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj1_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row5.denominator =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row5.denominator ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row5.denominator =null;
									}else{
		row5.denominator = str_tFileInputXML_2;
	} 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_2 = true;
                System.err.println(e.getMessage());
                row5 = null;
    }
			
			

 



/**
 * [tFileInputXML_2 begin ] stop
 */
	
	/**
	 * [tFileInputXML_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";

	

 


	tos_count_tFileInputXML_2++;

/**
 * [tFileInputXML_2 main ] stop
 */
	
	/**
	 * [tFileInputXML_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";

	

 



/**
 * [tFileInputXML_2 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

denominator = null;


// # Output table : 'denominator'
denominator_tmp.uuid = row5.uuid;
denominator_tmp.denominator = "1:" + row5.denominator;
denominator = denominator_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "denominator"
if(denominator != null) { 



	
	/**
	 * [tAggregateRow_2_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	

			//denominator
			//denominator


			
				if(execStat){
					runStat.updateStatOnConnection("denominator"+iterateId,1, 1);
				} 
			

		
	
operation_finder_tAggregateRow_2.uuid = denominator.uuid;
			

	operation_finder_tAggregateRow_2.hashCodeDirty = true;
	
	operation_result_tAggregateRow_2 = hash_tAggregateRow_2.get(operation_finder_tAggregateRow_2);

	

	if(operation_result_tAggregateRow_2 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();

		operation_result_tAggregateRow_2.uuid = operation_finder_tAggregateRow_2.uuid;
				
		
		

		hash_tAggregateRow_2.put(operation_result_tAggregateRow_2, operation_result_tAggregateRow_2);
	
	} // G_OutMain_AggR_001


	
				if(operation_result_tAggregateRow_2.denominator_list.length() > 0) {
					operation_result_tAggregateRow_2.denominator_list.append("|");
				} 
				else if(operation_result_tAggregateRow_2.denominator_list_firstEmpty){
					operation_result_tAggregateRow_2.denominator_list.append("|");
				}
					if(operation_result_tAggregateRow_2.denominator_list != null) {
						if(operation_result_tAggregateRow_2.denominator_list_firstEmpty==false && ("").equals(String.valueOf(denominator.denominator))){
							operation_result_tAggregateRow_2.denominator_list_firstEmpty = true;
						}
						operation_result_tAggregateRow_2.denominator_list = operation_result_tAggregateRow_2.denominator_list.append(String.valueOf(denominator.denominator));
					}
				


 


	tos_count_tAggregateRow_2_AGGOUT++;

/**
 * [tAggregateRow_2_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	

 



/**
 * [tAggregateRow_2_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	

 



/**
 * [tAggregateRow_2_AGGOUT process_data_end ] stop
 */

} // End of branch "denominator"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tFileInputXML_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";

	

 



/**
 * [tFileInputXML_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";

	


}
	}
	globalMap.put("tFileInputXML_2_NB_LINE",nb_line_tFileInputXML_2);

	
 

ok_Hash.put("tFileInputXML_2", true);
end_Hash.put("tFileInputXML_2", System.currentTimeMillis());




/**
 * [tFileInputXML_2 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("denominator"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAggregateRow_2_AGGOUT", true);
end_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_2_AGGOUT end ] stop
 */


	
	/**
	 * [tAdvancedHash_row6 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row6", false);
		start_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row6 = 0;
		

			   		// connection name:row6
			   		// source node:tAggregateRow_2_AGGIN - inputs:(OnRowsEnd) outputs:(row6,row6) | target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
			   		// linked node: tMap_2 - inputs:(row2,row44,row6,status,row40,row8,row13,row19,row22,row23,row34,row45,row27,row15) outputs:(map)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row6Struct>getLookup(matchingModeEnum_row6);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row6 begin ] stop
 */



	
	/**
	 * [tAggregateRow_2_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_2_AGGIN", false);
		start_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	
		int tos_count_tAggregateRow_2_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_2> values_tAggregateRow_2 = hash_tAggregateRow_2.values();

globalMap.put("tAggregateRow_2_NB_LINE", values_tAggregateRow_2.size());

for(AggOperationStruct_tAggregateRow_2 aggregated_row_tAggregateRow_2 : values_tAggregateRow_2) { // G_AggR_600



 



/**
 * [tAggregateRow_2_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	

            				    row6.uuid = aggregated_row_tAggregateRow_2.uuid;
            				    
    								row6.denominator = aggregated_row_tAggregateRow_2.denominator_list.toString();
	    						

 


	tos_count_tAggregateRow_2_AGGIN++;

/**
 * [tAggregateRow_2_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	

 



/**
 * [tAggregateRow_2_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

			//row6
			//row6


			
				if(execStat){
					runStat.updateStatOnConnection("row6"+iterateId,1, 1);
				} 
			

		


			   
			   

					row6Struct row6_HashRow = new row6Struct();
		   	   	   
				
				row6_HashRow.uuid = row6.uuid;
				
				row6_HashRow.denominator = row6.denominator;
				
			tHash_Lookup_row6.put(row6_HashRow);
			
            




 


	tos_count_tAdvancedHash_row6++;

/**
 * [tAdvancedHash_row6 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_2_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	

 



/**
 * [tAggregateRow_2_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_2_AGGIN", true);
end_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_2_AGGIN end ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

tHash_Lookup_row6.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row6"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row6", true);
end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());




/**
 * [tAdvancedHash_row6 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_2_AGGIN"
							globalMap.remove("tAggregateRow_2");
						
				try{
					
	
	/**
	 * [tFileInputXML_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";

	

 



/**
 * [tFileInputXML_2 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	

 



/**
 * [tAggregateRow_2_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	

 



/**
 * [tAggregateRow_2_AGGIN finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 1);
	}
	


public static class statusStruct implements routines.system.IPersistableComparableLookupRow<statusStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final statusStruct other = (statusStruct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(statusStruct other) {

		other.uuid = this.uuid;
	            other.status = this.status;
	            
	}

	public void copyKeysDataTo(statusStruct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.status = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.status, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",status="+status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(statusStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row46Struct implements routines.system.IPersistableRow<row46Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public routines.system.Document xmldoc;

				public routines.system.Document getXmldoc () {
					return this.xmldoc;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
						this.xmldoc = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.xmldoc);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("xmldoc="+String.valueOf(xmldoc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row46Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputXML_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row46Struct row46 = new row46Struct();
statusStruct status = new statusStruct();




	
	/**
	 * [tXMLMap_10_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_10_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_10_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_10";
	
	currentComponent="tXMLMap_10_TXMLMAP_OUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row46" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tXMLMap_10_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_10_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_10_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_10_TXMLMAP_OUT__Struct Var__tXMLMap_10_TXMLMAP_OUT = new Var__tXMLMap_10_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
statusStruct status_tmp = new statusStruct();
statusStruct status_save = null;
//the aggregate variable
statusStruct status_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_10 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_10",allOutsForAggregate_tXMLMap_10);
// ###############################
class TreeNode_API_tXMLMap_10_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
	java.util.Date get_Date(String xpath, String pattern){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Date(content, pattern);
	}
	Integer get_Integer(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Integer(content);
	}
	Character get_Character(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Character(content);
	}
	Float get_Float(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Float(content);
	}
	Double get_Double(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Double(content);
	}
	Boolean get_Boolean(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Boolean(content);
	}
}
			TreeNode_API_tXMLMap_10_TXMLMAP_OUT treeNodeAPI_tXMLMap_10_TXMLMAP_OUT = new TreeNode_API_tXMLMap_10_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_10_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_10_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_10_TXMLMAP_OUT xml_api_tXMLMap_10_TXMLMAP_OUT = new XML_API_tXMLMap_10_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_10_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            
 



/**
 * [tXMLMap_10_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tFileInputXML_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_15", false);
		start_Hash.put("tFileInputXML_15", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_15";

	
		int tos_count_tFileInputXML_15 = 0;
		

	

int nb_line_tFileInputXML_15 = 0;

	String os_tFileInputXML_15 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_15=false;
	if(os_tFileInputXML_15.indexOf("windows") > -1 || os_tFileInputXML_15.indexOf("nt") > -1){
		isWindows_tFileInputXML_15=true;
	}
class NameSpaceTool_tFileInputXML_15 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_15{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_15 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_15 = null;
try {
	filename_tFileInputXML_15 = System.getProperty("java.io.tmpdir") + "/sdiDump/tmp/out.xml";
} catch(java.lang.Exception e) {
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_15 != null && filename_tFileInputXML_15 instanceof String && filename_tFileInputXML_15.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_15){
		filename_tFileInputXML_15 = filename_tFileInputXML_15.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_15 = true;
org.dom4j.Document doc_tFileInputXML_15 = null;
java.io.Closeable toClose_tFileInputXML_15 = null;
try{
	if(filename_tFileInputXML_15 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_15 = (java.io.InputStream)filename_tFileInputXML_15;
		toClose_tFileInputXML_15 = inputStream_tFileInputXML_15;
		doc_tFileInputXML_15 = reader_tFileInputXML_15.read(inputStream_tFileInputXML_15);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_15 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_15)),"ISO-8859-15");
		toClose_tFileInputXML_15 = unicodeReader_tFileInputXML_15;
		org.xml.sax.InputSource in_tFileInputXML_15= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_15);
		doc_tFileInputXML_15 = reader_tFileInputXML_15.read(in_tFileInputXML_15);
	}
}catch(java.lang.Exception e){
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_15 = false;
} finally {
	if(toClose_tFileInputXML_15!=null) {
		toClose_tFileInputXML_15.close();
	}
}
if(isValidFile_tFileInputXML_15){
NameSpaceTool_tFileInputXML_15 nsTool_tFileInputXML_15 = new NameSpaceTool_tFileInputXML_15();
nsTool_tFileInputXML_15.countNSMap(doc_tFileInputXML_15.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_15 = nsTool_tFileInputXML_15.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_15 = doc_tFileInputXML_15.createXPath(nsTool_tFileInputXML_15.addDefaultNSPrefix("/csw:GetRecordsResponse"));  
x_tFileInputXML_15.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_15); 

java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_15 = (java.util.List<org.dom4j.tree.AbstractNode>)x_tFileInputXML_15.selectNodes(doc_tFileInputXML_15);	
XML_API_tFileInputXML_15 xml_api_tFileInputXML_15 = new XML_API_tFileInputXML_15();
String str_tFileInputXML_15 = "";
org.dom4j.Node node_tFileInputXML_15 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_15=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_15{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_15 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix(".","/csw:GetRecordsResponse"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_15 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_15 xPathUtil_tFileInputXML_15 = new XPathUtil_tFileInputXML_15();
	xPathUtil_tFileInputXML_15.initXPaths(xpaths_tFileInputXML_15, nsTool_tFileInputXML_15, xmlNameSpaceMap_tFileInputXML_15);
for (org.dom4j.tree.AbstractNode temp_tFileInputXML_15: nodeList_tFileInputXML_15) {
		nb_line_tFileInputXML_15++;
		
	row46 = null;			
	boolean whetherReject_tFileInputXML_15 = false;
	row46 = new row46Struct();
	try{
    Object obj0_tFileInputXML_15 = xpaths_tFileInputXML_15.get(0).evaluate(temp_tFileInputXML_15);
    if(obj0_tFileInputXML_15 == null) {
    	node_tFileInputXML_15 = null;
		str_tFileInputXML_15 = null;
    	
    } else if(obj0_tFileInputXML_15 instanceof org.dom4j.Node) {
    	node_tFileInputXML_15 = (org.dom4j.Node)obj0_tFileInputXML_15;
		str_tFileInputXML_15 = node_tFileInputXML_15.asXML();
    } else if(obj0_tFileInputXML_15 instanceof String || obj0_tFileInputXML_15 instanceof Number){
    	node_tFileInputXML_15 = temp_tFileInputXML_15;
    	str_tFileInputXML_15 = String.valueOf(obj0_tFileInputXML_15);
    } else if(obj0_tFileInputXML_15 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_15 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_15;
    	node_tFileInputXML_15 = nodes_tFileInputXML_15.size()>0 ? nodes_tFileInputXML_15.get(0) : null;
		str_tFileInputXML_15 = node_tFileInputXML_15==null?null:node_tFileInputXML_15.asXML();
	}
								row46.xmldoc = ParserUtils.parseTo_Document(str_tFileInputXML_15,false,"ISO-8859-15"); 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_15 = true;
                System.err.println(e.getMessage());
                row46 = null;
    }
			
			

 



/**
 * [tFileInputXML_15 begin ] stop
 */
	
	/**
	 * [tFileInputXML_15 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_15";

	

 


	tos_count_tFileInputXML_15++;

/**
 * [tFileInputXML_15 main ] stop
 */
	
	/**
	 * [tFileInputXML_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_15";

	

 



/**
 * [tFileInputXML_15 process_data_begin ] stop
 */
// Start of branch "row46"
if(row46 != null) { 



	
	/**
	 * [tXMLMap_10_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_10";
	
	currentComponent="tXMLMap_10_TXMLMAP_OUT";

	

			//row46
			//row46


			
				if(execStat){
					runStat.updateStatOnConnection("row46"+iterateId,1, 1);
				} 
			

		

	boolean rejectedInnerJoin_tXMLMap_10_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_10_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_10_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_10_TXMLMAP_OUT = false;
	  
	
			

		
		
				//init document to flat tool
				routines.system.DocumentToFlat docToFlat_tXMLMap_10_TXMLMAP_OUT = new routines.system.DocumentToFlat();
				docToFlat_tXMLMap_10_TXMLMAP_OUT.setOriginalLoop("/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:status/gmd:MD_ProgressCode");
				docToFlat_tXMLMap_10_TXMLMAP_OUT.setIsOptional(false);
				if(row46.xmldoc == null || row46.xmldoc.getDocument() == null) {
					throw new RuntimeException("row46.xmldoc can't be empty");
				}
				org.dom4j.Document doc_tXMLMap_10_TXMLMAP_OUT = row46.xmldoc.getDocument();
				docToFlat_tXMLMap_10_TXMLMAP_OUT.setDoc(doc_tXMLMap_10_TXMLMAP_OUT);
				docToFlat_tXMLMap_10_TXMLMAP_OUT.setDefineNS(true);
				docToFlat_tXMLMap_10_TXMLMAP_OUT.setNamespaceTool(nsTool_tXMLMap_10_TXMLMAP_OUT);
				
					java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_10_TXMLMAP_OUT = new java.util.HashMap<String,String>();
					xmlNameSpaceMap_tXMLMap_10_TXMLMAP_OUT.put("gco","http://www.isotc211.org/2005/gco");xmlNameSpaceMap_tXMLMap_10_TXMLMAP_OUT.put("csw","http://www.opengis.net/cat/csw/2.0.2");xmlNameSpaceMap_tXMLMap_10_TXMLMAP_OUT.put("gml","http://www.opengis.net/gml");xmlNameSpaceMap_tXMLMap_10_TXMLMAP_OUT.put("gmd","http://www.isotc211.org/2005/gmd");
				
				docToFlat_tXMLMap_10_TXMLMAP_OUT.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_10_TXMLMAP_OUT);
				
				String[] absolutePathMappings_tXMLMap_10_TXMLMAP_OUT = new String[2];
				String[] relativePathMappings_tXMLMap_10_TXMLMAP_OUT = new String[2];
				
				absolutePathMappings_tXMLMap_10_TXMLMAP_OUT[0] = "row46.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:fileIdentifier/gco:CharacterString";
				relativePathMappings_tXMLMap_10_TXMLMAP_OUT[0] = "../../../../gmd:fileIdentifier/gco:CharacterString";
				
				absolutePathMappings_tXMLMap_10_TXMLMAP_OUT[1] = "row46.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:status/gmd:MD_ProgressCode/@codeListValue";
				relativePathMappings_tXMLMap_10_TXMLMAP_OUT[1] = "@codeListValue";
				
				docToFlat_tXMLMap_10_TXMLMAP_OUT.setAbsolutePathMappings(absolutePathMappings_tXMLMap_10_TXMLMAP_OUT);
				docToFlat_tXMLMap_10_TXMLMAP_OUT.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_10_TXMLMAP_OUT);
				//generate document to flat data
				docToFlat_tXMLMap_10_TXMLMAP_OUT.flat();
				//get flat data
				java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_10_TXMLMAP_OUT = docToFlat_tXMLMap_10_TXMLMAP_OUT.getResultSet();
				
				for (java.util.Map<String,String> oneRow_tXMLMap_10_TXMLMAP_OUT: resultSet_tXMLMap_10_TXMLMAP_OUT) { // G_TXM_M_001
					nb_line_tXMLMap_10_TXMLMAP_OUT++;
			    	rejectedInnerJoin_tXMLMap_10_TXMLMAP_OUT = false;
			    	rejectedDocInnerJoin_tXMLMap_10_TXMLMAP_OUT = false;
					mainRowRejected_tXMLMap_10_TXMLMAP_OUT=false;
				    isMatchDocRowtXMLMap_10_TXMLMAP_OUT = false;
					
			    	treeNodeAPI_tXMLMap_10_TXMLMAP_OUT.clear();
			    	for(java.util.Map.Entry<String, String> entry_tXMLMap_10_TXMLMAP_OUT : oneRow_tXMLMap_10_TXMLMAP_OUT.entrySet()) {
						treeNodeAPI_tXMLMap_10_TXMLMAP_OUT.put(entry_tXMLMap_10_TXMLMAP_OUT.getKey(),entry_tXMLMap_10_TXMLMAP_OUT.getValue());
					}
					


			
{ // start of Var scope

	// ###############################
	// # Vars tables

Var__tXMLMap_10_TXMLMAP_OUT__Struct Var = Var__tXMLMap_10_TXMLMAP_OUT;
		// ###############################
		// # Output tables

status = null;


// # Output table : 'status'

status_tmp = new statusStruct();
status_tmp.uuid = treeNodeAPI_tXMLMap_10_TXMLMAP_OUT.get_String("row46.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:fileIdentifier/gco:CharacterString");
status_tmp.status = treeNodeAPI_tXMLMap_10_TXMLMAP_OUT.get_String("row46.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:status/gmd:MD_ProgressCode/@codeListValue");allOutsForAggregate_tXMLMap_10.add(status_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_10_TXMLMAP_OUT = false;


		}//G_TXM_M_001 close
	

 


	tos_count_tXMLMap_10_TXMLMAP_OUT++;

/**
 * [tXMLMap_10_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_10_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_10";
	
	currentComponent="tXMLMap_10_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_10_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_10_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_10";
	
	currentComponent="tXMLMap_10_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_10_TXMLMAP_OUT process_data_end ] stop
 */

} // End of branch "row46"




	
	/**
	 * [tFileInputXML_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_15";

	

 



/**
 * [tFileInputXML_15 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_15 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_15";

	


}
	}
	globalMap.put("tFileInputXML_15_NB_LINE",nb_line_tFileInputXML_15);

	
 

ok_Hash.put("tFileInputXML_15", true);
end_Hash.put("tFileInputXML_15", System.currentTimeMillis());




/**
 * [tFileInputXML_15 end ] stop
 */

	
	/**
	 * [tXMLMap_10_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_10";
	
	currentComponent="tXMLMap_10_TXMLMAP_OUT";

	




			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row46"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tXMLMap_10_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_10_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_10_TXMLMAP_OUT end ] stop
 */


	
	/**
	 * [tAdvancedHash_status begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_status", false);
		start_Hash.put("tAdvancedHash_status", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_status";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("status" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_status = 0;
		

			   		// connection name:status
			   		// source node:tXMLMap_10_TXMLMAP_IN - inputs:(OnRowsEnd) outputs:(status,status) | target node:tAdvancedHash_status - inputs:(status) outputs:()
			   		// linked node: tMap_2 - inputs:(row2,row44,row6,status,row40,row8,row13,row19,row22,row23,row34,row45,row27,row15) outputs:(map)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_status = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<statusStruct> tHash_Lookup_status =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<statusStruct>getLookup(matchingModeEnum_status);
	   						   
		   	   	   globalMap.put("tHash_Lookup_status", tHash_Lookup_status);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_status begin ] stop
 */



	
	/**
	 * [tXMLMap_10_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_10_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_10_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_10";
	
	currentComponent="tXMLMap_10_TXMLMAP_IN";

	
		int tos_count_tXMLMap_10_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_10 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_10");
for(Object  row_out_tXMLMap_10_TXMLMAP_IN : outs_tXMLMap_10) {//TD512
 



/**
 * [tXMLMap_10_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_10_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_10";
	
	currentComponent="tXMLMap_10_TXMLMAP_IN";

	

	status = null;
	if(row_out_tXMLMap_10_TXMLMAP_IN!=null && row_out_tXMLMap_10_TXMLMAP_IN instanceof statusStruct) {
		status = (statusStruct)row_out_tXMLMap_10_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_10_TXMLMAP_IN++;

/**
 * [tXMLMap_10_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_10_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_10";
	
	currentComponent="tXMLMap_10_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_10_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "status"
if(status != null) { 



	
	/**
	 * [tAdvancedHash_status main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_status";

	

			//status
			//status


			
				if(execStat){
					runStat.updateStatOnConnection("status"+iterateId,1, 1);
				} 
			

		


			   
			   

					statusStruct status_HashRow = new statusStruct();
		   	   	   
				
				status_HashRow.uuid = status.uuid;
				
				status_HashRow.status = status.status;
				
			tHash_Lookup_status.put(status_HashRow);
			
            




 


	tos_count_tAdvancedHash_status++;

/**
 * [tAdvancedHash_status main ] stop
 */
	
	/**
	 * [tAdvancedHash_status process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_status";

	

 



/**
 * [tAdvancedHash_status process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_status process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_status";

	

 



/**
 * [tAdvancedHash_status process_data_end ] stop
 */

} // End of branch "status"




	
	/**
	 * [tXMLMap_10_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_10";
	
	currentComponent="tXMLMap_10_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_10_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_10_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_10";
	
	currentComponent="tXMLMap_10_TXMLMAP_IN";

	

}//TD512
 

ok_Hash.put("tXMLMap_10_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_10_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_10_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tAdvancedHash_status end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_status";

	

tHash_Lookup_status.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("status"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_status", true);
end_Hash.put("tAdvancedHash_status", System.currentTimeMillis());




/**
 * [tAdvancedHash_status end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_15 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_15";

	

 



/**
 * [tFileInputXML_15 finally ] stop
 */

	
	/**
	 * [tXMLMap_10_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_10";
	
	currentComponent="tXMLMap_10_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_10_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_10_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_10";
	
	currentComponent="tXMLMap_10_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_10_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tAdvancedHash_status finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_status";

	

 



/**
 * [tAdvancedHash_status finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_15_SUBPROCESS_STATE", 1);
	}
	


public static class row40Struct implements routines.system.IPersistableComparableLookupRow<row40Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String keyword;

				public String getKeyword () {
					return this.keyword;
				}
				
			    public String codeListValue;

				public String getCodeListValue () {
					return this.codeListValue;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row40Struct other = (row40Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row40Struct other) {

		other.uuid = this.uuid;
	            other.keyword = this.keyword;
	            other.codeListValue = this.codeListValue;
	            
	}

	public void copyKeysDataTo(row40Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.keyword = readString(dis,ois);
					
						this.codeListValue = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.keyword, dos, oos);
					
						writeString(this.codeListValue, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",keyword="+keyword);
		sb.append(",codeListValue="+codeListValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row40Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_9 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_9> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String keyword;

				public String getKeyword () {
					return this.keyword;
				}
				
			    public String codeListValue;

				public String getCodeListValue () {
					return this.codeListValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.keyword = readString(dis);
					
					this.codeListValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.keyword,dos);
					
					// String
				
						writeString(this.codeListValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",keyword="+keyword);
		sb.append(",codeListValue="+codeListValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_9 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row39Struct implements routines.system.IPersistableRow<row39Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String keyword;

				public String getKeyword () {
					return this.keyword;
				}
				
			    public String codeListValue;

				public String getCodeListValue () {
					return this.codeListValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.keyword = readString(dis);
					
					this.codeListValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.keyword,dos);
					
					// String
				
						writeString(this.codeListValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",keyword="+keyword);
		sb.append(",codeListValue="+codeListValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row39Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class mappStruct implements routines.system.IPersistableRow<mappStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String keyword;

				public String getKeyword () {
					return this.keyword;
				}
				
			    public String codeListValue;

				public String getCodeListValue () {
					return this.codeListValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.keyword = readString(dis);
					
					this.codeListValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.keyword,dos);
					
					// String
				
						writeString(this.codeListValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",keyword="+keyword);
		sb.append(",codeListValue="+codeListValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(mappStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String keyword;

				public String getKeyword () {
					return this.keyword;
				}
				
			    public String codeListValue;

				public String getCodeListValue () {
					return this.codeListValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.keyword = readString(dis);
					
					this.codeListValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.keyword,dos);
					
					// String
				
						writeString(this.codeListValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",keyword="+keyword);
		sb.append(",codeListValue="+codeListValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfmapped3_0Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfmapped3_0Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String keyword;

				public String getKeyword () {
					return this.keyword;
				}
				
			    public String codeListValue;

				public String getCodeListValue () {
					return this.codeListValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.keyword = readString(dis);
					
					this.codeListValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.keyword,dos);
					
					// String
				
						writeString(this.codeListValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",keyword="+keyword);
		sb.append(",codeListValue="+codeListValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfmapped3_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row36Struct implements routines.system.IPersistableRow<row36Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public routines.system.Document xmldoc;

				public routines.system.Document getXmldoc () {
					return this.xmldoc;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
						this.xmldoc = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.xmldoc);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("xmldoc="+String.valueOf(xmldoc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row36Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputXML_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row36Struct row36 = new row36Struct();
copyOfcopyOfcopyOfmapped3_0Struct copyOfcopyOfcopyOfmapped3_0 = new copyOfcopyOfcopyOfmapped3_0Struct();
row30Struct row30 = new row30Struct();
mappStruct mapp = new mappStruct();
row39Struct row39 = new row39Struct();
row40Struct row40 = new row40Struct();




	
	/**
	 * [tXMLMap_8_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_8_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_8_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_8";
	
	currentComponent="tXMLMap_8_TXMLMAP_OUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row36" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tXMLMap_8_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_8_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_8_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_8_TXMLMAP_OUT__Struct Var__tXMLMap_8_TXMLMAP_OUT = new Var__tXMLMap_8_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfmapped3_0Struct copyOfcopyOfcopyOfmapped3_0_tmp = new copyOfcopyOfcopyOfmapped3_0Struct();
copyOfcopyOfcopyOfmapped3_0Struct copyOfcopyOfcopyOfmapped3_0_save = null;
//the aggregate variable
copyOfcopyOfcopyOfmapped3_0Struct copyOfcopyOfcopyOfmapped3_0_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_8 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_8",allOutsForAggregate_tXMLMap_8);
// ###############################
class TreeNode_API_tXMLMap_8_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
	java.util.Date get_Date(String xpath, String pattern){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Date(content, pattern);
	}
	Integer get_Integer(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Integer(content);
	}
	Character get_Character(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Character(content);
	}
	Float get_Float(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Float(content);
	}
	Double get_Double(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Double(content);
	}
	Boolean get_Boolean(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Boolean(content);
	}
}
			TreeNode_API_tXMLMap_8_TXMLMAP_OUT treeNodeAPI_tXMLMap_8_TXMLMAP_OUT = new TreeNode_API_tXMLMap_8_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_8_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_8_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_8_TXMLMAP_OUT xml_api_tXMLMap_8_TXMLMAP_OUT = new XML_API_tXMLMap_8_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_8_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            
 



/**
 * [tXMLMap_8_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tFileInputXML_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_13", false);
		start_Hash.put("tFileInputXML_13", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_13";

	
		int tos_count_tFileInputXML_13 = 0;
		

	

int nb_line_tFileInputXML_13 = 0;

	String os_tFileInputXML_13 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_13=false;
	if(os_tFileInputXML_13.indexOf("windows") > -1 || os_tFileInputXML_13.indexOf("nt") > -1){
		isWindows_tFileInputXML_13=true;
	}
class NameSpaceTool_tFileInputXML_13 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_13{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_13 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_13 = null;
try {
	filename_tFileInputXML_13 = System.getProperty("java.io.tmpdir") + "/sdiDump/tmp/out.xml";
} catch(java.lang.Exception e) {
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_13 != null && filename_tFileInputXML_13 instanceof String && filename_tFileInputXML_13.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_13){
		filename_tFileInputXML_13 = filename_tFileInputXML_13.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_13 = true;
org.dom4j.Document doc_tFileInputXML_13 = null;
java.io.Closeable toClose_tFileInputXML_13 = null;
try{
	if(filename_tFileInputXML_13 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_13 = (java.io.InputStream)filename_tFileInputXML_13;
		toClose_tFileInputXML_13 = inputStream_tFileInputXML_13;
		doc_tFileInputXML_13 = reader_tFileInputXML_13.read(inputStream_tFileInputXML_13);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_13 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_13)),"ISO-8859-15");
		toClose_tFileInputXML_13 = unicodeReader_tFileInputXML_13;
		org.xml.sax.InputSource in_tFileInputXML_13= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_13);
		doc_tFileInputXML_13 = reader_tFileInputXML_13.read(in_tFileInputXML_13);
	}
}catch(java.lang.Exception e){
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_13 = false;
} finally {
	if(toClose_tFileInputXML_13!=null) {
		toClose_tFileInputXML_13.close();
	}
}
if(isValidFile_tFileInputXML_13){
NameSpaceTool_tFileInputXML_13 nsTool_tFileInputXML_13 = new NameSpaceTool_tFileInputXML_13();
nsTool_tFileInputXML_13.countNSMap(doc_tFileInputXML_13.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_13 = nsTool_tFileInputXML_13.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_13 = doc_tFileInputXML_13.createXPath(nsTool_tFileInputXML_13.addDefaultNSPrefix("/csw:GetRecordsResponse"));  
x_tFileInputXML_13.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_13); 

java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_13 = (java.util.List<org.dom4j.tree.AbstractNode>)x_tFileInputXML_13.selectNodes(doc_tFileInputXML_13);	
XML_API_tFileInputXML_13 xml_api_tFileInputXML_13 = new XML_API_tFileInputXML_13();
String str_tFileInputXML_13 = "";
org.dom4j.Node node_tFileInputXML_13 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_13=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_13{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_13 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix(".","/csw:GetRecordsResponse"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_13 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_13 xPathUtil_tFileInputXML_13 = new XPathUtil_tFileInputXML_13();
	xPathUtil_tFileInputXML_13.initXPaths(xpaths_tFileInputXML_13, nsTool_tFileInputXML_13, xmlNameSpaceMap_tFileInputXML_13);
for (org.dom4j.tree.AbstractNode temp_tFileInputXML_13: nodeList_tFileInputXML_13) {
		nb_line_tFileInputXML_13++;
		
	row36 = null;			
	boolean whetherReject_tFileInputXML_13 = false;
	row36 = new row36Struct();
	try{
    Object obj0_tFileInputXML_13 = xpaths_tFileInputXML_13.get(0).evaluate(temp_tFileInputXML_13);
    if(obj0_tFileInputXML_13 == null) {
    	node_tFileInputXML_13 = null;
		str_tFileInputXML_13 = null;
    	
    } else if(obj0_tFileInputXML_13 instanceof org.dom4j.Node) {
    	node_tFileInputXML_13 = (org.dom4j.Node)obj0_tFileInputXML_13;
		str_tFileInputXML_13 = node_tFileInputXML_13.asXML();
    } else if(obj0_tFileInputXML_13 instanceof String || obj0_tFileInputXML_13 instanceof Number){
    	node_tFileInputXML_13 = temp_tFileInputXML_13;
    	str_tFileInputXML_13 = String.valueOf(obj0_tFileInputXML_13);
    } else if(obj0_tFileInputXML_13 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_13 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_13;
    	node_tFileInputXML_13 = nodes_tFileInputXML_13.size()>0 ? nodes_tFileInputXML_13.get(0) : null;
		str_tFileInputXML_13 = node_tFileInputXML_13==null?null:node_tFileInputXML_13.asXML();
	}
								row36.xmldoc = ParserUtils.parseTo_Document(str_tFileInputXML_13,false,"ISO-8859-15"); 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_13 = true;
                System.err.println(e.getMessage());
                row36 = null;
    }
			
			

 



/**
 * [tFileInputXML_13 begin ] stop
 */
	
	/**
	 * [tFileInputXML_13 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_13";

	

 


	tos_count_tFileInputXML_13++;

/**
 * [tFileInputXML_13 main ] stop
 */
	
	/**
	 * [tFileInputXML_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_13";

	

 



/**
 * [tFileInputXML_13 process_data_begin ] stop
 */
// Start of branch "row36"
if(row36 != null) { 



	
	/**
	 * [tXMLMap_8_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_8";
	
	currentComponent="tXMLMap_8_TXMLMAP_OUT";

	

			//row36
			//row36


			
				if(execStat){
					runStat.updateStatOnConnection("row36"+iterateId,1, 1);
				} 
			

		

	boolean rejectedInnerJoin_tXMLMap_8_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_8_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_8_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_8_TXMLMAP_OUT = false;
	  
	
			

					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_8_TXMLMAP_OUT_0 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_8_TXMLMAP_OUT_0.setOriginalLoop("/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:keyword");
					docToFlat_tXMLMap_8_TXMLMAP_OUT_0.setIsOptional(false);
					if(row36.xmldoc == null 
						|| row36.xmldoc.getDocument() == null) {
						throw new RuntimeException("row36.xmldoc can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_8_TXMLMAP_OUT_0 = row36.xmldoc.getDocument();
					docToFlat_tXMLMap_8_TXMLMAP_OUT_0.setDoc(doc_tXMLMap_8_TXMLMAP_OUT_0);
					docToFlat_tXMLMap_8_TXMLMAP_OUT_0.setDefineNS(true);
					docToFlat_tXMLMap_8_TXMLMAP_OUT_0.setNamespaceTool(nsTool_tXMLMap_8_TXMLMAP_OUT);
					
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_8_TXMLMAP_OUT_0 = new java.util.HashMap<String,String>();
						xmlNameSpaceMap_tXMLMap_8_TXMLMAP_OUT_0.put("gco","http://www.isotc211.org/2005/gco");xmlNameSpaceMap_tXMLMap_8_TXMLMAP_OUT_0.put("gmx","http://www.isotc211.org/2005/gmx");xmlNameSpaceMap_tXMLMap_8_TXMLMAP_OUT_0.put("csw","http://www.opengis.net/cat/csw/2.0.2");xmlNameSpaceMap_tXMLMap_8_TXMLMAP_OUT_0.put("gml","http://www.opengis.net/gml");xmlNameSpaceMap_tXMLMap_8_TXMLMAP_OUT_0.put("gmd","http://www.isotc211.org/2005/gmd");
					
					docToFlat_tXMLMap_8_TXMLMAP_OUT_0.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_8_TXMLMAP_OUT_0);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_8_TXMLMAP_OUT_0 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_8_TXMLMAP_OUT_0 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_8_TXMLMAP_OUT_0.add("row36.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:thesaurusName/gmd:CI_Citation/gmd:title/gco:CharacterString");
					relativePathMappingsList_tXMLMap_8_TXMLMAP_OUT_0.add("../gmd:thesaurusName/gmd:CI_Citation/gmd:title/gco:CharacterString");
					
					absolutePathMappingsList_tXMLMap_8_TXMLMAP_OUT_0.add("row36.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:keyword/gco:CharacterString");
					relativePathMappingsList_tXMLMap_8_TXMLMAP_OUT_0.add("gco:CharacterString");
					
					absolutePathMappingsList_tXMLMap_8_TXMLMAP_OUT_0.add("row36.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:fileIdentifier/gco:CharacterString");
					relativePathMappingsList_tXMLMap_8_TXMLMAP_OUT_0.add("../../../../../gmd:fileIdentifier/gco:CharacterString");
					
					String[] absolutePathMappings_tXMLMap_8_TXMLMAP_OUT_0 = absolutePathMappingsList_tXMLMap_8_TXMLMAP_OUT_0.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_8_TXMLMAP_OUT_0 = relativePathMappingsList_tXMLMap_8_TXMLMAP_OUT_0.toArray(new String[0]);
					
					docToFlat_tXMLMap_8_TXMLMAP_OUT_0.setAbsolutePathMappings(absolutePathMappings_tXMLMap_8_TXMLMAP_OUT_0);
					docToFlat_tXMLMap_8_TXMLMAP_OUT_0.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_8_TXMLMAP_OUT_0);
					//generate document to flat data
					docToFlat_tXMLMap_8_TXMLMAP_OUT_0.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_8_TXMLMAP_OUT_0 = docToFlat_tXMLMap_8_TXMLMAP_OUT_0.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_8_TXMLMAP_OUT_0: resultSet_tXMLMap_8_TXMLMAP_OUT_0) { // G_TXM_M_001
						nb_line_tXMLMap_8_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_8_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_8_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_8_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_8_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_8_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_8_TXMLMAP_OUT_0 : oneRow_tXMLMap_8_TXMLMAP_OUT_0.entrySet()) {
							treeNodeAPI_tXMLMap_8_TXMLMAP_OUT.put(entry_tXMLMap_8_TXMLMAP_OUT_0.getKey(),entry_tXMLMap_8_TXMLMAP_OUT_0.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_8_TXMLMAP_OUT__Struct Var = Var__tXMLMap_8_TXMLMAP_OUT;
		// ###############################
		// # Output table

copyOfcopyOfcopyOfmapped3_0 = null;


// # Output table : 'copyOfcopyOfcopyOfmapped3_0'

copyOfcopyOfcopyOfmapped3_0_tmp = new copyOfcopyOfcopyOfmapped3_0Struct();
copyOfcopyOfcopyOfmapped3_0_tmp.uuid = treeNodeAPI_tXMLMap_8_TXMLMAP_OUT.get_String("row36.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:fileIdentifier/gco:CharacterString");
copyOfcopyOfcopyOfmapped3_0_tmp.keyword = treeNodeAPI_tXMLMap_8_TXMLMAP_OUT.get_String("row36.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:keyword/gco:CharacterString");
copyOfcopyOfcopyOfmapped3_0_tmp.codeListValue =  treeNodeAPI_tXMLMap_8_TXMLMAP_OUT.get_String("row36.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:thesaurusName/gmd:CI_Citation/gmd:title/gco:CharacterString");allOutsForAggregate_tXMLMap_8.add(copyOfcopyOfcopyOfmapped3_0_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_8_TXMLMAP_OUT = false;

				}//close G_TXM_M_001

 


	tos_count_tXMLMap_8_TXMLMAP_OUT++;

/**
 * [tXMLMap_8_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_8_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_8";
	
	currentComponent="tXMLMap_8_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_8_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_8_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_8";
	
	currentComponent="tXMLMap_8_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_8_TXMLMAP_OUT process_data_end ] stop
 */

} // End of branch "row36"




	
	/**
	 * [tFileInputXML_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_13";

	

 



/**
 * [tFileInputXML_13 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_13 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_13";

	


}
	}
	globalMap.put("tFileInputXML_13_NB_LINE",nb_line_tFileInputXML_13);

	
 

ok_Hash.put("tFileInputXML_13", true);
end_Hash.put("tFileInputXML_13", System.currentTimeMillis());




/**
 * [tFileInputXML_13 end ] stop
 */

	
	/**
	 * [tXMLMap_8_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_8";
	
	currentComponent="tXMLMap_8_TXMLMAP_OUT";

	




			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row36"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tXMLMap_8_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_8_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_8_TXMLMAP_OUT end ] stop
 */





	
	/**
	 * [tAggregateRow_9_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_9_AGGOUT", false);
		start_Hash.put("tAggregateRow_9_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_9";
	
	currentComponent="tAggregateRow_9_AGGOUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row39" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAggregateRow_9_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_9 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_9 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_9 utilClass_tAggregateRow_9 = new UtilClass_tAggregateRow_9();

	

	class AggOperationStruct_tAggregateRow_9 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String uuid;StringBuilder keyword_list = new StringBuilder();
           			boolean keyword_list_firstEmpty = false;
           			StringBuilder codeListValue_list = new StringBuilder();
           			boolean codeListValue_list_firstEmpty = false;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_9 other = (AggOperationStruct_tAggregateRow_9) obj;
			
							if (this.uuid == null) {
								if (other.uuid != null) 
									return false;
							} else if (!this.uuid.equals(other.uuid)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_9 operation_result_tAggregateRow_9 = null;
	AggOperationStruct_tAggregateRow_9 operation_finder_tAggregateRow_9 = new AggOperationStruct_tAggregateRow_9();
	java.util.Map<AggOperationStruct_tAggregateRow_9,AggOperationStruct_tAggregateRow_9> hash_tAggregateRow_9 = new java.util.HashMap<AggOperationStruct_tAggregateRow_9,AggOperationStruct_tAggregateRow_9>();
	
	String delimiter_tAggregateRow_9 = "|";
	

 



/**
 * [tAggregateRow_9_AGGOUT begin ] stop
 */



	
	/**
	 * [tReplace_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplace_2", false);
		start_Hash.put("tReplace_2", System.currentTimeMillis());
		
	
	currentComponent="tReplace_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("mapp" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tReplace_2 = 0;
		


int nb_line_tReplace_2 = 0;
 



/**
 * [tReplace_2 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row30" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
mappStruct mapp_tmp = new mappStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tFilterRow_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_12", false);
		start_Hash.put("tFilterRow_12", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_12";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("copyOfcopyOfcopyOfmapped3_0" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_12 = 0;
		
    int nb_line_tFilterRow_12 = 0;
    int nb_line_ok_tFilterRow_12 = 0;
    int nb_line_reject_tFilterRow_12 = 0;

    class Operator_tFilterRow_12 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_12(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_12 begin ] stop
 */



	
	/**
	 * [tXMLMap_8_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_8_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_8_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_8";
	
	currentComponent="tXMLMap_8_TXMLMAP_IN";

	
		int tos_count_tXMLMap_8_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_8 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_8");
for(Object  row_out_tXMLMap_8_TXMLMAP_IN : outs_tXMLMap_8) {//TD512
 



/**
 * [tXMLMap_8_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_8_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_8";
	
	currentComponent="tXMLMap_8_TXMLMAP_IN";

	

	copyOfcopyOfcopyOfmapped3_0 = null;
	if(row_out_tXMLMap_8_TXMLMAP_IN!=null && row_out_tXMLMap_8_TXMLMAP_IN instanceof copyOfcopyOfcopyOfmapped3_0Struct) {
		copyOfcopyOfcopyOfmapped3_0 = (copyOfcopyOfcopyOfmapped3_0Struct)row_out_tXMLMap_8_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_8_TXMLMAP_IN++;

/**
 * [tXMLMap_8_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_8_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_8";
	
	currentComponent="tXMLMap_8_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_8_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfmapped3_0"
if(copyOfcopyOfcopyOfmapped3_0 != null) { 



	
	/**
	 * [tFilterRow_12 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_12";

	

			//copyOfcopyOfcopyOfmapped3_0
			//copyOfcopyOfcopyOfmapped3_0


			
				if(execStat){
					runStat.updateStatOnConnection("copyOfcopyOfcopyOfmapped3_0"+iterateId,1, 1);
				} 
			

		

          row30 = null;
    Operator_tFilterRow_12 ope_tFilterRow_12 = new Operator_tFilterRow_12("&&");
      ope_tFilterRow_12.matches((copyOfcopyOfcopyOfmapped3_0.keyword.toUpperCase().contains("IDP") && copyOfcopyOfcopyOfmapped3_0.keyword.toLowerCase().contains("topics")), "advanced condition failed");
    
    if (ope_tFilterRow_12.getMatchFlag()) {
              if(row30 == null){ 
                row30 = new row30Struct();
              }
               row30.uuid = copyOfcopyOfcopyOfmapped3_0.uuid;
               row30.keyword = copyOfcopyOfcopyOfmapped3_0.keyword;
               row30.codeListValue = copyOfcopyOfcopyOfmapped3_0.codeListValue;    
      nb_line_ok_tFilterRow_12++;
    } else {
      nb_line_reject_tFilterRow_12++;
    }

nb_line_tFilterRow_12++;

 


	tos_count_tFilterRow_12++;

/**
 * [tFilterRow_12 main ] stop
 */
	
	/**
	 * [tFilterRow_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_12";

	

 



/**
 * [tFilterRow_12 process_data_begin ] stop
 */
// Start of branch "row30"
if(row30 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

			//row30
			//row30


			
				if(execStat){
					runStat.updateStatOnConnection("row30"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

mapp = null;


// # Output table : 'mapp'
mapp_tmp.uuid = row30.uuid;
mapp_tmp.keyword = StringHandling.UPCASE(row30.keyword.substring(0,11))  + row30.keyword.substring(11,StringHandling.LEN(row30.keyword)) ;
mapp_tmp.codeListValue = row30.codeListValue;
mapp = mapp_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "mapp"
if(mapp != null) { 



	
	/**
	 * [tReplace_2 main ] start
	 */

	

	
	
	currentComponent="tReplace_2";

	

			//mapp
			//mapp


			
				if(execStat){
					runStat.updateStatOnConnection("mapp"+iterateId,1, 1);
				} 
			

		

						String searchStr_tReplace_2_1 = "IDP_TOPICS_" + "";
							mapp.keyword = StringUtils.replaceAllStrictly(mapp.keyword, searchStr_tReplace_2_1, "" + "", false, false);
						String searchStr_tReplace_2_2 = "_" + "";
							mapp.keyword = StringUtils.replaceAllStrictly(mapp.keyword, searchStr_tReplace_2_2, " " + "", false, false);
	        row39.uuid = mapp.uuid;
	        
	        row39.keyword = mapp.keyword;
	        
	        row39.codeListValue = mapp.codeListValue;
	        
    nb_line_tReplace_2++;

 


	tos_count_tReplace_2++;

/**
 * [tReplace_2 main ] stop
 */
	
	/**
	 * [tReplace_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tReplace_2";

	

 



/**
 * [tReplace_2 process_data_begin ] stop
 */

	
	/**
	 * [tAggregateRow_9_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_9";
	
	currentComponent="tAggregateRow_9_AGGOUT";

	

			//row39
			//row39


			
				if(execStat){
					runStat.updateStatOnConnection("row39"+iterateId,1, 1);
				} 
			

		
	
operation_finder_tAggregateRow_9.uuid = row39.uuid;
			

	operation_finder_tAggregateRow_9.hashCodeDirty = true;
	
	operation_result_tAggregateRow_9 = hash_tAggregateRow_9.get(operation_finder_tAggregateRow_9);

	

	if(operation_result_tAggregateRow_9 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_9 = new AggOperationStruct_tAggregateRow_9();

		operation_result_tAggregateRow_9.uuid = operation_finder_tAggregateRow_9.uuid;
				
		
		

		hash_tAggregateRow_9.put(operation_result_tAggregateRow_9, operation_result_tAggregateRow_9);
	
	} // G_OutMain_AggR_001


	
				if(row39.keyword != null) { // G_OutMain_AggR_546
				
				if(operation_result_tAggregateRow_9.keyword_list.length() > 0) {
					operation_result_tAggregateRow_9.keyword_list.append("|");
				} 
				else if(operation_result_tAggregateRow_9.keyword_list_firstEmpty){
					operation_result_tAggregateRow_9.keyword_list.append("|");
				}
					if(operation_result_tAggregateRow_9.keyword_list != null) {
						if(operation_result_tAggregateRow_9.keyword_list_firstEmpty==false && ("").equals(String.valueOf(row39.keyword))){
							operation_result_tAggregateRow_9.keyword_list_firstEmpty = true;
						}
						operation_result_tAggregateRow_9.keyword_list = operation_result_tAggregateRow_9.keyword_list.append(String.valueOf(row39.keyword));
					}
				
				} // G_OutMain_AggR_546
				
				if(row39.codeListValue != null) { // G_OutMain_AggR_546
				
				if(operation_result_tAggregateRow_9.codeListValue_list.length() > 0) {
					operation_result_tAggregateRow_9.codeListValue_list.append("|");
				} 
				else if(operation_result_tAggregateRow_9.codeListValue_list_firstEmpty){
					operation_result_tAggregateRow_9.codeListValue_list.append("|");
				}
					if(operation_result_tAggregateRow_9.codeListValue_list != null) {
						if(operation_result_tAggregateRow_9.codeListValue_list_firstEmpty==false && ("").equals(String.valueOf(row39.codeListValue))){
							operation_result_tAggregateRow_9.codeListValue_list_firstEmpty = true;
						}
						operation_result_tAggregateRow_9.codeListValue_list = operation_result_tAggregateRow_9.codeListValue_list.append(String.valueOf(row39.codeListValue));
					}
				
				} // G_OutMain_AggR_546
				


 


	tos_count_tAggregateRow_9_AGGOUT++;

/**
 * [tAggregateRow_9_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_9_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_9";
	
	currentComponent="tAggregateRow_9_AGGOUT";

	

 



/**
 * [tAggregateRow_9_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_9_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_9";
	
	currentComponent="tAggregateRow_9_AGGOUT";

	

 



/**
 * [tAggregateRow_9_AGGOUT process_data_end ] stop
 */



	
	/**
	 * [tReplace_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tReplace_2";

	

 



/**
 * [tReplace_2 process_data_end ] stop
 */

} // End of branch "mapp"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "row30"




	
	/**
	 * [tFilterRow_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_12";

	

 



/**
 * [tFilterRow_12 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfmapped3_0"




	
	/**
	 * [tXMLMap_8_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_8";
	
	currentComponent="tXMLMap_8_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_8_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_8_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_8";
	
	currentComponent="tXMLMap_8_TXMLMAP_IN";

	

}//TD512
 

ok_Hash.put("tXMLMap_8_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_8_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_8_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tFilterRow_12 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_12";

	
    globalMap.put("tFilterRow_12_NB_LINE", nb_line_tFilterRow_12);
    globalMap.put("tFilterRow_12_NB_LINE_OK", nb_line_ok_tFilterRow_12);
    globalMap.put("tFilterRow_12_NB_LINE_REJECT", nb_line_reject_tFilterRow_12);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("copyOfcopyOfcopyOfmapped3_0"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_12", true);
end_Hash.put("tFilterRow_12", System.currentTimeMillis());




/**
 * [tFilterRow_12 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row30"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tReplace_2 end ] start
	 */

	

	
	
	currentComponent="tReplace_2";

	


globalMap.put("tReplace_2_NB_LINE",nb_line_tReplace_2);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("mapp"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tReplace_2", true);
end_Hash.put("tReplace_2", System.currentTimeMillis());




/**
 * [tReplace_2 end ] stop
 */

	
	/**
	 * [tAggregateRow_9_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_9";
	
	currentComponent="tAggregateRow_9_AGGOUT";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row39"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAggregateRow_9_AGGOUT", true);
end_Hash.put("tAggregateRow_9_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_9_AGGOUT end ] stop
 */


	
	/**
	 * [tAdvancedHash_row40 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row40", false);
		start_Hash.put("tAdvancedHash_row40", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row40";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row40" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row40 = 0;
		

			   		// connection name:row40
			   		// source node:tAggregateRow_9_AGGIN - inputs:(OnRowsEnd) outputs:(row40,row40) | target node:tAdvancedHash_row40 - inputs:(row40) outputs:()
			   		// linked node: tMap_2 - inputs:(row2,row44,row6,status,row40,row8,row13,row19,row22,row23,row34,row45,row27,row15) outputs:(map)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row40 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct> tHash_Lookup_row40 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row40Struct>getLookup(matchingModeEnum_row40);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row40", tHash_Lookup_row40);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row40 begin ] stop
 */



	
	/**
	 * [tAggregateRow_9_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_9_AGGIN", false);
		start_Hash.put("tAggregateRow_9_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_9";
	
	currentComponent="tAggregateRow_9_AGGIN";

	
		int tos_count_tAggregateRow_9_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_9> values_tAggregateRow_9 = hash_tAggregateRow_9.values();

globalMap.put("tAggregateRow_9_NB_LINE", values_tAggregateRow_9.size());

for(AggOperationStruct_tAggregateRow_9 aggregated_row_tAggregateRow_9 : values_tAggregateRow_9) { // G_AggR_600



 



/**
 * [tAggregateRow_9_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_9_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_9";
	
	currentComponent="tAggregateRow_9_AGGIN";

	

            				    row40.uuid = aggregated_row_tAggregateRow_9.uuid;
            				    
    								row40.keyword = aggregated_row_tAggregateRow_9.keyword_list.toString();
	    						
    								row40.codeListValue = aggregated_row_tAggregateRow_9.codeListValue_list.toString();
	    						

 


	tos_count_tAggregateRow_9_AGGIN++;

/**
 * [tAggregateRow_9_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_9_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_9";
	
	currentComponent="tAggregateRow_9_AGGIN";

	

 



/**
 * [tAggregateRow_9_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row40 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row40";

	

			//row40
			//row40


			
				if(execStat){
					runStat.updateStatOnConnection("row40"+iterateId,1, 1);
				} 
			

		


			   
			   

					row40Struct row40_HashRow = new row40Struct();
		   	   	   
				
				row40_HashRow.uuid = row40.uuid;
				
				row40_HashRow.keyword = row40.keyword;
				
				row40_HashRow.codeListValue = row40.codeListValue;
				
			tHash_Lookup_row40.put(row40_HashRow);
			
            




 


	tos_count_tAdvancedHash_row40++;

/**
 * [tAdvancedHash_row40 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row40 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row40";

	

 



/**
 * [tAdvancedHash_row40 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row40 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row40";

	

 



/**
 * [tAdvancedHash_row40 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_9_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_9";
	
	currentComponent="tAggregateRow_9_AGGIN";

	

 



/**
 * [tAggregateRow_9_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_9_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_9";
	
	currentComponent="tAggregateRow_9_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_9_AGGIN", true);
end_Hash.put("tAggregateRow_9_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_9_AGGIN end ] stop
 */

	
	/**
	 * [tAdvancedHash_row40 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row40";

	

tHash_Lookup_row40.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row40"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row40", true);
end_Hash.put("tAdvancedHash_row40", System.currentTimeMillis());




/**
 * [tAdvancedHash_row40 end ] stop
 */
























				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_9_AGGIN"
							globalMap.remove("tAggregateRow_9");
						
				try{
					
	
	/**
	 * [tFileInputXML_13 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_13";

	

 



/**
 * [tFileInputXML_13 finally ] stop
 */

	
	/**
	 * [tXMLMap_8_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_8";
	
	currentComponent="tXMLMap_8_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_8_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_8_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_8";
	
	currentComponent="tXMLMap_8_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_8_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tFilterRow_12 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_12";

	

 



/**
 * [tFilterRow_12 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tReplace_2 finally ] start
	 */

	

	
	
	currentComponent="tReplace_2";

	

 



/**
 * [tReplace_2 finally ] stop
 */

	
	/**
	 * [tAggregateRow_9_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_9";
	
	currentComponent="tAggregateRow_9_AGGOUT";

	

 



/**
 * [tAggregateRow_9_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_9_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_9";
	
	currentComponent="tAggregateRow_9_AGGIN";

	

 



/**
 * [tAggregateRow_9_AGGIN finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row40 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row40";

	

 



/**
 * [tAdvancedHash_row40 finally ] stop
 */
























				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_13_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableComparableLookupRow<row8Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String distributionFormat;

				public String getDistributionFormat () {
					return this.distributionFormat;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.uuid = this.uuid;
	            other.distributionFormat = this.distributionFormat;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.distributionFormat = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.distributionFormat, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",distributionFormat="+distributionFormat);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_3 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_3> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String distributionFormat;

				public String getDistributionFormat () {
					return this.distributionFormat;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.distributionFormat = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.distributionFormat,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",distributionFormat="+distributionFormat);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_3 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String distributionFormat;

				public String getDistributionFormat () {
					return this.distributionFormat;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.distributionFormat = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.distributionFormat,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",distributionFormat="+distributionFormat);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputXML_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
row8Struct row8 = new row8Struct();




	
	/**
	 * [tAggregateRow_3_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_3_AGGOUT", false);
		start_Hash.put("tAggregateRow_3_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAggregateRow_3_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_3 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_3 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_3 utilClass_tAggregateRow_3 = new UtilClass_tAggregateRow_3();

	

	class AggOperationStruct_tAggregateRow_3 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String uuid;StringBuilder distributionFormat_list = new StringBuilder();
           			boolean distributionFormat_list_firstEmpty = false;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_3 other = (AggOperationStruct_tAggregateRow_3) obj;
			
							if (this.uuid == null) {
								if (other.uuid != null) 
									return false;
							} else if (!this.uuid.equals(other.uuid)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_3 operation_result_tAggregateRow_3 = null;
	AggOperationStruct_tAggregateRow_3 operation_finder_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();
	java.util.Map<AggOperationStruct_tAggregateRow_3,AggOperationStruct_tAggregateRow_3> hash_tAggregateRow_3 = new java.util.HashMap<AggOperationStruct_tAggregateRow_3,AggOperationStruct_tAggregateRow_3>();
	
	String delimiter_tAggregateRow_3 = "|";
	

 



/**
 * [tAggregateRow_3_AGGOUT begin ] stop
 */



	
	/**
	 * [tFileInputXML_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_3", false);
		start_Hash.put("tFileInputXML_3", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_3";

	
		int tos_count_tFileInputXML_3 = 0;
		

	

int nb_line_tFileInputXML_3 = 0;

	String os_tFileInputXML_3 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_3=false;
	if(os_tFileInputXML_3.indexOf("windows") > -1 || os_tFileInputXML_3.indexOf("nt") > -1){
		isWindows_tFileInputXML_3=true;
	}
class NameSpaceTool_tFileInputXML_3 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_3{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_3 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_3 = null;
try {
	filename_tFileInputXML_3 = System.getProperty("java.io.tmpdir") + "/sdiDump/tmp/out.xml";
} catch(java.lang.Exception e) {
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_3 != null && filename_tFileInputXML_3 instanceof String && filename_tFileInputXML_3.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_3){
		filename_tFileInputXML_3 = filename_tFileInputXML_3.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_3 = true;
org.dom4j.Document doc_tFileInputXML_3 = null;
java.io.Closeable toClose_tFileInputXML_3 = null;
try{
	if(filename_tFileInputXML_3 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_3 = (java.io.InputStream)filename_tFileInputXML_3;
		toClose_tFileInputXML_3 = inputStream_tFileInputXML_3;
		doc_tFileInputXML_3 = reader_tFileInputXML_3.read(inputStream_tFileInputXML_3);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_3 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_3)),"UTF-8");
		toClose_tFileInputXML_3 = unicodeReader_tFileInputXML_3;
		org.xml.sax.InputSource in_tFileInputXML_3= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_3);
		doc_tFileInputXML_3 = reader_tFileInputXML_3.read(in_tFileInputXML_3);
	}
}catch(java.lang.Exception e){
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_3 = false;
} finally {
	if(toClose_tFileInputXML_3!=null) {
		toClose_tFileInputXML_3.close();
	}
}
if(isValidFile_tFileInputXML_3){
NameSpaceTool_tFileInputXML_3 nsTool_tFileInputXML_3 = new NameSpaceTool_tFileInputXML_3();
nsTool_tFileInputXML_3.countNSMap(doc_tFileInputXML_3.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_3 = nsTool_tFileInputXML_3.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_3 = doc_tFileInputXML_3.createXPath(nsTool_tFileInputXML_3.addDefaultNSPrefix("/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:distributionInfo/gmd:MD_Distribution/gmd:distributionFormat/gmd:MD_Format/gmd:name/gco:CharacterString"));  
x_tFileInputXML_3.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_3); 

java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_3 = (java.util.List<org.dom4j.tree.AbstractNode>)x_tFileInputXML_3.selectNodes(doc_tFileInputXML_3);	
XML_API_tFileInputXML_3 xml_api_tFileInputXML_3 = new XML_API_tFileInputXML_3();
String str_tFileInputXML_3 = "";
org.dom4j.Node node_tFileInputXML_3 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_3=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_3{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_3 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("../../../../../../gmd:fileIdentifier/gco:CharacterString","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:distributionInfo/gmd:MD_Distribution/gmd:distributionFormat/gmd:MD_Format/gmd:name/gco:CharacterString"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix(".","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:distributionInfo/gmd:MD_Distribution/gmd:distributionFormat/gmd:MD_Format/gmd:name/gco:CharacterString"));
	xpath_1.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(1,xpath_1);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_3 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_3 xPathUtil_tFileInputXML_3 = new XPathUtil_tFileInputXML_3();
	xPathUtil_tFileInputXML_3.initXPaths(xpaths_tFileInputXML_3, nsTool_tFileInputXML_3, xmlNameSpaceMap_tFileInputXML_3);
for (org.dom4j.tree.AbstractNode temp_tFileInputXML_3: nodeList_tFileInputXML_3) {
		nb_line_tFileInputXML_3++;
		
	row7 = null;			
	boolean whetherReject_tFileInputXML_3 = false;
	row7 = new row7Struct();
	try{
    Object obj0_tFileInputXML_3 = xpaths_tFileInputXML_3.get(0).evaluate(temp_tFileInputXML_3);
    if(obj0_tFileInputXML_3 == null) {
    	node_tFileInputXML_3 = null;
    	str_tFileInputXML_3 = "";
    	
    } else if(obj0_tFileInputXML_3 instanceof org.dom4j.Node) {
    	node_tFileInputXML_3 = (org.dom4j.Node)obj0_tFileInputXML_3;
    	str_tFileInputXML_3 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_3,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj0_tFileInputXML_3 instanceof String || obj0_tFileInputXML_3 instanceof Number){
    	node_tFileInputXML_3 = temp_tFileInputXML_3;
    	str_tFileInputXML_3 = String.valueOf(obj0_tFileInputXML_3);
    } else if(obj0_tFileInputXML_3 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_3 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_3;
    	node_tFileInputXML_3 = nodes_tFileInputXML_3.size()>0 ? nodes_tFileInputXML_3.get(0) : null;
    	str_tFileInputXML_3 = node_tFileInputXML_3==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_3,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_3.isDefNull(node_tFileInputXML_3)){
											row7.uuid =null;
									}else if(xml_api_tFileInputXML_3.isEmpty(node_tFileInputXML_3)){
										row7.uuid ="";
									}else if(xml_api_tFileInputXML_3.isMissing(node_tFileInputXML_3 )){ 
										row7.uuid =null;
									}else{
		row7.uuid = str_tFileInputXML_3;
	}
    Object obj1_tFileInputXML_3 = xpaths_tFileInputXML_3.get(1).evaluate(temp_tFileInputXML_3);
    if(obj1_tFileInputXML_3 == null) {
    	node_tFileInputXML_3 = null;
    	str_tFileInputXML_3 = "";
    	
    } else if(obj1_tFileInputXML_3 instanceof org.dom4j.Node) {
    	node_tFileInputXML_3 = (org.dom4j.Node)obj1_tFileInputXML_3;
    	str_tFileInputXML_3 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_3,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj1_tFileInputXML_3 instanceof String || obj1_tFileInputXML_3 instanceof Number){
    	node_tFileInputXML_3 = temp_tFileInputXML_3;
    	str_tFileInputXML_3 = String.valueOf(obj1_tFileInputXML_3);
    } else if(obj1_tFileInputXML_3 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_3 = (java.util.List<org.dom4j.Node>)obj1_tFileInputXML_3;
    	node_tFileInputXML_3 = nodes_tFileInputXML_3.size()>0 ? nodes_tFileInputXML_3.get(0) : null;
    	str_tFileInputXML_3 = node_tFileInputXML_3==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_3,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_3.isDefNull(node_tFileInputXML_3)){
											row7.distributionFormat =null;
									}else if(xml_api_tFileInputXML_3.isEmpty(node_tFileInputXML_3)){
										row7.distributionFormat ="";
									}else if(xml_api_tFileInputXML_3.isMissing(node_tFileInputXML_3 )){ 
										row7.distributionFormat =null;
									}else{
		row7.distributionFormat = str_tFileInputXML_3;
	} 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_3 = true;
                System.err.println(e.getMessage());
                row7 = null;
    }
			
			

 



/**
 * [tFileInputXML_3 begin ] stop
 */
	
	/**
	 * [tFileInputXML_3 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_3";

	

 


	tos_count_tFileInputXML_3++;

/**
 * [tFileInputXML_3 main ] stop
 */
	
	/**
	 * [tFileInputXML_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_3";

	

 



/**
 * [tFileInputXML_3 process_data_begin ] stop
 */
// Start of branch "row7"
if(row7 != null) { 



	
	/**
	 * [tAggregateRow_3_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";

	

			//row7
			//row7


			
				if(execStat){
					runStat.updateStatOnConnection("row7"+iterateId,1, 1);
				} 
			

		
	
operation_finder_tAggregateRow_3.uuid = row7.uuid;
			

	operation_finder_tAggregateRow_3.hashCodeDirty = true;
	
	operation_result_tAggregateRow_3 = hash_tAggregateRow_3.get(operation_finder_tAggregateRow_3);

	

	if(operation_result_tAggregateRow_3 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();

		operation_result_tAggregateRow_3.uuid = operation_finder_tAggregateRow_3.uuid;
				
		
		

		hash_tAggregateRow_3.put(operation_result_tAggregateRow_3, operation_result_tAggregateRow_3);
	
	} // G_OutMain_AggR_001


	
				if(operation_result_tAggregateRow_3.distributionFormat_list.length() > 0) {
					operation_result_tAggregateRow_3.distributionFormat_list.append("|");
				} 
				else if(operation_result_tAggregateRow_3.distributionFormat_list_firstEmpty){
					operation_result_tAggregateRow_3.distributionFormat_list.append("|");
				}
					if(operation_result_tAggregateRow_3.distributionFormat_list != null) {
						if(operation_result_tAggregateRow_3.distributionFormat_list_firstEmpty==false && ("").equals(String.valueOf(row7.distributionFormat))){
							operation_result_tAggregateRow_3.distributionFormat_list_firstEmpty = true;
						}
						operation_result_tAggregateRow_3.distributionFormat_list = operation_result_tAggregateRow_3.distributionFormat_list.append(String.valueOf(row7.distributionFormat));
					}
				


 


	tos_count_tAggregateRow_3_AGGOUT++;

/**
 * [tAggregateRow_3_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";

	

 



/**
 * [tAggregateRow_3_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";

	

 



/**
 * [tAggregateRow_3_AGGOUT process_data_end ] stop
 */

} // End of branch "row7"




	
	/**
	 * [tFileInputXML_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_3";

	

 



/**
 * [tFileInputXML_3 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_3 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_3";

	


}
	}
	globalMap.put("tFileInputXML_3_NB_LINE",nb_line_tFileInputXML_3);

	
 

ok_Hash.put("tFileInputXML_3", true);
end_Hash.put("tFileInputXML_3", System.currentTimeMillis());




/**
 * [tFileInputXML_3 end ] stop
 */

	
	/**
	 * [tAggregateRow_3_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row7"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAggregateRow_3_AGGOUT", true);
end_Hash.put("tAggregateRow_3_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_3_AGGOUT end ] stop
 */


	
	/**
	 * [tAdvancedHash_row8 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row8", false);
		start_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row8";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row8 = 0;
		

			   		// connection name:row8
			   		// source node:tAggregateRow_3_AGGIN - inputs:(OnRowsEnd) outputs:(row8,row8) | target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
			   		// linked node: tMap_2 - inputs:(row2,row44,row6,status,row40,row8,row13,row19,row22,row23,row34,row45,row27,row15) outputs:(map)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row8Struct>getLookup(matchingModeEnum_row8);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row8 begin ] stop
 */



	
	/**
	 * [tAggregateRow_3_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_3_AGGIN", false);
		start_Hash.put("tAggregateRow_3_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";

	
		int tos_count_tAggregateRow_3_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_3> values_tAggregateRow_3 = hash_tAggregateRow_3.values();

globalMap.put("tAggregateRow_3_NB_LINE", values_tAggregateRow_3.size());

for(AggOperationStruct_tAggregateRow_3 aggregated_row_tAggregateRow_3 : values_tAggregateRow_3) { // G_AggR_600



 



/**
 * [tAggregateRow_3_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";

	

            				    row8.uuid = aggregated_row_tAggregateRow_3.uuid;
            				    
    								row8.distributionFormat = aggregated_row_tAggregateRow_3.distributionFormat_list.toString();
	    						

 


	tos_count_tAggregateRow_3_AGGIN++;

/**
 * [tAggregateRow_3_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";

	

 



/**
 * [tAggregateRow_3_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

			//row8
			//row8


			
				if(execStat){
					runStat.updateStatOnConnection("row8"+iterateId,1, 1);
				} 
			

		


			   
			   

					row8Struct row8_HashRow = new row8Struct();
		   	   	   
				
				row8_HashRow.uuid = row8.uuid;
				
				row8_HashRow.distributionFormat = row8.distributionFormat;
				
			tHash_Lookup_row8.put(row8_HashRow);
			
            




 


	tos_count_tAdvancedHash_row8++;

/**
 * [tAdvancedHash_row8 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

 



/**
 * [tAdvancedHash_row8 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

 



/**
 * [tAdvancedHash_row8 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_3_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";

	

 



/**
 * [tAggregateRow_3_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_3_AGGIN", true);
end_Hash.put("tAggregateRow_3_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_3_AGGIN end ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

tHash_Lookup_row8.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row8"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row8", true);
end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());




/**
 * [tAdvancedHash_row8 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_3_AGGIN"
							globalMap.remove("tAggregateRow_3");
						
				try{
					
	
	/**
	 * [tFileInputXML_3 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_3";

	

 



/**
 * [tFileInputXML_3 finally ] stop
 */

	
	/**
	 * [tAggregateRow_3_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";

	

 



/**
 * [tAggregateRow_3_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_3_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";

	

 



/**
 * [tAggregateRow_3_AGGIN finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

 



/**
 * [tAdvancedHash_row8 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_3_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableComparableLookupRow<row13Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String links;

				public String getLinks () {
					return this.links;
				}
				
			    public String protocols;

				public String getProtocols () {
					return this.protocols;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row13Struct other = (row13Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row13Struct other) {

		other.uuid = this.uuid;
	            other.links = this.links;
	            other.protocols = this.protocols;
	            
	}

	public void copyKeysDataTo(row13Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.links = readString(dis,ois);
					
						this.protocols = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.links, dos, oos);
					
						writeString(this.protocols, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",links="+links);
		sb.append(",protocols="+protocols);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_5 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_5> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String links;

				public String getLinks () {
					return this.links;
				}
				
			    public String protocols;

				public String getProtocols () {
					return this.protocols;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.links = readString(dis);
					
					this.protocols = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.links,dos);
					
					// String
				
						writeString(this.protocols,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",links="+links);
		sb.append(",protocols="+protocols);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_5 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String links;

				public String getLinks () {
					return this.links;
				}
				
			    public String protocols;

				public String getProtocols () {
					return this.protocols;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.links = readString(dis);
					
					this.protocols = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.links,dos);
					
					// String
				
						writeString(this.protocols,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",links="+links);
		sb.append(",protocols="+protocols);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String links;

				public String getLinks () {
					return this.links;
				}
				
			    public String protocols;

				public String getProtocols () {
					return this.protocols;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.links = readString(dis);
					
					this.protocols = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.links,dos);
					
					// String
				
						writeString(this.protocols,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",links="+links);
		sb.append(",protocols="+protocols);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputXML_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();
row10Struct row10 = new row10Struct();
row13Struct row13 = new row13Struct();





	
	/**
	 * [tAggregateRow_5_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_5_AGGOUT", false);
		start_Hash.put("tAggregateRow_5_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGOUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row10" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAggregateRow_5_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_5 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_5 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_5 utilClass_tAggregateRow_5 = new UtilClass_tAggregateRow_5();

	

	class AggOperationStruct_tAggregateRow_5 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String uuid;StringBuilder links_list = new StringBuilder();
           			boolean links_list_firstEmpty = false;
           			StringBuilder protocols_list = new StringBuilder();
           			boolean protocols_list_firstEmpty = false;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_5 other = (AggOperationStruct_tAggregateRow_5) obj;
			
							if (this.uuid == null) {
								if (other.uuid != null) 
									return false;
							} else if (!this.uuid.equals(other.uuid)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_5 operation_result_tAggregateRow_5 = null;
	AggOperationStruct_tAggregateRow_5 operation_finder_tAggregateRow_5 = new AggOperationStruct_tAggregateRow_5();
	java.util.Map<AggOperationStruct_tAggregateRow_5,AggOperationStruct_tAggregateRow_5> hash_tAggregateRow_5 = new java.util.HashMap<AggOperationStruct_tAggregateRow_5,AggOperationStruct_tAggregateRow_5>();
	
	String delimiter_tAggregateRow_5 = "|";
	

 



/**
 * [tAggregateRow_5_AGGOUT begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_1 = 0;
		
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputXML_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_4", false);
		start_Hash.put("tFileInputXML_4", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_4";

	
		int tos_count_tFileInputXML_4 = 0;
		

	

int nb_line_tFileInputXML_4 = 0;

	String os_tFileInputXML_4 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_4=false;
	if(os_tFileInputXML_4.indexOf("windows") > -1 || os_tFileInputXML_4.indexOf("nt") > -1){
		isWindows_tFileInputXML_4=true;
	}
class NameSpaceTool_tFileInputXML_4 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_4{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_4 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_4 = null;
try {
	filename_tFileInputXML_4 = System.getProperty("java.io.tmpdir") + "/sdiDump/tmp/out.xml";
} catch(java.lang.Exception e) {
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_4 != null && filename_tFileInputXML_4 instanceof String && filename_tFileInputXML_4.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_4){
		filename_tFileInputXML_4 = filename_tFileInputXML_4.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_4 = true;
org.dom4j.Document doc_tFileInputXML_4 = null;
java.io.Closeable toClose_tFileInputXML_4 = null;
try{
	if(filename_tFileInputXML_4 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_4 = (java.io.InputStream)filename_tFileInputXML_4;
		toClose_tFileInputXML_4 = inputStream_tFileInputXML_4;
		doc_tFileInputXML_4 = reader_tFileInputXML_4.read(inputStream_tFileInputXML_4);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_4 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_4)),"UTF-8");
		toClose_tFileInputXML_4 = unicodeReader_tFileInputXML_4;
		org.xml.sax.InputSource in_tFileInputXML_4= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_4);
		doc_tFileInputXML_4 = reader_tFileInputXML_4.read(in_tFileInputXML_4);
	}
}catch(java.lang.Exception e){
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_4 = false;
} finally {
	if(toClose_tFileInputXML_4!=null) {
		toClose_tFileInputXML_4.close();
	}
}
if(isValidFile_tFileInputXML_4){
NameSpaceTool_tFileInputXML_4 nsTool_tFileInputXML_4 = new NameSpaceTool_tFileInputXML_4();
nsTool_tFileInputXML_4.countNSMap(doc_tFileInputXML_4.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_4 = nsTool_tFileInputXML_4.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_4 = doc_tFileInputXML_4.createXPath(nsTool_tFileInputXML_4.addDefaultNSPrefix("/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:distributionInfo/gmd:MD_Distribution/gmd:transferOptions/gmd:MD_DigitalTransferOptions/gmd:onLine/gmd:CI_OnlineResource/gmd:linkage/gmd:URL"));  
x_tFileInputXML_4.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_4); 

java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_4 = (java.util.List<org.dom4j.tree.AbstractNode>)x_tFileInputXML_4.selectNodes(doc_tFileInputXML_4);	
XML_API_tFileInputXML_4 xml_api_tFileInputXML_4 = new XML_API_tFileInputXML_4();
String str_tFileInputXML_4 = "";
org.dom4j.Node node_tFileInputXML_4 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_4=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_4{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_4 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("../../../../../../../../gmd:fileIdentifier/gco:CharacterString","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:distributionInfo/gmd:MD_Distribution/gmd:transferOptions/gmd:MD_DigitalTransferOptions/gmd:onLine/gmd:CI_OnlineResource/gmd:linkage/gmd:URL"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix(".","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:distributionInfo/gmd:MD_Distribution/gmd:transferOptions/gmd:MD_DigitalTransferOptions/gmd:onLine/gmd:CI_OnlineResource/gmd:linkage/gmd:URL"));
	xpath_1.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(1,xpath_1);
			
	org.dom4j.XPath xpath_2 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("../../gmd:protocol/gco:CharacterString","/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:distributionInfo/gmd:MD_Distribution/gmd:transferOptions/gmd:MD_DigitalTransferOptions/gmd:onLine/gmd:CI_OnlineResource/gmd:linkage/gmd:URL"));
	xpath_2.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(2,xpath_2);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_4 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_4 xPathUtil_tFileInputXML_4 = new XPathUtil_tFileInputXML_4();
	xPathUtil_tFileInputXML_4.initXPaths(xpaths_tFileInputXML_4, nsTool_tFileInputXML_4, xmlNameSpaceMap_tFileInputXML_4);
for (org.dom4j.tree.AbstractNode temp_tFileInputXML_4: nodeList_tFileInputXML_4) {
		nb_line_tFileInputXML_4++;
		
	row9 = null;			
	boolean whetherReject_tFileInputXML_4 = false;
	row9 = new row9Struct();
	try{
    Object obj0_tFileInputXML_4 = xpaths_tFileInputXML_4.get(0).evaluate(temp_tFileInputXML_4);
    if(obj0_tFileInputXML_4 == null) {
    	node_tFileInputXML_4 = null;
    	str_tFileInputXML_4 = "";
    	
    } else if(obj0_tFileInputXML_4 instanceof org.dom4j.Node) {
    	node_tFileInputXML_4 = (org.dom4j.Node)obj0_tFileInputXML_4;
    	str_tFileInputXML_4 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_4,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj0_tFileInputXML_4 instanceof String || obj0_tFileInputXML_4 instanceof Number){
    	node_tFileInputXML_4 = temp_tFileInputXML_4;
    	str_tFileInputXML_4 = String.valueOf(obj0_tFileInputXML_4);
    } else if(obj0_tFileInputXML_4 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_4 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_4;
    	node_tFileInputXML_4 = nodes_tFileInputXML_4.size()>0 ? nodes_tFileInputXML_4.get(0) : null;
    	str_tFileInputXML_4 = node_tFileInputXML_4==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_4,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_4.isDefNull(node_tFileInputXML_4)){
											row9.uuid =null;
									}else if(xml_api_tFileInputXML_4.isEmpty(node_tFileInputXML_4)){
										row9.uuid ="";
									}else if(xml_api_tFileInputXML_4.isMissing(node_tFileInputXML_4 )){ 
										row9.uuid =null;
									}else{
		row9.uuid = str_tFileInputXML_4;
	}
    Object obj1_tFileInputXML_4 = xpaths_tFileInputXML_4.get(1).evaluate(temp_tFileInputXML_4);
    if(obj1_tFileInputXML_4 == null) {
    	node_tFileInputXML_4 = null;
    	str_tFileInputXML_4 = "";
    	
    } else if(obj1_tFileInputXML_4 instanceof org.dom4j.Node) {
    	node_tFileInputXML_4 = (org.dom4j.Node)obj1_tFileInputXML_4;
    	str_tFileInputXML_4 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_4,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj1_tFileInputXML_4 instanceof String || obj1_tFileInputXML_4 instanceof Number){
    	node_tFileInputXML_4 = temp_tFileInputXML_4;
    	str_tFileInputXML_4 = String.valueOf(obj1_tFileInputXML_4);
    } else if(obj1_tFileInputXML_4 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_4 = (java.util.List<org.dom4j.Node>)obj1_tFileInputXML_4;
    	node_tFileInputXML_4 = nodes_tFileInputXML_4.size()>0 ? nodes_tFileInputXML_4.get(0) : null;
    	str_tFileInputXML_4 = node_tFileInputXML_4==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_4,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_4.isDefNull(node_tFileInputXML_4)){
											row9.links =null;
									}else if(xml_api_tFileInputXML_4.isEmpty(node_tFileInputXML_4)){
										row9.links ="";
									}else if(xml_api_tFileInputXML_4.isMissing(node_tFileInputXML_4 )){ 
										row9.links =null;
									}else{
		row9.links = str_tFileInputXML_4;
	}
    Object obj2_tFileInputXML_4 = xpaths_tFileInputXML_4.get(2).evaluate(temp_tFileInputXML_4);
    if(obj2_tFileInputXML_4 == null) {
    	node_tFileInputXML_4 = null;
    	str_tFileInputXML_4 = "";
    	
    } else if(obj2_tFileInputXML_4 instanceof org.dom4j.Node) {
    	node_tFileInputXML_4 = (org.dom4j.Node)obj2_tFileInputXML_4;
    	str_tFileInputXML_4 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_4,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj2_tFileInputXML_4 instanceof String || obj2_tFileInputXML_4 instanceof Number){
    	node_tFileInputXML_4 = temp_tFileInputXML_4;
    	str_tFileInputXML_4 = String.valueOf(obj2_tFileInputXML_4);
    } else if(obj2_tFileInputXML_4 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_4 = (java.util.List<org.dom4j.Node>)obj2_tFileInputXML_4;
    	node_tFileInputXML_4 = nodes_tFileInputXML_4.size()>0 ? nodes_tFileInputXML_4.get(0) : null;
    	str_tFileInputXML_4 = node_tFileInputXML_4==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_4,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_4.isDefNull(node_tFileInputXML_4)){
											row9.protocols =null;
									}else if(xml_api_tFileInputXML_4.isEmpty(node_tFileInputXML_4)){
										row9.protocols ="";
									}else if(xml_api_tFileInputXML_4.isMissing(node_tFileInputXML_4 )){ 
										row9.protocols =null;
									}else{
		row9.protocols = str_tFileInputXML_4;
	} 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_4 = true;
                System.err.println(e.getMessage());
                row9 = null;
    }
			
			

 



/**
 * [tFileInputXML_4 begin ] stop
 */
	
	/**
	 * [tFileInputXML_4 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_4";

	

 


	tos_count_tFileInputXML_4++;

/**
 * [tFileInputXML_4 main ] stop
 */
	
	/**
	 * [tFileInputXML_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_4";

	

 



/**
 * [tFileInputXML_4 process_data_begin ] stop
 */
// Start of branch "row9"
if(row9 != null) { 



	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

			//row9
			//row9


			
				if(execStat){
					runStat.updateStatOnConnection("row9"+iterateId,1, 1);
				} 
			

		

          row10 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
      ope_tFilterRow_1.matches((// code sample : use row9 to define the condition.
// row9.columnName1.equals("foo") ||!(row9.columnName2.equals("bar"))
// replace the following expression by your own filter condition 
!row9.links.contains("http")

			), "advanced condition failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row10 == null){ 
                row10 = new row10Struct();
              }
               row10.uuid = row9.uuid;
               row10.links = row9.links;
               row10.protocols = row9.protocols;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
	
	/**
	 * [tFilterRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 



	
	/**
	 * [tAggregateRow_5_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGOUT";

	

			//row10
			//row10


			
				if(execStat){
					runStat.updateStatOnConnection("row10"+iterateId,1, 1);
				} 
			

		
	
operation_finder_tAggregateRow_5.uuid = row10.uuid;
			

	operation_finder_tAggregateRow_5.hashCodeDirty = true;
	
	operation_result_tAggregateRow_5 = hash_tAggregateRow_5.get(operation_finder_tAggregateRow_5);

	

	if(operation_result_tAggregateRow_5 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_5 = new AggOperationStruct_tAggregateRow_5();

		operation_result_tAggregateRow_5.uuid = operation_finder_tAggregateRow_5.uuid;
				
		
		

		hash_tAggregateRow_5.put(operation_result_tAggregateRow_5, operation_result_tAggregateRow_5);
	
	} // G_OutMain_AggR_001


	
				if(row10.links != null) { // G_OutMain_AggR_546
				
				if(operation_result_tAggregateRow_5.links_list.length() > 0) {
					operation_result_tAggregateRow_5.links_list.append("|");
				} 
				else if(operation_result_tAggregateRow_5.links_list_firstEmpty){
					operation_result_tAggregateRow_5.links_list.append("|");
				}
					if(operation_result_tAggregateRow_5.links_list != null) {
						if(operation_result_tAggregateRow_5.links_list_firstEmpty==false && ("").equals(String.valueOf(row10.links))){
							operation_result_tAggregateRow_5.links_list_firstEmpty = true;
						}
						operation_result_tAggregateRow_5.links_list = operation_result_tAggregateRow_5.links_list.append(String.valueOf(row10.links));
					}
				
				} // G_OutMain_AggR_546
				
				if(row10.protocols != null) { // G_OutMain_AggR_546
				
				if(operation_result_tAggregateRow_5.protocols_list.length() > 0) {
					operation_result_tAggregateRow_5.protocols_list.append("|");
				} 
				else if(operation_result_tAggregateRow_5.protocols_list_firstEmpty){
					operation_result_tAggregateRow_5.protocols_list.append("|");
				}
					if(operation_result_tAggregateRow_5.protocols_list != null) {
						if(operation_result_tAggregateRow_5.protocols_list_firstEmpty==false && ("").equals(String.valueOf(row10.protocols))){
							operation_result_tAggregateRow_5.protocols_list_firstEmpty = true;
						}
						operation_result_tAggregateRow_5.protocols_list = operation_result_tAggregateRow_5.protocols_list.append(String.valueOf(row10.protocols));
					}
				
				} // G_OutMain_AggR_546
				


 


	tos_count_tAggregateRow_5_AGGOUT++;

/**
 * [tAggregateRow_5_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_5_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGOUT";

	

 



/**
 * [tAggregateRow_5_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_5_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGOUT";

	

 



/**
 * [tAggregateRow_5_AGGOUT process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tFilterRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_end ] stop
 */

} // End of branch "row9"




	
	/**
	 * [tFileInputXML_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_4";

	

 



/**
 * [tFileInputXML_4 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_4 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_4";

	


}
	}
	globalMap.put("tFileInputXML_4_NB_LINE",nb_line_tFileInputXML_4);

	
 

ok_Hash.put("tFileInputXML_4", true);
end_Hash.put("tFileInputXML_4", System.currentTimeMillis());




/**
 * [tFileInputXML_4 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row9"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tAggregateRow_5_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGOUT";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row10"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAggregateRow_5_AGGOUT", true);
end_Hash.put("tAggregateRow_5_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_5_AGGOUT end ] stop
 */


	
	/**
	 * [tAdvancedHash_row13 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row13", false);
		start_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row13";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row13" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row13 = 0;
		

			   		// connection name:row13
			   		// source node:tAggregateRow_5_AGGIN - inputs:(OnRowsEnd) outputs:(row13,row13) | target node:tAdvancedHash_row13 - inputs:(row13) outputs:()
			   		// linked node: tMap_2 - inputs:(row2,row44,row6,status,row40,row8,row13,row19,row22,row23,row34,row45,row27,row15) outputs:(map)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row13 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row13Struct>getLookup(matchingModeEnum_row13);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row13", tHash_Lookup_row13);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row13 begin ] stop
 */



	
	/**
	 * [tAggregateRow_5_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_5_AGGIN", false);
		start_Hash.put("tAggregateRow_5_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGIN";

	
		int tos_count_tAggregateRow_5_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_5> values_tAggregateRow_5 = hash_tAggregateRow_5.values();

globalMap.put("tAggregateRow_5_NB_LINE", values_tAggregateRow_5.size());

for(AggOperationStruct_tAggregateRow_5 aggregated_row_tAggregateRow_5 : values_tAggregateRow_5) { // G_AggR_600



 



/**
 * [tAggregateRow_5_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_5_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGIN";

	

            				    row13.uuid = aggregated_row_tAggregateRow_5.uuid;
            				    
    								row13.links = aggregated_row_tAggregateRow_5.links_list.toString();
	    						
    								row13.protocols = aggregated_row_tAggregateRow_5.protocols_list.toString();
	    						

 


	tos_count_tAggregateRow_5_AGGIN++;

/**
 * [tAggregateRow_5_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_5_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGIN";

	

 



/**
 * [tAggregateRow_5_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

			//row13
			//row13


			
				if(execStat){
					runStat.updateStatOnConnection("row13"+iterateId,1, 1);
				} 
			

		


			   
			   

					row13Struct row13_HashRow = new row13Struct();
		   	   	   
				
				row13_HashRow.uuid = row13.uuid;
				
				row13_HashRow.links = row13.links;
				
				row13_HashRow.protocols = row13.protocols;
				
			tHash_Lookup_row13.put(row13_HashRow);
			
            




 


	tos_count_tAdvancedHash_row13++;

/**
 * [tAdvancedHash_row13 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

 



/**
 * [tAdvancedHash_row13 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

 



/**
 * [tAdvancedHash_row13 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_5_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGIN";

	

 



/**
 * [tAggregateRow_5_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_5_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_5_AGGIN", true);
end_Hash.put("tAggregateRow_5_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_5_AGGIN end ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

tHash_Lookup_row13.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row13"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row13", true);
end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());




/**
 * [tAdvancedHash_row13 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_5_AGGIN"
							globalMap.remove("tAggregateRow_5");
						
				try{
					
	
	/**
	 * [tFileInputXML_4 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_4";

	

 



/**
 * [tFileInputXML_4 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tAggregateRow_5_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGOUT";

	

 



/**
 * [tAggregateRow_5_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_5_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGIN";

	

 



/**
 * [tAggregateRow_5_AGGIN finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

 



/**
 * [tAdvancedHash_row13 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_4_SUBPROCESS_STATE", 1);
	}
	


public static class row19Struct implements routines.system.IPersistableComparableLookupRow<row19Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String keyword;

				public String getKeyword () {
					return this.keyword;
				}
				
			    public String codeListValue;

				public String getCodeListValue () {
					return this.codeListValue;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row19Struct other = (row19Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row19Struct other) {

		other.uuid = this.uuid;
	            other.keyword = this.keyword;
	            other.codeListValue = this.codeListValue;
	            
	}

	public void copyKeysDataTo(row19Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.keyword = readString(dis,ois);
					
						this.codeListValue = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.keyword, dos, oos);
					
						writeString(this.codeListValue, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",keyword="+keyword);
		sb.append(",codeListValue="+codeListValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_6 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_6> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String keyword;

				public String getKeyword () {
					return this.keyword;
				}
				
			    public String codeListValue;

				public String getCodeListValue () {
					return this.codeListValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.keyword = readString(dis);
					
					this.codeListValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.keyword,dos);
					
					// String
				
						writeString(this.codeListValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",keyword="+keyword);
		sb.append(",codeListValue="+codeListValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_6 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String keyword;

				public String getKeyword () {
					return this.keyword;
				}
				
			    public String codeListValue;

				public String getCodeListValue () {
					return this.codeListValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.keyword = readString(dis);
					
					this.codeListValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.keyword,dos);
					
					// String
				
						writeString(this.codeListValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",keyword="+keyword);
		sb.append(",codeListValue="+codeListValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String keyword;

				public String getKeyword () {
					return this.keyword;
				}
				
			    public String codeListValue;

				public String getCodeListValue () {
					return this.codeListValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.keyword = readString(dis);
					
					this.codeListValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.keyword,dos);
					
					// String
				
						writeString(this.codeListValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",keyword="+keyword);
		sb.append(",codeListValue="+codeListValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class mapped3Struct implements routines.system.IPersistableRow<mapped3Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String keyword;

				public String getKeyword () {
					return this.keyword;
				}
				
			    public String codeListValue;

				public String getCodeListValue () {
					return this.codeListValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.keyword = readString(dis);
					
					this.codeListValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.keyword,dos);
					
					// String
				
						writeString(this.codeListValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",keyword="+keyword);
		sb.append(",codeListValue="+codeListValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(mapped3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public routines.system.Document xmldoc;

				public routines.system.Document getXmldoc () {
					return this.xmldoc;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
						this.xmldoc = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.xmldoc);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("xmldoc="+String.valueOf(xmldoc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputXML_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();
mapped3Struct mapped3 = new mapped3Struct();
row17Struct row17 = new row17Struct();
row18Struct row18 = new row18Struct();
row19Struct row19 = new row19Struct();




	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_1_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_1_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row16" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tXMLMap_1_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_1_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_1_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_1_TXMLMAP_OUT__Struct Var__tXMLMap_1_TXMLMAP_OUT = new Var__tXMLMap_1_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
mapped3Struct mapped3_tmp = new mapped3Struct();
mapped3Struct mapped3_save = null;
//the aggregate variable
mapped3Struct mapped3_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_1 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_1",allOutsForAggregate_tXMLMap_1);
// ###############################
class TreeNode_API_tXMLMap_1_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
	java.util.Date get_Date(String xpath, String pattern){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Date(content, pattern);
	}
	Integer get_Integer(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Integer(content);
	}
	Character get_Character(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Character(content);
	}
	Float get_Float(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Float(content);
	}
	Double get_Double(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Double(content);
	}
	Boolean get_Boolean(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Boolean(content);
	}
}
			TreeNode_API_tXMLMap_1_TXMLMAP_OUT treeNodeAPI_tXMLMap_1_TXMLMAP_OUT = new TreeNode_API_tXMLMap_1_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_1_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_1_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_1_TXMLMAP_OUT xml_api_tXMLMap_1_TXMLMAP_OUT = new XML_API_tXMLMap_1_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_1_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            
 



/**
 * [tXMLMap_1_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tFileInputXML_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_6", false);
		start_Hash.put("tFileInputXML_6", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_6";

	
		int tos_count_tFileInputXML_6 = 0;
		

	

int nb_line_tFileInputXML_6 = 0;

	String os_tFileInputXML_6 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_6=false;
	if(os_tFileInputXML_6.indexOf("windows") > -1 || os_tFileInputXML_6.indexOf("nt") > -1){
		isWindows_tFileInputXML_6=true;
	}
class NameSpaceTool_tFileInputXML_6 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_6{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_6 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_6 = null;
try {
	filename_tFileInputXML_6 = System.getProperty("java.io.tmpdir") + "/sdiDump/tmp/out.xml";
} catch(java.lang.Exception e) {
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_6 != null && filename_tFileInputXML_6 instanceof String && filename_tFileInputXML_6.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_6){
		filename_tFileInputXML_6 = filename_tFileInputXML_6.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_6 = true;
org.dom4j.Document doc_tFileInputXML_6 = null;
java.io.Closeable toClose_tFileInputXML_6 = null;
try{
	if(filename_tFileInputXML_6 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_6 = (java.io.InputStream)filename_tFileInputXML_6;
		toClose_tFileInputXML_6 = inputStream_tFileInputXML_6;
		doc_tFileInputXML_6 = reader_tFileInputXML_6.read(inputStream_tFileInputXML_6);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_6 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_6)),"UTF-8");
		toClose_tFileInputXML_6 = unicodeReader_tFileInputXML_6;
		org.xml.sax.InputSource in_tFileInputXML_6= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_6);
		doc_tFileInputXML_6 = reader_tFileInputXML_6.read(in_tFileInputXML_6);
	}
}catch(java.lang.Exception e){
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_6 = false;
} finally {
	if(toClose_tFileInputXML_6!=null) {
		toClose_tFileInputXML_6.close();
	}
}
if(isValidFile_tFileInputXML_6){
NameSpaceTool_tFileInputXML_6 nsTool_tFileInputXML_6 = new NameSpaceTool_tFileInputXML_6();
nsTool_tFileInputXML_6.countNSMap(doc_tFileInputXML_6.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_6 = nsTool_tFileInputXML_6.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_6 = doc_tFileInputXML_6.createXPath(nsTool_tFileInputXML_6.addDefaultNSPrefix("/csw:GetRecordsResponse"));  
x_tFileInputXML_6.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_6); 

java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_6 = (java.util.List<org.dom4j.tree.AbstractNode>)x_tFileInputXML_6.selectNodes(doc_tFileInputXML_6);	
XML_API_tFileInputXML_6 xml_api_tFileInputXML_6 = new XML_API_tFileInputXML_6();
String str_tFileInputXML_6 = "";
org.dom4j.Node node_tFileInputXML_6 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_6=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_6{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_6 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix(".","/csw:GetRecordsResponse"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_6 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_6 xPathUtil_tFileInputXML_6 = new XPathUtil_tFileInputXML_6();
	xPathUtil_tFileInputXML_6.initXPaths(xpaths_tFileInputXML_6, nsTool_tFileInputXML_6, xmlNameSpaceMap_tFileInputXML_6);
for (org.dom4j.tree.AbstractNode temp_tFileInputXML_6: nodeList_tFileInputXML_6) {
		nb_line_tFileInputXML_6++;
		
	row16 = null;			
	boolean whetherReject_tFileInputXML_6 = false;
	row16 = new row16Struct();
	try{
    Object obj0_tFileInputXML_6 = xpaths_tFileInputXML_6.get(0).evaluate(temp_tFileInputXML_6);
    if(obj0_tFileInputXML_6 == null) {
    	node_tFileInputXML_6 = null;
		str_tFileInputXML_6 = null;
    	
    } else if(obj0_tFileInputXML_6 instanceof org.dom4j.Node) {
    	node_tFileInputXML_6 = (org.dom4j.Node)obj0_tFileInputXML_6;
		str_tFileInputXML_6 = node_tFileInputXML_6.asXML();
    } else if(obj0_tFileInputXML_6 instanceof String || obj0_tFileInputXML_6 instanceof Number){
    	node_tFileInputXML_6 = temp_tFileInputXML_6;
    	str_tFileInputXML_6 = String.valueOf(obj0_tFileInputXML_6);
    } else if(obj0_tFileInputXML_6 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_6 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_6;
    	node_tFileInputXML_6 = nodes_tFileInputXML_6.size()>0 ? nodes_tFileInputXML_6.get(0) : null;
		str_tFileInputXML_6 = node_tFileInputXML_6==null?null:node_tFileInputXML_6.asXML();
	}
								row16.xmldoc = ParserUtils.parseTo_Document(str_tFileInputXML_6,false,"UTF-8"); 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_6 = true;
                System.err.println(e.getMessage());
                row16 = null;
    }
			
			

 



/**
 * [tFileInputXML_6 begin ] stop
 */
	
	/**
	 * [tFileInputXML_6 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_6";

	

 


	tos_count_tFileInputXML_6++;

/**
 * [tFileInputXML_6 main ] stop
 */
	
	/**
	 * [tFileInputXML_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_6";

	

 



/**
 * [tFileInputXML_6 process_data_begin ] stop
 */
// Start of branch "row16"
if(row16 != null) { 



	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	

			//row16
			//row16


			
				if(execStat){
					runStat.updateStatOnConnection("row16"+iterateId,1, 1);
				} 
			

		

	boolean rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_1_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_1_TXMLMAP_OUT = false;
	  
	
			

					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_1_TXMLMAP_OUT_0 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_1_TXMLMAP_OUT_0.setOriginalLoop("/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:keyword");
					docToFlat_tXMLMap_1_TXMLMAP_OUT_0.setIsOptional(false);
					if(row16.xmldoc == null 
						|| row16.xmldoc.getDocument() == null) {
						throw new RuntimeException("row16.xmldoc can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_1_TXMLMAP_OUT_0 = row16.xmldoc.getDocument();
					docToFlat_tXMLMap_1_TXMLMAP_OUT_0.setDoc(doc_tXMLMap_1_TXMLMAP_OUT_0);
					docToFlat_tXMLMap_1_TXMLMAP_OUT_0.setDefineNS(true);
					docToFlat_tXMLMap_1_TXMLMAP_OUT_0.setNamespaceTool(nsTool_tXMLMap_1_TXMLMAP_OUT);
					
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_1_TXMLMAP_OUT_0 = new java.util.HashMap<String,String>();
						xmlNameSpaceMap_tXMLMap_1_TXMLMAP_OUT_0.put("gco","http://www.isotc211.org/2005/gco");xmlNameSpaceMap_tXMLMap_1_TXMLMAP_OUT_0.put("gmx","http://www.isotc211.org/2005/gmx");xmlNameSpaceMap_tXMLMap_1_TXMLMAP_OUT_0.put("csw","http://www.opengis.net/cat/csw/2.0.2");xmlNameSpaceMap_tXMLMap_1_TXMLMAP_OUT_0.put("gml","http://www.opengis.net/gml");xmlNameSpaceMap_tXMLMap_1_TXMLMAP_OUT_0.put("gmd","http://www.isotc211.org/2005/gmd");
					
					docToFlat_tXMLMap_1_TXMLMAP_OUT_0.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_1_TXMLMAP_OUT_0);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row16.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:thesaurusName/gmd:CI_Citation/gmd:title/gco:CharacterString");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../gmd:thesaurusName/gmd:CI_Citation/gmd:title/gco:CharacterString");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row16.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:fileIdentifier/gco:CharacterString");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("../../../../../gmd:fileIdentifier/gco:CharacterString");
					
					absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("row16.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:keyword/gco:CharacterString");
					relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.add("gco:CharacterString");
					
					String[] absolutePathMappings_tXMLMap_1_TXMLMAP_OUT_0 = absolutePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_1_TXMLMAP_OUT_0 = relativePathMappingsList_tXMLMap_1_TXMLMAP_OUT_0.toArray(new String[0]);
					
					docToFlat_tXMLMap_1_TXMLMAP_OUT_0.setAbsolutePathMappings(absolutePathMappings_tXMLMap_1_TXMLMAP_OUT_0);
					docToFlat_tXMLMap_1_TXMLMAP_OUT_0.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_1_TXMLMAP_OUT_0);
					//generate document to flat data
					docToFlat_tXMLMap_1_TXMLMAP_OUT_0.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_1_TXMLMAP_OUT_0 = docToFlat_tXMLMap_1_TXMLMAP_OUT_0.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_1_TXMLMAP_OUT_0: resultSet_tXMLMap_1_TXMLMAP_OUT_0) { // G_TXM_M_001
						nb_line_tXMLMap_1_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_1_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_1_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_1_TXMLMAP_OUT_0 : oneRow_tXMLMap_1_TXMLMAP_OUT_0.entrySet()) {
							treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.put(entry_tXMLMap_1_TXMLMAP_OUT_0.getKey(),entry_tXMLMap_1_TXMLMAP_OUT_0.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_1_TXMLMAP_OUT__Struct Var = Var__tXMLMap_1_TXMLMAP_OUT;
		// ###############################
		// # Output table

mapped3 = null;


// # Output table : 'mapped3'

mapped3_tmp = new mapped3Struct();
mapped3_tmp.uuid = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row16.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:fileIdentifier/gco:CharacterString");
mapped3_tmp.keyword = treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row16.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:keyword/gco:CharacterString");
mapped3_tmp.codeListValue =  treeNodeAPI_tXMLMap_1_TXMLMAP_OUT.get_String("row16.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:thesaurusName/gmd:CI_Citation/gmd:title/gco:CharacterString");allOutsForAggregate_tXMLMap_1.add(mapped3_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_1_TXMLMAP_OUT = false;

				}//close G_TXM_M_001

 


	tos_count_tXMLMap_1_TXMLMAP_OUT++;

/**
 * [tXMLMap_1_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_1_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_1_TXMLMAP_OUT process_data_end ] stop
 */

} // End of branch "row16"




	
	/**
	 * [tFileInputXML_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_6";

	

 



/**
 * [tFileInputXML_6 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_6 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_6";

	


}
	}
	globalMap.put("tFileInputXML_6_NB_LINE",nb_line_tFileInputXML_6);

	
 

ok_Hash.put("tFileInputXML_6", true);
end_Hash.put("tFileInputXML_6", System.currentTimeMillis());




/**
 * [tFileInputXML_6 end ] stop
 */

	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	




			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row16"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tXMLMap_1_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_1_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_1_TXMLMAP_OUT end ] stop
 */




	
	/**
	 * [tAggregateRow_6_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_6_AGGOUT", false);
		start_Hash.put("tAggregateRow_6_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGOUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row18" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAggregateRow_6_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_6 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_6 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_6 utilClass_tAggregateRow_6 = new UtilClass_tAggregateRow_6();

	

	class AggOperationStruct_tAggregateRow_6 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String uuid;StringBuilder keyword_list = new StringBuilder();
           			boolean keyword_list_firstEmpty = false;
           			StringBuilder codeListValue_list = new StringBuilder();
           			boolean codeListValue_list_firstEmpty = false;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_6 other = (AggOperationStruct_tAggregateRow_6) obj;
			
							if (this.uuid == null) {
								if (other.uuid != null) 
									return false;
							} else if (!this.uuid.equals(other.uuid)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_6 operation_result_tAggregateRow_6 = null;
	AggOperationStruct_tAggregateRow_6 operation_finder_tAggregateRow_6 = new AggOperationStruct_tAggregateRow_6();
	java.util.Map<AggOperationStruct_tAggregateRow_6,AggOperationStruct_tAggregateRow_6> hash_tAggregateRow_6 = new java.util.HashMap<AggOperationStruct_tAggregateRow_6,AggOperationStruct_tAggregateRow_6>();
	
	String delimiter_tAggregateRow_6 = "|";
	

 



/**
 * [tAggregateRow_6_AGGOUT begin ] stop
 */



	
	/**
	 * [tFilterRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_5", false);
		start_Hash.put("tFilterRow_5", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row17" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_5 = 0;
		
    int nb_line_tFilterRow_5 = 0;
    int nb_line_ok_tFilterRow_5 = 0;
    int nb_line_reject_tFilterRow_5 = 0;

    class Operator_tFilterRow_5 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_5(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_5 begin ] stop
 */



	
	/**
	 * [tFilterRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_4", false);
		start_Hash.put("tFilterRow_4", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("mapped3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_4 = 0;
		
    int nb_line_tFilterRow_4 = 0;
    int nb_line_ok_tFilterRow_4 = 0;
    int nb_line_reject_tFilterRow_4 = 0;

    class Operator_tFilterRow_4 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_4(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_4 begin ] stop
 */



	
	/**
	 * [tXMLMap_1_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_1_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_1_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	
		int tos_count_tXMLMap_1_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_1 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_1");
for(Object  row_out_tXMLMap_1_TXMLMAP_IN : outs_tXMLMap_1) {//TD512
 



/**
 * [tXMLMap_1_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_1_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	

	mapped3 = null;
	if(row_out_tXMLMap_1_TXMLMAP_IN!=null && row_out_tXMLMap_1_TXMLMAP_IN instanceof mapped3Struct) {
		mapped3 = (mapped3Struct)row_out_tXMLMap_1_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_1_TXMLMAP_IN++;

/**
 * [tXMLMap_1_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_1_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_1_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "mapped3"
if(mapped3 != null) { 



	
	/**
	 * [tFilterRow_4 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	

			//mapped3
			//mapped3


			
				if(execStat){
					runStat.updateStatOnConnection("mapped3"+iterateId,1, 1);
				} 
			

		

          row17 = null;
    Operator_tFilterRow_4 ope_tFilterRow_4 = new Operator_tFilterRow_4("&&");
            ope_tFilterRow_4.matches((mapped3.codeListValue == null? false : mapped3.codeListValue.compareTo("") != 0)
                           , "codeListValue.compareTo(\"\") != 0 failed");
    
    if (ope_tFilterRow_4.getMatchFlag()) {
              if(row17 == null){ 
                row17 = new row17Struct();
              }
               row17.uuid = mapped3.uuid;
               row17.keyword = mapped3.keyword;
               row17.codeListValue = mapped3.codeListValue;    
      nb_line_ok_tFilterRow_4++;
    } else {
      nb_line_reject_tFilterRow_4++;
    }

nb_line_tFilterRow_4++;

 


	tos_count_tFilterRow_4++;

/**
 * [tFilterRow_4 main ] stop
 */
	
	/**
	 * [tFilterRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	

 



/**
 * [tFilterRow_4 process_data_begin ] stop
 */
// Start of branch "row17"
if(row17 != null) { 



	
	/**
	 * [tFilterRow_5 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	

			//row17
			//row17


			
				if(execStat){
					runStat.updateStatOnConnection("row17"+iterateId,1, 1);
				} 
			

		

          row18 = null;
    Operator_tFilterRow_5 ope_tFilterRow_5 = new Operator_tFilterRow_5("&&");
      ope_tFilterRow_5.matches((// code sample : use row17 to define the condition.
// row17.columnName1.equals("foo") ||!(row17.columnName2.equals("bar"))
// replace the following expression by your own filter condition 
//row17.codeListValue.contains("GEMET") || !(row17.codeListValue.contains("INSPIRE"))
row17.codeListValue.contains("GEMET") && !row17.codeListValue.contains("INSPIRE")), "advanced condition failed");
    
    if (ope_tFilterRow_5.getMatchFlag()) {
              if(row18 == null){ 
                row18 = new row18Struct();
              }
               row18.uuid = row17.uuid;
               row18.keyword = row17.keyword;
               row18.codeListValue = row17.codeListValue;    
      nb_line_ok_tFilterRow_5++;
    } else {
      nb_line_reject_tFilterRow_5++;
    }

nb_line_tFilterRow_5++;

 


	tos_count_tFilterRow_5++;

/**
 * [tFilterRow_5 main ] stop
 */
	
	/**
	 * [tFilterRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	

 



/**
 * [tFilterRow_5 process_data_begin ] stop
 */
// Start of branch "row18"
if(row18 != null) { 



	
	/**
	 * [tAggregateRow_6_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGOUT";

	

			//row18
			//row18


			
				if(execStat){
					runStat.updateStatOnConnection("row18"+iterateId,1, 1);
				} 
			

		
	
operation_finder_tAggregateRow_6.uuid = row18.uuid;
			

	operation_finder_tAggregateRow_6.hashCodeDirty = true;
	
	operation_result_tAggregateRow_6 = hash_tAggregateRow_6.get(operation_finder_tAggregateRow_6);

	

	if(operation_result_tAggregateRow_6 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_6 = new AggOperationStruct_tAggregateRow_6();

		operation_result_tAggregateRow_6.uuid = operation_finder_tAggregateRow_6.uuid;
				
		
		

		hash_tAggregateRow_6.put(operation_result_tAggregateRow_6, operation_result_tAggregateRow_6);
	
	} // G_OutMain_AggR_001


	
				if(row18.keyword != null) { // G_OutMain_AggR_546
				
				if(operation_result_tAggregateRow_6.keyword_list.length() > 0) {
					operation_result_tAggregateRow_6.keyword_list.append("|");
				} 
				else if(operation_result_tAggregateRow_6.keyword_list_firstEmpty){
					operation_result_tAggregateRow_6.keyword_list.append("|");
				}
					if(operation_result_tAggregateRow_6.keyword_list != null) {
						if(operation_result_tAggregateRow_6.keyword_list_firstEmpty==false && ("").equals(String.valueOf(row18.keyword))){
							operation_result_tAggregateRow_6.keyword_list_firstEmpty = true;
						}
						operation_result_tAggregateRow_6.keyword_list = operation_result_tAggregateRow_6.keyword_list.append(String.valueOf(row18.keyword));
					}
				
				} // G_OutMain_AggR_546
				
				if(row18.codeListValue != null) { // G_OutMain_AggR_546
				
				if(operation_result_tAggregateRow_6.codeListValue_list.length() > 0) {
					operation_result_tAggregateRow_6.codeListValue_list.append("|");
				} 
				else if(operation_result_tAggregateRow_6.codeListValue_list_firstEmpty){
					operation_result_tAggregateRow_6.codeListValue_list.append("|");
				}
					if(operation_result_tAggregateRow_6.codeListValue_list != null) {
						if(operation_result_tAggregateRow_6.codeListValue_list_firstEmpty==false && ("").equals(String.valueOf(row18.codeListValue))){
							operation_result_tAggregateRow_6.codeListValue_list_firstEmpty = true;
						}
						operation_result_tAggregateRow_6.codeListValue_list = operation_result_tAggregateRow_6.codeListValue_list.append(String.valueOf(row18.codeListValue));
					}
				
				} // G_OutMain_AggR_546
				


 


	tos_count_tAggregateRow_6_AGGOUT++;

/**
 * [tAggregateRow_6_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_6_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGOUT";

	

 



/**
 * [tAggregateRow_6_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_6_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGOUT";

	

 



/**
 * [tAggregateRow_6_AGGOUT process_data_end ] stop
 */

} // End of branch "row18"




	
	/**
	 * [tFilterRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	

 



/**
 * [tFilterRow_5 process_data_end ] stop
 */

} // End of branch "row17"




	
	/**
	 * [tFilterRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	

 



/**
 * [tFilterRow_4 process_data_end ] stop
 */

} // End of branch "mapped3"




	
	/**
	 * [tXMLMap_1_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_1_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_1_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	

}//TD512
 

ok_Hash.put("tXMLMap_1_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_1_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_1_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tFilterRow_4 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	
    globalMap.put("tFilterRow_4_NB_LINE", nb_line_tFilterRow_4);
    globalMap.put("tFilterRow_4_NB_LINE_OK", nb_line_ok_tFilterRow_4);
    globalMap.put("tFilterRow_4_NB_LINE_REJECT", nb_line_reject_tFilterRow_4);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("mapped3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_4", true);
end_Hash.put("tFilterRow_4", System.currentTimeMillis());




/**
 * [tFilterRow_4 end ] stop
 */

	
	/**
	 * [tFilterRow_5 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	
    globalMap.put("tFilterRow_5_NB_LINE", nb_line_tFilterRow_5);
    globalMap.put("tFilterRow_5_NB_LINE_OK", nb_line_ok_tFilterRow_5);
    globalMap.put("tFilterRow_5_NB_LINE_REJECT", nb_line_reject_tFilterRow_5);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row17"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_5", true);
end_Hash.put("tFilterRow_5", System.currentTimeMillis());




/**
 * [tFilterRow_5 end ] stop
 */

	
	/**
	 * [tAggregateRow_6_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGOUT";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row18"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAggregateRow_6_AGGOUT", true);
end_Hash.put("tAggregateRow_6_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_6_AGGOUT end ] stop
 */


	
	/**
	 * [tAdvancedHash_row19 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row19", false);
		start_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row19";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row19" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row19 = 0;
		

			   		// connection name:row19
			   		// source node:tAggregateRow_6_AGGIN - inputs:(OnRowsEnd) outputs:(row19,row19) | target node:tAdvancedHash_row19 - inputs:(row19) outputs:()
			   		// linked node: tMap_2 - inputs:(row2,row44,row6,status,row40,row8,row13,row19,row22,row23,row34,row45,row27,row15) outputs:(map)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row19 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row19Struct>getLookup(matchingModeEnum_row19);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row19", tHash_Lookup_row19);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row19 begin ] stop
 */



	
	/**
	 * [tAggregateRow_6_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_6_AGGIN", false);
		start_Hash.put("tAggregateRow_6_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGIN";

	
		int tos_count_tAggregateRow_6_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_6> values_tAggregateRow_6 = hash_tAggregateRow_6.values();

globalMap.put("tAggregateRow_6_NB_LINE", values_tAggregateRow_6.size());

for(AggOperationStruct_tAggregateRow_6 aggregated_row_tAggregateRow_6 : values_tAggregateRow_6) { // G_AggR_600



 



/**
 * [tAggregateRow_6_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_6_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGIN";

	

            				    row19.uuid = aggregated_row_tAggregateRow_6.uuid;
            				    
    								row19.keyword = aggregated_row_tAggregateRow_6.keyword_list.toString();
	    						
    								row19.codeListValue = aggregated_row_tAggregateRow_6.codeListValue_list.toString();
	    						

 


	tos_count_tAggregateRow_6_AGGIN++;

/**
 * [tAggregateRow_6_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_6_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGIN";

	

 



/**
 * [tAggregateRow_6_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row19 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

			//row19
			//row19


			
				if(execStat){
					runStat.updateStatOnConnection("row19"+iterateId,1, 1);
				} 
			

		


			   
			   

					row19Struct row19_HashRow = new row19Struct();
		   	   	   
				
				row19_HashRow.uuid = row19.uuid;
				
				row19_HashRow.keyword = row19.keyword;
				
				row19_HashRow.codeListValue = row19.codeListValue;
				
			tHash_Lookup_row19.put(row19_HashRow);
			
            




 


	tos_count_tAdvancedHash_row19++;

/**
 * [tAdvancedHash_row19 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

 



/**
 * [tAdvancedHash_row19 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row19 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

 



/**
 * [tAdvancedHash_row19 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_6_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGIN";

	

 



/**
 * [tAggregateRow_6_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_6_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_6_AGGIN", true);
end_Hash.put("tAggregateRow_6_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_6_AGGIN end ] stop
 */

	
	/**
	 * [tAdvancedHash_row19 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

tHash_Lookup_row19.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row19"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row19", true);
end_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());




/**
 * [tAdvancedHash_row19 end ] stop
 */





















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_6_AGGIN"
							globalMap.remove("tAggregateRow_6");
						
				try{
					
	
	/**
	 * [tFileInputXML_6 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_6";

	

 



/**
 * [tFileInputXML_6 finally ] stop
 */

	
	/**
	 * [tXMLMap_1_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_1_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_1_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_1";
	
	currentComponent="tXMLMap_1_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_1_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tFilterRow_4 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	

 



/**
 * [tFilterRow_4 finally ] stop
 */

	
	/**
	 * [tFilterRow_5 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	

 



/**
 * [tFilterRow_5 finally ] stop
 */

	
	/**
	 * [tAggregateRow_6_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGOUT";

	

 



/**
 * [tAggregateRow_6_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_6_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGIN";

	

 



/**
 * [tAggregateRow_6_AGGIN finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row19 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

 



/**
 * [tAdvancedHash_row19 finally ] stop
 */





















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_6_SUBPROCESS_STATE", 1);
	}
	


public static class row22Struct implements routines.system.IPersistableComparableLookupRow<row22Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String keyword;

				public String getKeyword () {
					return this.keyword;
				}
				
			    public String codeListValue;

				public String getCodeListValue () {
					return this.codeListValue;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row22Struct other = (row22Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row22Struct other) {

		other.uuid = this.uuid;
	            other.keyword = this.keyword;
	            other.codeListValue = this.codeListValue;
	            
	}

	public void copyKeysDataTo(row22Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.keyword = readString(dis,ois);
					
						this.codeListValue = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.keyword, dos, oos);
					
						writeString(this.codeListValue, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",keyword="+keyword);
		sb.append(",codeListValue="+codeListValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_8 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_8> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String keyword;

				public String getKeyword () {
					return this.keyword;
				}
				
			    public String codeListValue;

				public String getCodeListValue () {
					return this.codeListValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.keyword = readString(dis);
					
					this.codeListValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.keyword,dos);
					
					// String
				
						writeString(this.codeListValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",keyword="+keyword);
		sb.append(",codeListValue="+codeListValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_8 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String keyword;

				public String getKeyword () {
					return this.keyword;
				}
				
			    public String codeListValue;

				public String getCodeListValue () {
					return this.codeListValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.keyword = readString(dis);
					
					this.codeListValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.keyword,dos);
					
					// String
				
						writeString(this.codeListValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",keyword="+keyword);
		sb.append(",codeListValue="+codeListValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfmapped2Struct implements routines.system.IPersistableRow<copyOfcopyOfmapped2Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String keyword;

				public String getKeyword () {
					return this.keyword;
				}
				
			    public String codeListValue;

				public String getCodeListValue () {
					return this.codeListValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.keyword = readString(dis);
					
					this.codeListValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.keyword,dos);
					
					// String
				
						writeString(this.codeListValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",keyword="+keyword);
		sb.append(",codeListValue="+codeListValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfmapped2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public routines.system.Document xmldoc;

				public routines.system.Document getXmldoc () {
					return this.xmldoc;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
						this.xmldoc = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.xmldoc);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("xmldoc="+String.valueOf(xmldoc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputXML_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row20Struct row20 = new row20Struct();
copyOfcopyOfmapped2Struct copyOfcopyOfmapped2 = new copyOfcopyOfmapped2Struct();
row25Struct row25 = new row25Struct();
row22Struct row22 = new row22Struct();




	
	/**
	 * [tXMLMap_4_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_4_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_4_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_OUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row20" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tXMLMap_4_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_4_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_4_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_4_TXMLMAP_OUT__Struct Var__tXMLMap_4_TXMLMAP_OUT = new Var__tXMLMap_4_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
copyOfcopyOfmapped2Struct copyOfcopyOfmapped2_tmp = new copyOfcopyOfmapped2Struct();
copyOfcopyOfmapped2Struct copyOfcopyOfmapped2_save = null;
//the aggregate variable
copyOfcopyOfmapped2Struct copyOfcopyOfmapped2_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_4 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_4",allOutsForAggregate_tXMLMap_4);
// ###############################
class TreeNode_API_tXMLMap_4_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
	java.util.Date get_Date(String xpath, String pattern){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Date(content, pattern);
	}
	Integer get_Integer(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Integer(content);
	}
	Character get_Character(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Character(content);
	}
	Float get_Float(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Float(content);
	}
	Double get_Double(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Double(content);
	}
	Boolean get_Boolean(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Boolean(content);
	}
}
			TreeNode_API_tXMLMap_4_TXMLMAP_OUT treeNodeAPI_tXMLMap_4_TXMLMAP_OUT = new TreeNode_API_tXMLMap_4_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_4_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_4_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_4_TXMLMAP_OUT xml_api_tXMLMap_4_TXMLMAP_OUT = new XML_API_tXMLMap_4_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_4_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            
 



/**
 * [tXMLMap_4_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tFileInputXML_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_7", false);
		start_Hash.put("tFileInputXML_7", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_7";

	
		int tos_count_tFileInputXML_7 = 0;
		

	

int nb_line_tFileInputXML_7 = 0;

	String os_tFileInputXML_7 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_7=false;
	if(os_tFileInputXML_7.indexOf("windows") > -1 || os_tFileInputXML_7.indexOf("nt") > -1){
		isWindows_tFileInputXML_7=true;
	}
class NameSpaceTool_tFileInputXML_7 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_7{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_7 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_7 = null;
try {
	filename_tFileInputXML_7 = System.getProperty("java.io.tmpdir") + "/sdiDump/tmp/out.xml";
} catch(java.lang.Exception e) {
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_7 != null && filename_tFileInputXML_7 instanceof String && filename_tFileInputXML_7.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_7){
		filename_tFileInputXML_7 = filename_tFileInputXML_7.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_7 = true;
org.dom4j.Document doc_tFileInputXML_7 = null;
java.io.Closeable toClose_tFileInputXML_7 = null;
try{
	if(filename_tFileInputXML_7 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_7 = (java.io.InputStream)filename_tFileInputXML_7;
		toClose_tFileInputXML_7 = inputStream_tFileInputXML_7;
		doc_tFileInputXML_7 = reader_tFileInputXML_7.read(inputStream_tFileInputXML_7);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_7 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_7)),"UTF-8");
		toClose_tFileInputXML_7 = unicodeReader_tFileInputXML_7;
		org.xml.sax.InputSource in_tFileInputXML_7= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_7);
		doc_tFileInputXML_7 = reader_tFileInputXML_7.read(in_tFileInputXML_7);
	}
}catch(java.lang.Exception e){
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_7 = false;
} finally {
	if(toClose_tFileInputXML_7!=null) {
		toClose_tFileInputXML_7.close();
	}
}
if(isValidFile_tFileInputXML_7){
NameSpaceTool_tFileInputXML_7 nsTool_tFileInputXML_7 = new NameSpaceTool_tFileInputXML_7();
nsTool_tFileInputXML_7.countNSMap(doc_tFileInputXML_7.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_7 = nsTool_tFileInputXML_7.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_7 = doc_tFileInputXML_7.createXPath(nsTool_tFileInputXML_7.addDefaultNSPrefix("/csw:GetRecordsResponse"));  
x_tFileInputXML_7.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_7); 

java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_7 = (java.util.List<org.dom4j.tree.AbstractNode>)x_tFileInputXML_7.selectNodes(doc_tFileInputXML_7);	
XML_API_tFileInputXML_7 xml_api_tFileInputXML_7 = new XML_API_tFileInputXML_7();
String str_tFileInputXML_7 = "";
org.dom4j.Node node_tFileInputXML_7 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_7=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_7{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_7 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix(".","/csw:GetRecordsResponse"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_7 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_7 xPathUtil_tFileInputXML_7 = new XPathUtil_tFileInputXML_7();
	xPathUtil_tFileInputXML_7.initXPaths(xpaths_tFileInputXML_7, nsTool_tFileInputXML_7, xmlNameSpaceMap_tFileInputXML_7);
for (org.dom4j.tree.AbstractNode temp_tFileInputXML_7: nodeList_tFileInputXML_7) {
		nb_line_tFileInputXML_7++;
		
	row20 = null;			
	boolean whetherReject_tFileInputXML_7 = false;
	row20 = new row20Struct();
	try{
    Object obj0_tFileInputXML_7 = xpaths_tFileInputXML_7.get(0).evaluate(temp_tFileInputXML_7);
    if(obj0_tFileInputXML_7 == null) {
    	node_tFileInputXML_7 = null;
		str_tFileInputXML_7 = null;
    	
    } else if(obj0_tFileInputXML_7 instanceof org.dom4j.Node) {
    	node_tFileInputXML_7 = (org.dom4j.Node)obj0_tFileInputXML_7;
		str_tFileInputXML_7 = node_tFileInputXML_7.asXML();
    } else if(obj0_tFileInputXML_7 instanceof String || obj0_tFileInputXML_7 instanceof Number){
    	node_tFileInputXML_7 = temp_tFileInputXML_7;
    	str_tFileInputXML_7 = String.valueOf(obj0_tFileInputXML_7);
    } else if(obj0_tFileInputXML_7 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_7 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_7;
    	node_tFileInputXML_7 = nodes_tFileInputXML_7.size()>0 ? nodes_tFileInputXML_7.get(0) : null;
		str_tFileInputXML_7 = node_tFileInputXML_7==null?null:node_tFileInputXML_7.asXML();
	}
								row20.xmldoc = ParserUtils.parseTo_Document(str_tFileInputXML_7,false,"UTF-8"); 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_7 = true;
                System.err.println(e.getMessage());
                row20 = null;
    }
			
			

 



/**
 * [tFileInputXML_7 begin ] stop
 */
	
	/**
	 * [tFileInputXML_7 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_7";

	

 


	tos_count_tFileInputXML_7++;

/**
 * [tFileInputXML_7 main ] stop
 */
	
	/**
	 * [tFileInputXML_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_7";

	

 



/**
 * [tFileInputXML_7 process_data_begin ] stop
 */
// Start of branch "row20"
if(row20 != null) { 



	
	/**
	 * [tXMLMap_4_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_OUT";

	

			//row20
			//row20


			
				if(execStat){
					runStat.updateStatOnConnection("row20"+iterateId,1, 1);
				} 
			

		

	boolean rejectedInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_4_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_4_TXMLMAP_OUT = false;
	  
	
			

		
		
				//init document to flat tool
				routines.system.DocumentToFlat docToFlat_tXMLMap_4_TXMLMAP_OUT = new routines.system.DocumentToFlat();
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setOriginalLoop("/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:keyword/gco:CharacterString");
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setIsOptional(false);
				if(row20.xmldoc == null || row20.xmldoc.getDocument() == null) {
					throw new RuntimeException("row20.xmldoc can't be empty");
				}
				org.dom4j.Document doc_tXMLMap_4_TXMLMAP_OUT = row20.xmldoc.getDocument();
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setDoc(doc_tXMLMap_4_TXMLMAP_OUT);
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setDefineNS(true);
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setNamespaceTool(nsTool_tXMLMap_4_TXMLMAP_OUT);
				
					java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_4_TXMLMAP_OUT = new java.util.HashMap<String,String>();
					xmlNameSpaceMap_tXMLMap_4_TXMLMAP_OUT.put("gco","http://www.isotc211.org/2005/gco");xmlNameSpaceMap_tXMLMap_4_TXMLMAP_OUT.put("gmx","http://www.isotc211.org/2005/gmx");xmlNameSpaceMap_tXMLMap_4_TXMLMAP_OUT.put("csw","http://www.opengis.net/cat/csw/2.0.2");xmlNameSpaceMap_tXMLMap_4_TXMLMAP_OUT.put("gml","http://www.opengis.net/gml");xmlNameSpaceMap_tXMLMap_4_TXMLMAP_OUT.put("gmd","http://www.isotc211.org/2005/gmd");
				
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_4_TXMLMAP_OUT);
				
				String[] absolutePathMappings_tXMLMap_4_TXMLMAP_OUT = new String[3];
				String[] relativePathMappings_tXMLMap_4_TXMLMAP_OUT = new String[3];
				
				absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[0] = "row20.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:type/gmd:MD_KeywordTypeCode/@codeListValue";
				relativePathMappings_tXMLMap_4_TXMLMAP_OUT[0] = "../../gmd:type/gmd:MD_KeywordTypeCode/@codeListValue";
				
				absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[1] = "row20.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:keyword/gco:CharacterString";
				relativePathMappings_tXMLMap_4_TXMLMAP_OUT[1] = ".";
				
				absolutePathMappings_tXMLMap_4_TXMLMAP_OUT[2] = "row20.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:fileIdentifier/gco:CharacterString";
				relativePathMappings_tXMLMap_4_TXMLMAP_OUT[2] = "../../../../../../gmd:fileIdentifier/gco:CharacterString";
				
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setAbsolutePathMappings(absolutePathMappings_tXMLMap_4_TXMLMAP_OUT);
				docToFlat_tXMLMap_4_TXMLMAP_OUT.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_4_TXMLMAP_OUT);
				//generate document to flat data
				docToFlat_tXMLMap_4_TXMLMAP_OUT.flat();
				//get flat data
				java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_4_TXMLMAP_OUT = docToFlat_tXMLMap_4_TXMLMAP_OUT.getResultSet();
				
				for (java.util.Map<String,String> oneRow_tXMLMap_4_TXMLMAP_OUT: resultSet_tXMLMap_4_TXMLMAP_OUT) { // G_TXM_M_001
					nb_line_tXMLMap_4_TXMLMAP_OUT++;
			    	rejectedInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;
			    	rejectedDocInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;
					mainRowRejected_tXMLMap_4_TXMLMAP_OUT=false;
				    isMatchDocRowtXMLMap_4_TXMLMAP_OUT = false;
					
			    	treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.clear();
			    	for(java.util.Map.Entry<String, String> entry_tXMLMap_4_TXMLMAP_OUT : oneRow_tXMLMap_4_TXMLMAP_OUT.entrySet()) {
						treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.put(entry_tXMLMap_4_TXMLMAP_OUT.getKey(),entry_tXMLMap_4_TXMLMAP_OUT.getValue());
					}
					


			
{ // start of Var scope

	// ###############################
	// # Vars tables

Var__tXMLMap_4_TXMLMAP_OUT__Struct Var = Var__tXMLMap_4_TXMLMAP_OUT;
		// ###############################
		// # Output tables

copyOfcopyOfmapped2 = null;


// # Output table : 'copyOfcopyOfmapped2'

copyOfcopyOfmapped2_tmp = new copyOfcopyOfmapped2Struct();
copyOfcopyOfmapped2_tmp.uuid = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row20.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:fileIdentifier/gco:CharacterString");
copyOfcopyOfmapped2_tmp.keyword = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row20.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:keyword/gco:CharacterString");
copyOfcopyOfmapped2_tmp.codeListValue = treeNodeAPI_tXMLMap_4_TXMLMAP_OUT.get_String("row20.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:type/gmd:MD_KeywordTypeCode/@codeListValue");allOutsForAggregate_tXMLMap_4.add(copyOfcopyOfmapped2_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_4_TXMLMAP_OUT = false;


		}//G_TXM_M_001 close
	

 


	tos_count_tXMLMap_4_TXMLMAP_OUT++;

/**
 * [tXMLMap_4_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_4_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_4_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_4_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_4_TXMLMAP_OUT process_data_end ] stop
 */

} // End of branch "row20"




	
	/**
	 * [tFileInputXML_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_7";

	

 



/**
 * [tFileInputXML_7 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_7 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_7";

	


}
	}
	globalMap.put("tFileInputXML_7_NB_LINE",nb_line_tFileInputXML_7);

	
 

ok_Hash.put("tFileInputXML_7", true);
end_Hash.put("tFileInputXML_7", System.currentTimeMillis());




/**
 * [tFileInputXML_7 end ] stop
 */

	
	/**
	 * [tXMLMap_4_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_OUT";

	




			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row20"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tXMLMap_4_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_4_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_4_TXMLMAP_OUT end ] stop
 */



	
	/**
	 * [tAggregateRow_8_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_8_AGGOUT", false);
		start_Hash.put("tAggregateRow_8_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGOUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row25" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAggregateRow_8_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_8 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_8 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_8 utilClass_tAggregateRow_8 = new UtilClass_tAggregateRow_8();

	

	class AggOperationStruct_tAggregateRow_8 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String uuid;StringBuilder keyword_list = new StringBuilder();
           			boolean keyword_list_firstEmpty = false;
           			StringBuilder codeListValue_list = new StringBuilder();
           			boolean codeListValue_list_firstEmpty = false;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_8 other = (AggOperationStruct_tAggregateRow_8) obj;
			
							if (this.uuid == null) {
								if (other.uuid != null) 
									return false;
							} else if (!this.uuid.equals(other.uuid)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_8 operation_result_tAggregateRow_8 = null;
	AggOperationStruct_tAggregateRow_8 operation_finder_tAggregateRow_8 = new AggOperationStruct_tAggregateRow_8();
	java.util.Map<AggOperationStruct_tAggregateRow_8,AggOperationStruct_tAggregateRow_8> hash_tAggregateRow_8 = new java.util.HashMap<AggOperationStruct_tAggregateRow_8,AggOperationStruct_tAggregateRow_8>();
	
	String delimiter_tAggregateRow_8 = "|";
	

 



/**
 * [tAggregateRow_8_AGGOUT begin ] stop
 */



	
	/**
	 * [tFilterRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_7", false);
		start_Hash.put("tFilterRow_7", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_7";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("copyOfcopyOfmapped2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_7 = 0;
		
    int nb_line_tFilterRow_7 = 0;
    int nb_line_ok_tFilterRow_7 = 0;
    int nb_line_reject_tFilterRow_7 = 0;

    class Operator_tFilterRow_7 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_7(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_7 begin ] stop
 */



	
	/**
	 * [tXMLMap_4_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_4_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_4_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_IN";

	
		int tos_count_tXMLMap_4_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_4 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_4");
for(Object  row_out_tXMLMap_4_TXMLMAP_IN : outs_tXMLMap_4) {//TD512
 



/**
 * [tXMLMap_4_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_4_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_IN";

	

	copyOfcopyOfmapped2 = null;
	if(row_out_tXMLMap_4_TXMLMAP_IN!=null && row_out_tXMLMap_4_TXMLMAP_IN instanceof copyOfcopyOfmapped2Struct) {
		copyOfcopyOfmapped2 = (copyOfcopyOfmapped2Struct)row_out_tXMLMap_4_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_4_TXMLMAP_IN++;

/**
 * [tXMLMap_4_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_4_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_4_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfmapped2"
if(copyOfcopyOfmapped2 != null) { 



	
	/**
	 * [tFilterRow_7 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_7";

	

			//copyOfcopyOfmapped2
			//copyOfcopyOfmapped2


			
				if(execStat){
					runStat.updateStatOnConnection("copyOfcopyOfmapped2"+iterateId,1, 1);
				} 
			

		

          row25 = null;
    Operator_tFilterRow_7 ope_tFilterRow_7 = new Operator_tFilterRow_7("&&");
            ope_tFilterRow_7.matches((copyOfcopyOfmapped2.codeListValue == null? false : copyOfcopyOfmapped2.codeListValue.compareTo("place") == 0)
                           , "codeListValue.compareTo(\"place\") == 0 failed");
    
    if (ope_tFilterRow_7.getMatchFlag()) {
              if(row25 == null){ 
                row25 = new row25Struct();
              }
               row25.uuid = copyOfcopyOfmapped2.uuid;
               row25.keyword = copyOfcopyOfmapped2.keyword;
               row25.codeListValue = copyOfcopyOfmapped2.codeListValue;    
      nb_line_ok_tFilterRow_7++;
    } else {
      nb_line_reject_tFilterRow_7++;
    }

nb_line_tFilterRow_7++;

 


	tos_count_tFilterRow_7++;

/**
 * [tFilterRow_7 main ] stop
 */
	
	/**
	 * [tFilterRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_7";

	

 



/**
 * [tFilterRow_7 process_data_begin ] stop
 */
// Start of branch "row25"
if(row25 != null) { 



	
	/**
	 * [tAggregateRow_8_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGOUT";

	

			//row25
			//row25


			
				if(execStat){
					runStat.updateStatOnConnection("row25"+iterateId,1, 1);
				} 
			

		
	
operation_finder_tAggregateRow_8.uuid = row25.uuid;
			

	operation_finder_tAggregateRow_8.hashCodeDirty = true;
	
	operation_result_tAggregateRow_8 = hash_tAggregateRow_8.get(operation_finder_tAggregateRow_8);

	

	if(operation_result_tAggregateRow_8 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_8 = new AggOperationStruct_tAggregateRow_8();

		operation_result_tAggregateRow_8.uuid = operation_finder_tAggregateRow_8.uuid;
				
		
		

		hash_tAggregateRow_8.put(operation_result_tAggregateRow_8, operation_result_tAggregateRow_8);
	
	} // G_OutMain_AggR_001


	
				if(row25.keyword != null) { // G_OutMain_AggR_546
				
				if(operation_result_tAggregateRow_8.keyword_list.length() > 0) {
					operation_result_tAggregateRow_8.keyword_list.append("|");
				} 
				else if(operation_result_tAggregateRow_8.keyword_list_firstEmpty){
					operation_result_tAggregateRow_8.keyword_list.append("|");
				}
					if(operation_result_tAggregateRow_8.keyword_list != null) {
						if(operation_result_tAggregateRow_8.keyword_list_firstEmpty==false && ("").equals(String.valueOf(row25.keyword))){
							operation_result_tAggregateRow_8.keyword_list_firstEmpty = true;
						}
						operation_result_tAggregateRow_8.keyword_list = operation_result_tAggregateRow_8.keyword_list.append(String.valueOf(row25.keyword));
					}
				
				} // G_OutMain_AggR_546
				
				if(row25.codeListValue != null) { // G_OutMain_AggR_546
				
				if(operation_result_tAggregateRow_8.codeListValue_list.length() > 0) {
					operation_result_tAggregateRow_8.codeListValue_list.append("|");
				} 
				else if(operation_result_tAggregateRow_8.codeListValue_list_firstEmpty){
					operation_result_tAggregateRow_8.codeListValue_list.append("|");
				}
					if(operation_result_tAggregateRow_8.codeListValue_list != null) {
						if(operation_result_tAggregateRow_8.codeListValue_list_firstEmpty==false && ("").equals(String.valueOf(row25.codeListValue))){
							operation_result_tAggregateRow_8.codeListValue_list_firstEmpty = true;
						}
						operation_result_tAggregateRow_8.codeListValue_list = operation_result_tAggregateRow_8.codeListValue_list.append(String.valueOf(row25.codeListValue));
					}
				
				} // G_OutMain_AggR_546
				


 


	tos_count_tAggregateRow_8_AGGOUT++;

/**
 * [tAggregateRow_8_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_8_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGOUT";

	

 



/**
 * [tAggregateRow_8_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_8_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGOUT";

	

 



/**
 * [tAggregateRow_8_AGGOUT process_data_end ] stop
 */

} // End of branch "row25"




	
	/**
	 * [tFilterRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_7";

	

 



/**
 * [tFilterRow_7 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfmapped2"




	
	/**
	 * [tXMLMap_4_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_4_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_4_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_IN";

	

}//TD512
 

ok_Hash.put("tXMLMap_4_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_4_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_4_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tFilterRow_7 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_7";

	
    globalMap.put("tFilterRow_7_NB_LINE", nb_line_tFilterRow_7);
    globalMap.put("tFilterRow_7_NB_LINE_OK", nb_line_ok_tFilterRow_7);
    globalMap.put("tFilterRow_7_NB_LINE_REJECT", nb_line_reject_tFilterRow_7);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("copyOfcopyOfmapped2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_7", true);
end_Hash.put("tFilterRow_7", System.currentTimeMillis());




/**
 * [tFilterRow_7 end ] stop
 */

	
	/**
	 * [tAggregateRow_8_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGOUT";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row25"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAggregateRow_8_AGGOUT", true);
end_Hash.put("tAggregateRow_8_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_8_AGGOUT end ] stop
 */


	
	/**
	 * [tAdvancedHash_row22 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row22", false);
		start_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row22";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row22" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row22 = 0;
		

			   		// connection name:row22
			   		// source node:tAggregateRow_8_AGGIN - inputs:(OnRowsEnd) outputs:(row22,row22) | target node:tAdvancedHash_row22 - inputs:(row22) outputs:()
			   		// linked node: tMap_2 - inputs:(row2,row44,row6,status,row40,row8,row13,row19,row22,row23,row34,row45,row27,row15) outputs:(map)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row22 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row22Struct>getLookup(matchingModeEnum_row22);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row22", tHash_Lookup_row22);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row22 begin ] stop
 */



	
	/**
	 * [tAggregateRow_8_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_8_AGGIN", false);
		start_Hash.put("tAggregateRow_8_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGIN";

	
		int tos_count_tAggregateRow_8_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_8> values_tAggregateRow_8 = hash_tAggregateRow_8.values();

globalMap.put("tAggregateRow_8_NB_LINE", values_tAggregateRow_8.size());

for(AggOperationStruct_tAggregateRow_8 aggregated_row_tAggregateRow_8 : values_tAggregateRow_8) { // G_AggR_600



 



/**
 * [tAggregateRow_8_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_8_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGIN";

	

            				    row22.uuid = aggregated_row_tAggregateRow_8.uuid;
            				    
    								row22.keyword = aggregated_row_tAggregateRow_8.keyword_list.toString();
	    						
    								row22.codeListValue = aggregated_row_tAggregateRow_8.codeListValue_list.toString();
	    						

 


	tos_count_tAggregateRow_8_AGGIN++;

/**
 * [tAggregateRow_8_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_8_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGIN";

	

 



/**
 * [tAggregateRow_8_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row22 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	

			//row22
			//row22


			
				if(execStat){
					runStat.updateStatOnConnection("row22"+iterateId,1, 1);
				} 
			

		


			   
			   

					row22Struct row22_HashRow = new row22Struct();
		   	   	   
				
				row22_HashRow.uuid = row22.uuid;
				
				row22_HashRow.keyword = row22.keyword;
				
				row22_HashRow.codeListValue = row22.codeListValue;
				
			tHash_Lookup_row22.put(row22_HashRow);
			
            




 


	tos_count_tAdvancedHash_row22++;

/**
 * [tAdvancedHash_row22 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	

 



/**
 * [tAdvancedHash_row22 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row22 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	

 



/**
 * [tAdvancedHash_row22 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_8_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGIN";

	

 



/**
 * [tAggregateRow_8_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_8_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_8_AGGIN", true);
end_Hash.put("tAggregateRow_8_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_8_AGGIN end ] stop
 */

	
	/**
	 * [tAdvancedHash_row22 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	

tHash_Lookup_row22.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row22"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row22", true);
end_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());




/**
 * [tAdvancedHash_row22 end ] stop
 */


















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_8_AGGIN"
							globalMap.remove("tAggregateRow_8");
						
				try{
					
	
	/**
	 * [tFileInputXML_7 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_7";

	

 



/**
 * [tFileInputXML_7 finally ] stop
 */

	
	/**
	 * [tXMLMap_4_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_4_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_4_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_4";
	
	currentComponent="tXMLMap_4_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_4_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tFilterRow_7 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_7";

	

 



/**
 * [tFilterRow_7 finally ] stop
 */

	
	/**
	 * [tAggregateRow_8_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGOUT";

	

 



/**
 * [tAggregateRow_8_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_8_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGIN";

	

 



/**
 * [tAggregateRow_8_AGGIN finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row22 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	

 



/**
 * [tAdvancedHash_row22 finally ] stop
 */


















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_7_SUBPROCESS_STATE", 1);
	}
	


public static class row23Struct implements routines.system.IPersistableComparableLookupRow<row23Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String useLimitation;

				public String getUseLimitation () {
					return this.useLimitation;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row23Struct other = (row23Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row23Struct other) {

		other.uuid = this.uuid;
	            other.useLimitation = this.useLimitation;
	            
	}

	public void copyKeysDataTo(row23Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.useLimitation = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.useLimitation, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",useLimitation="+useLimitation);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public routines.system.Document xmldoc;

				public routines.system.Document getXmldoc () {
					return this.xmldoc;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
						this.xmldoc = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.xmldoc);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("xmldoc="+String.valueOf(xmldoc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputXML_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row24Struct row24 = new row24Struct();
row23Struct row23 = new row23Struct();




	
	/**
	 * [tXMLMap_5_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_5_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_5_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_OUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row24" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tXMLMap_5_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_5_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_5_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_5_TXMLMAP_OUT__Struct Var__tXMLMap_5_TXMLMAP_OUT = new Var__tXMLMap_5_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
row23Struct row23_tmp = new row23Struct();
row23Struct row23_save = null;
//the aggregate variable
row23Struct row23_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_5 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_5",allOutsForAggregate_tXMLMap_5);
// ###############################
class TreeNode_API_tXMLMap_5_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
	java.util.Date get_Date(String xpath, String pattern){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Date(content, pattern);
	}
	Integer get_Integer(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Integer(content);
	}
	Character get_Character(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Character(content);
	}
	Float get_Float(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Float(content);
	}
	Double get_Double(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Double(content);
	}
	Boolean get_Boolean(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Boolean(content);
	}
}
			TreeNode_API_tXMLMap_5_TXMLMAP_OUT treeNodeAPI_tXMLMap_5_TXMLMAP_OUT = new TreeNode_API_tXMLMap_5_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_5_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_5_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_5_TXMLMAP_OUT xml_api_tXMLMap_5_TXMLMAP_OUT = new XML_API_tXMLMap_5_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_5_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            
 



/**
 * [tXMLMap_5_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tFileInputXML_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_9", false);
		start_Hash.put("tFileInputXML_9", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_9";

	
		int tos_count_tFileInputXML_9 = 0;
		

	

int nb_line_tFileInputXML_9 = 0;

	String os_tFileInputXML_9 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_9=false;
	if(os_tFileInputXML_9.indexOf("windows") > -1 || os_tFileInputXML_9.indexOf("nt") > -1){
		isWindows_tFileInputXML_9=true;
	}
class NameSpaceTool_tFileInputXML_9 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_9{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_9 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_9 = null;
try {
	filename_tFileInputXML_9 = System.getProperty("java.io.tmpdir") + "/sdiDump/tmp/out.xml";
} catch(java.lang.Exception e) {
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_9 != null && filename_tFileInputXML_9 instanceof String && filename_tFileInputXML_9.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_9){
		filename_tFileInputXML_9 = filename_tFileInputXML_9.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_9 = true;
org.dom4j.Document doc_tFileInputXML_9 = null;
java.io.Closeable toClose_tFileInputXML_9 = null;
try{
	if(filename_tFileInputXML_9 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_9 = (java.io.InputStream)filename_tFileInputXML_9;
		toClose_tFileInputXML_9 = inputStream_tFileInputXML_9;
		doc_tFileInputXML_9 = reader_tFileInputXML_9.read(inputStream_tFileInputXML_9);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_9 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_9)),"UTF-8");
		toClose_tFileInputXML_9 = unicodeReader_tFileInputXML_9;
		org.xml.sax.InputSource in_tFileInputXML_9= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_9);
		doc_tFileInputXML_9 = reader_tFileInputXML_9.read(in_tFileInputXML_9);
	}
}catch(java.lang.Exception e){
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_9 = false;
} finally {
	if(toClose_tFileInputXML_9!=null) {
		toClose_tFileInputXML_9.close();
	}
}
if(isValidFile_tFileInputXML_9){
NameSpaceTool_tFileInputXML_9 nsTool_tFileInputXML_9 = new NameSpaceTool_tFileInputXML_9();
nsTool_tFileInputXML_9.countNSMap(doc_tFileInputXML_9.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_9 = nsTool_tFileInputXML_9.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_9 = doc_tFileInputXML_9.createXPath(nsTool_tFileInputXML_9.addDefaultNSPrefix("/csw:GetRecordsResponse"));  
x_tFileInputXML_9.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_9); 

java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_9 = (java.util.List<org.dom4j.tree.AbstractNode>)x_tFileInputXML_9.selectNodes(doc_tFileInputXML_9);	
XML_API_tFileInputXML_9 xml_api_tFileInputXML_9 = new XML_API_tFileInputXML_9();
String str_tFileInputXML_9 = "";
org.dom4j.Node node_tFileInputXML_9 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_9=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_9{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_9 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix(".","/csw:GetRecordsResponse"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_9 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_9 xPathUtil_tFileInputXML_9 = new XPathUtil_tFileInputXML_9();
	xPathUtil_tFileInputXML_9.initXPaths(xpaths_tFileInputXML_9, nsTool_tFileInputXML_9, xmlNameSpaceMap_tFileInputXML_9);
for (org.dom4j.tree.AbstractNode temp_tFileInputXML_9: nodeList_tFileInputXML_9) {
		nb_line_tFileInputXML_9++;
		
	row24 = null;			
	boolean whetherReject_tFileInputXML_9 = false;
	row24 = new row24Struct();
	try{
    Object obj0_tFileInputXML_9 = xpaths_tFileInputXML_9.get(0).evaluate(temp_tFileInputXML_9);
    if(obj0_tFileInputXML_9 == null) {
    	node_tFileInputXML_9 = null;
		str_tFileInputXML_9 = null;
    	
    } else if(obj0_tFileInputXML_9 instanceof org.dom4j.Node) {
    	node_tFileInputXML_9 = (org.dom4j.Node)obj0_tFileInputXML_9;
		str_tFileInputXML_9 = node_tFileInputXML_9.asXML();
    } else if(obj0_tFileInputXML_9 instanceof String || obj0_tFileInputXML_9 instanceof Number){
    	node_tFileInputXML_9 = temp_tFileInputXML_9;
    	str_tFileInputXML_9 = String.valueOf(obj0_tFileInputXML_9);
    } else if(obj0_tFileInputXML_9 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_9 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_9;
    	node_tFileInputXML_9 = nodes_tFileInputXML_9.size()>0 ? nodes_tFileInputXML_9.get(0) : null;
		str_tFileInputXML_9 = node_tFileInputXML_9==null?null:node_tFileInputXML_9.asXML();
	}
								row24.xmldoc = ParserUtils.parseTo_Document(str_tFileInputXML_9,false,"UTF-8"); 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_9 = true;
                System.err.println(e.getMessage());
                row24 = null;
    }
			
			

 



/**
 * [tFileInputXML_9 begin ] stop
 */
	
	/**
	 * [tFileInputXML_9 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_9";

	

 


	tos_count_tFileInputXML_9++;

/**
 * [tFileInputXML_9 main ] stop
 */
	
	/**
	 * [tFileInputXML_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_9";

	

 



/**
 * [tFileInputXML_9 process_data_begin ] stop
 */
// Start of branch "row24"
if(row24 != null) { 



	
	/**
	 * [tXMLMap_5_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_OUT";

	

			//row24
			//row24


			
				if(execStat){
					runStat.updateStatOnConnection("row24"+iterateId,1, 1);
				} 
			

		

	boolean rejectedInnerJoin_tXMLMap_5_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_5_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_5_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_5_TXMLMAP_OUT = false;
	  
	
			

		
		
				//init document to flat tool
				routines.system.DocumentToFlat docToFlat_tXMLMap_5_TXMLMAP_OUT = new routines.system.DocumentToFlat();
				docToFlat_tXMLMap_5_TXMLMAP_OUT.setOriginalLoop("/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:fileIdentifier/gco:CharacterString");
				docToFlat_tXMLMap_5_TXMLMAP_OUT.setIsOptional(false);
				if(row24.xmldoc == null || row24.xmldoc.getDocument() == null) {
					throw new RuntimeException("row24.xmldoc can't be empty");
				}
				org.dom4j.Document doc_tXMLMap_5_TXMLMAP_OUT = row24.xmldoc.getDocument();
				docToFlat_tXMLMap_5_TXMLMAP_OUT.setDoc(doc_tXMLMap_5_TXMLMAP_OUT);
				docToFlat_tXMLMap_5_TXMLMAP_OUT.setDefineNS(true);
				docToFlat_tXMLMap_5_TXMLMAP_OUT.setNamespaceTool(nsTool_tXMLMap_5_TXMLMAP_OUT);
				
					java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_5_TXMLMAP_OUT = new java.util.HashMap<String,String>();
					xmlNameSpaceMap_tXMLMap_5_TXMLMAP_OUT.put("gco","http://www.isotc211.org/2005/gco");xmlNameSpaceMap_tXMLMap_5_TXMLMAP_OUT.put("gmx","http://www.isotc211.org/2005/gmx");xmlNameSpaceMap_tXMLMap_5_TXMLMAP_OUT.put("csw","http://www.opengis.net/cat/csw/2.0.2");xmlNameSpaceMap_tXMLMap_5_TXMLMAP_OUT.put("gml","http://www.opengis.net/gml");xmlNameSpaceMap_tXMLMap_5_TXMLMAP_OUT.put("gmd","http://www.isotc211.org/2005/gmd");
				
				docToFlat_tXMLMap_5_TXMLMAP_OUT.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_5_TXMLMAP_OUT);
				
				String[] absolutePathMappings_tXMLMap_5_TXMLMAP_OUT = new String[2];
				String[] relativePathMappings_tXMLMap_5_TXMLMAP_OUT = new String[2];
				
				absolutePathMappings_tXMLMap_5_TXMLMAP_OUT[0] = "row24.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:resourceConstraints/gmd:MD_Constraints/gmd:useLimitation/gco:CharacterString";
				relativePathMappings_tXMLMap_5_TXMLMAP_OUT[0] = "../../gmd:identificationInfo/gmd:MD_DataIdentification/gmd:resourceConstraints/gmd:MD_Constraints/gmd:useLimitation/gco:CharacterString";
				
				absolutePathMappings_tXMLMap_5_TXMLMAP_OUT[1] = "row24.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:fileIdentifier/gco:CharacterString";
				relativePathMappings_tXMLMap_5_TXMLMAP_OUT[1] = ".";
				
				docToFlat_tXMLMap_5_TXMLMAP_OUT.setAbsolutePathMappings(absolutePathMappings_tXMLMap_5_TXMLMAP_OUT);
				docToFlat_tXMLMap_5_TXMLMAP_OUT.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_5_TXMLMAP_OUT);
				//generate document to flat data
				docToFlat_tXMLMap_5_TXMLMAP_OUT.flat();
				//get flat data
				java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_5_TXMLMAP_OUT = docToFlat_tXMLMap_5_TXMLMAP_OUT.getResultSet();
				
				for (java.util.Map<String,String> oneRow_tXMLMap_5_TXMLMAP_OUT: resultSet_tXMLMap_5_TXMLMAP_OUT) { // G_TXM_M_001
					nb_line_tXMLMap_5_TXMLMAP_OUT++;
			    	rejectedInnerJoin_tXMLMap_5_TXMLMAP_OUT = false;
			    	rejectedDocInnerJoin_tXMLMap_5_TXMLMAP_OUT = false;
					mainRowRejected_tXMLMap_5_TXMLMAP_OUT=false;
				    isMatchDocRowtXMLMap_5_TXMLMAP_OUT = false;
					
			    	treeNodeAPI_tXMLMap_5_TXMLMAP_OUT.clear();
			    	for(java.util.Map.Entry<String, String> entry_tXMLMap_5_TXMLMAP_OUT : oneRow_tXMLMap_5_TXMLMAP_OUT.entrySet()) {
						treeNodeAPI_tXMLMap_5_TXMLMAP_OUT.put(entry_tXMLMap_5_TXMLMAP_OUT.getKey(),entry_tXMLMap_5_TXMLMAP_OUT.getValue());
					}
					


			
{ // start of Var scope

	// ###############################
	// # Vars tables

Var__tXMLMap_5_TXMLMAP_OUT__Struct Var = Var__tXMLMap_5_TXMLMAP_OUT;
		// ###############################
		// # Output tables

row23 = null;


// # Output table : 'row23'

row23_tmp = new row23Struct();
row23_tmp.uuid = treeNodeAPI_tXMLMap_5_TXMLMAP_OUT.get_String("row24.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:fileIdentifier/gco:CharacterString");
row23_tmp.useLimitation = treeNodeAPI_tXMLMap_5_TXMLMAP_OUT.get_String("row24.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:resourceConstraints/gmd:MD_Constraints/gmd:useLimitation/gco:CharacterString");allOutsForAggregate_tXMLMap_5.add(row23_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_5_TXMLMAP_OUT = false;


		}//G_TXM_M_001 close
	

 


	tos_count_tXMLMap_5_TXMLMAP_OUT++;

/**
 * [tXMLMap_5_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_5_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_5_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_5_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_5_TXMLMAP_OUT process_data_end ] stop
 */

} // End of branch "row24"




	
	/**
	 * [tFileInputXML_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_9";

	

 



/**
 * [tFileInputXML_9 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_9 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_9";

	


}
	}
	globalMap.put("tFileInputXML_9_NB_LINE",nb_line_tFileInputXML_9);

	
 

ok_Hash.put("tFileInputXML_9", true);
end_Hash.put("tFileInputXML_9", System.currentTimeMillis());




/**
 * [tFileInputXML_9 end ] stop
 */

	
	/**
	 * [tXMLMap_5_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_OUT";

	




			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row24"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tXMLMap_5_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_5_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_5_TXMLMAP_OUT end ] stop
 */


	
	/**
	 * [tAdvancedHash_row23 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row23", false);
		start_Hash.put("tAdvancedHash_row23", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row23";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row23" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row23 = 0;
		

			   		// connection name:row23
			   		// source node:tXMLMap_5_TXMLMAP_IN - inputs:(OnRowsEnd) outputs:(row23,row23) | target node:tAdvancedHash_row23 - inputs:(row23) outputs:()
			   		// linked node: tMap_2 - inputs:(row2,row44,row6,status,row40,row8,row13,row19,row22,row23,row34,row45,row27,row15) outputs:(map)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row23 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct> tHash_Lookup_row23 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row23Struct>getLookup(matchingModeEnum_row23);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row23", tHash_Lookup_row23);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row23 begin ] stop
 */



	
	/**
	 * [tXMLMap_5_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_5_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_5_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_IN";

	
		int tos_count_tXMLMap_5_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_5 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_5");
for(Object  row_out_tXMLMap_5_TXMLMAP_IN : outs_tXMLMap_5) {//TD512
 



/**
 * [tXMLMap_5_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_5_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_IN";

	

	row23 = null;
	if(row_out_tXMLMap_5_TXMLMAP_IN!=null && row_out_tXMLMap_5_TXMLMAP_IN instanceof row23Struct) {
		row23 = (row23Struct)row_out_tXMLMap_5_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_5_TXMLMAP_IN++;

/**
 * [tXMLMap_5_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_5_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_5_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "row23"
if(row23 != null) { 



	
	/**
	 * [tAdvancedHash_row23 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

			//row23
			//row23


			
				if(execStat){
					runStat.updateStatOnConnection("row23"+iterateId,1, 1);
				} 
			

		


			   
			   

					row23Struct row23_HashRow = new row23Struct();
		   	   	   
				
				row23_HashRow.uuid = row23.uuid;
				
				row23_HashRow.useLimitation = row23.useLimitation;
				
			tHash_Lookup_row23.put(row23_HashRow);
			
            




 


	tos_count_tAdvancedHash_row23++;

/**
 * [tAdvancedHash_row23 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

 



/**
 * [tAdvancedHash_row23 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row23 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

 



/**
 * [tAdvancedHash_row23 process_data_end ] stop
 */

} // End of branch "row23"




	
	/**
	 * [tXMLMap_5_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_5_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_5_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_IN";

	

}//TD512
 

ok_Hash.put("tXMLMap_5_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_5_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_5_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tAdvancedHash_row23 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

tHash_Lookup_row23.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row23"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row23", true);
end_Hash.put("tAdvancedHash_row23", System.currentTimeMillis());




/**
 * [tAdvancedHash_row23 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_9 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_9";

	

 



/**
 * [tFileInputXML_9 finally ] stop
 */

	
	/**
	 * [tXMLMap_5_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_5_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_5_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_5";
	
	currentComponent="tXMLMap_5_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_5_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row23 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

 



/**
 * [tAdvancedHash_row23 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_9_SUBPROCESS_STATE", 1);
	}
	


public static class row34Struct implements routines.system.IPersistableComparableLookupRow<row34Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String url;

				public String getUrl () {
					return this.url;
				}
				
			    public String protocol;

				public String getProtocol () {
					return this.protocol;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row34Struct other = (row34Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row34Struct other) {

		other.uuid = this.uuid;
	            other.url = this.url;
	            other.protocol = this.protocol;
	            
	}

	public void copyKeysDataTo(row34Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.url = readString(dis,ois);
					
						this.protocol = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.url, dos, oos);
					
						writeString(this.protocol, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",url="+url);
		sb.append(",protocol="+protocol);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_7 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_7> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String url;

				public String getUrl () {
					return this.url;
				}
				
			    public String protocol;

				public String getProtocol () {
					return this.protocol;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.url = readString(dis);
					
					this.protocol = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.url,dos);
					
					// String
				
						writeString(this.protocol,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",url="+url);
		sb.append(",protocol="+protocol);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_7 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row35Struct implements routines.system.IPersistableRow<row35Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String url;

				public String getUrl () {
					return this.url;
				}
				
			    public String protocol;

				public String getProtocol () {
					return this.protocol;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.url = readString(dis);
					
					this.protocol = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.url,dos);
					
					// String
				
						writeString(this.protocol,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",url="+url);
		sb.append(",protocol="+protocol);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row35Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row33Struct implements routines.system.IPersistableRow<row33Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String url;

				public String getUrl () {
					return this.url;
				}
				
			    public String protocol;

				public String getProtocol () {
					return this.protocol;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.url = readString(dis);
					
					this.protocol = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.url,dos);
					
					// String
				
						writeString(this.protocol,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",url="+url);
		sb.append(",protocol="+protocol);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row33Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfmapStruct implements routines.system.IPersistableRow<copyOfmapStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String url;

				public String getUrl () {
					return this.url;
				}
				
			    public String protocol;

				public String getProtocol () {
					return this.protocol;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.url = readString(dis);
					
					this.protocol = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.url,dos);
					
					// String
				
						writeString(this.protocol,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",url="+url);
		sb.append(",protocol="+protocol);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfmapStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public routines.system.Document xmldoc;

				public routines.system.Document getXmldoc () {
					return this.xmldoc;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
						this.xmldoc = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.xmldoc);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("xmldoc="+String.valueOf(xmldoc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputXML_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row32Struct row32 = new row32Struct();
copyOfmapStruct copyOfmap = new copyOfmapStruct();
row33Struct row33 = new row33Struct();
row35Struct row35 = new row35Struct();
row34Struct row34 = new row34Struct();




	
	/**
	 * [tXMLMap_7_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_7_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_7_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_OUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row32" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tXMLMap_7_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_7_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_7_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_7_TXMLMAP_OUT__Struct Var__tXMLMap_7_TXMLMAP_OUT = new Var__tXMLMap_7_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
copyOfmapStruct copyOfmap_tmp = new copyOfmapStruct();
copyOfmapStruct copyOfmap_save = null;
//the aggregate variable
copyOfmapStruct copyOfmap_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_7 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_7",allOutsForAggregate_tXMLMap_7);
// ###############################
class TreeNode_API_tXMLMap_7_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
	java.util.Date get_Date(String xpath, String pattern){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Date(content, pattern);
	}
	Integer get_Integer(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Integer(content);
	}
	Character get_Character(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Character(content);
	}
	Float get_Float(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Float(content);
	}
	Double get_Double(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Double(content);
	}
}
			TreeNode_API_tXMLMap_7_TXMLMAP_OUT treeNodeAPI_tXMLMap_7_TXMLMAP_OUT = new TreeNode_API_tXMLMap_7_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_7_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_7_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_7_TXMLMAP_OUT xml_api_tXMLMap_7_TXMLMAP_OUT = new XML_API_tXMLMap_7_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_7_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            
 



/**
 * [tXMLMap_7_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tFileInputXML_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_12", false);
		start_Hash.put("tFileInputXML_12", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_12";

	
		int tos_count_tFileInputXML_12 = 0;
		

	

int nb_line_tFileInputXML_12 = 0;

	String os_tFileInputXML_12 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_12=false;
	if(os_tFileInputXML_12.indexOf("windows") > -1 || os_tFileInputXML_12.indexOf("nt") > -1){
		isWindows_tFileInputXML_12=true;
	}
class NameSpaceTool_tFileInputXML_12 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_12{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_12 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_12 = null;
try {
	filename_tFileInputXML_12 = System.getProperty("java.io.tmpdir") + "/sdiDump/tmp/out.xml";
} catch(java.lang.Exception e) {
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_12 != null && filename_tFileInputXML_12 instanceof String && filename_tFileInputXML_12.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_12){
		filename_tFileInputXML_12 = filename_tFileInputXML_12.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_12 = true;
org.dom4j.Document doc_tFileInputXML_12 = null;
java.io.Closeable toClose_tFileInputXML_12 = null;
try{
	if(filename_tFileInputXML_12 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_12 = (java.io.InputStream)filename_tFileInputXML_12;
		toClose_tFileInputXML_12 = inputStream_tFileInputXML_12;
		doc_tFileInputXML_12 = reader_tFileInputXML_12.read(inputStream_tFileInputXML_12);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_12 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_12)),"ISO-8859-15");
		toClose_tFileInputXML_12 = unicodeReader_tFileInputXML_12;
		org.xml.sax.InputSource in_tFileInputXML_12= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_12);
		doc_tFileInputXML_12 = reader_tFileInputXML_12.read(in_tFileInputXML_12);
	}
}catch(java.lang.Exception e){
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_12 = false;
} finally {
	if(toClose_tFileInputXML_12!=null) {
		toClose_tFileInputXML_12.close();
	}
}
if(isValidFile_tFileInputXML_12){
NameSpaceTool_tFileInputXML_12 nsTool_tFileInputXML_12 = new NameSpaceTool_tFileInputXML_12();
nsTool_tFileInputXML_12.countNSMap(doc_tFileInputXML_12.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_12 = nsTool_tFileInputXML_12.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_12 = doc_tFileInputXML_12.createXPath(nsTool_tFileInputXML_12.addDefaultNSPrefix("/csw:GetRecordsResponse"));  
x_tFileInputXML_12.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_12); 

java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_12 = (java.util.List<org.dom4j.tree.AbstractNode>)x_tFileInputXML_12.selectNodes(doc_tFileInputXML_12);	
XML_API_tFileInputXML_12 xml_api_tFileInputXML_12 = new XML_API_tFileInputXML_12();
String str_tFileInputXML_12 = "";
org.dom4j.Node node_tFileInputXML_12 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_12=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_12{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_12 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix(".","/csw:GetRecordsResponse"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_12 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_12 xPathUtil_tFileInputXML_12 = new XPathUtil_tFileInputXML_12();
	xPathUtil_tFileInputXML_12.initXPaths(xpaths_tFileInputXML_12, nsTool_tFileInputXML_12, xmlNameSpaceMap_tFileInputXML_12);
for (org.dom4j.tree.AbstractNode temp_tFileInputXML_12: nodeList_tFileInputXML_12) {
		nb_line_tFileInputXML_12++;
		
	row32 = null;			
	boolean whetherReject_tFileInputXML_12 = false;
	row32 = new row32Struct();
	try{
    Object obj0_tFileInputXML_12 = xpaths_tFileInputXML_12.get(0).evaluate(temp_tFileInputXML_12);
    if(obj0_tFileInputXML_12 == null) {
    	node_tFileInputXML_12 = null;
		str_tFileInputXML_12 = null;
    	
    } else if(obj0_tFileInputXML_12 instanceof org.dom4j.Node) {
    	node_tFileInputXML_12 = (org.dom4j.Node)obj0_tFileInputXML_12;
		str_tFileInputXML_12 = node_tFileInputXML_12.asXML();
    } else if(obj0_tFileInputXML_12 instanceof String || obj0_tFileInputXML_12 instanceof Number){
    	node_tFileInputXML_12 = temp_tFileInputXML_12;
    	str_tFileInputXML_12 = String.valueOf(obj0_tFileInputXML_12);
    } else if(obj0_tFileInputXML_12 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_12 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_12;
    	node_tFileInputXML_12 = nodes_tFileInputXML_12.size()>0 ? nodes_tFileInputXML_12.get(0) : null;
		str_tFileInputXML_12 = node_tFileInputXML_12==null?null:node_tFileInputXML_12.asXML();
	}
								row32.xmldoc = ParserUtils.parseTo_Document(str_tFileInputXML_12,false,"ISO-8859-15"); 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_12 = true;
                System.err.println(e.getMessage());
                row32 = null;
    }
			
			

 



/**
 * [tFileInputXML_12 begin ] stop
 */
	
	/**
	 * [tFileInputXML_12 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_12";

	

 


	tos_count_tFileInputXML_12++;

/**
 * [tFileInputXML_12 main ] stop
 */
	
	/**
	 * [tFileInputXML_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_12";

	

 



/**
 * [tFileInputXML_12 process_data_begin ] stop
 */
// Start of branch "row32"
if(row32 != null) { 



	
	/**
	 * [tXMLMap_7_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_OUT";

	

			//row32
			//row32


			
				if(execStat){
					runStat.updateStatOnConnection("row32"+iterateId,1, 1);
				} 
			

		

	boolean rejectedInnerJoin_tXMLMap_7_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_7_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_7_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_7_TXMLMAP_OUT = false;
	  
	
			

		
		
				//init document to flat tool
				routines.system.DocumentToFlat docToFlat_tXMLMap_7_TXMLMAP_OUT = new routines.system.DocumentToFlat();
				docToFlat_tXMLMap_7_TXMLMAP_OUT.setOriginalLoop("/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:distributionInfo/gmd:MD_Distribution/gmd:transferOptions/gmd:MD_DigitalTransferOptions/gmd:onLine/gmd:CI_OnlineResource");
				docToFlat_tXMLMap_7_TXMLMAP_OUT.setIsOptional(false);
				if(row32.xmldoc == null || row32.xmldoc.getDocument() == null) {
					throw new RuntimeException("row32.xmldoc can't be empty");
				}
				org.dom4j.Document doc_tXMLMap_7_TXMLMAP_OUT = row32.xmldoc.getDocument();
				docToFlat_tXMLMap_7_TXMLMAP_OUT.setDoc(doc_tXMLMap_7_TXMLMAP_OUT);
				docToFlat_tXMLMap_7_TXMLMAP_OUT.setDefineNS(true);
				docToFlat_tXMLMap_7_TXMLMAP_OUT.setNamespaceTool(nsTool_tXMLMap_7_TXMLMAP_OUT);
				
					java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_7_TXMLMAP_OUT = new java.util.HashMap<String,String>();
					xmlNameSpaceMap_tXMLMap_7_TXMLMAP_OUT.put("gco","http://www.isotc211.org/2005/gco");xmlNameSpaceMap_tXMLMap_7_TXMLMAP_OUT.put("gmx","http://www.isotc211.org/2005/gmx");xmlNameSpaceMap_tXMLMap_7_TXMLMAP_OUT.put("csw","http://www.opengis.net/cat/csw/2.0.2");xmlNameSpaceMap_tXMLMap_7_TXMLMAP_OUT.put("gml","http://www.opengis.net/gml");xmlNameSpaceMap_tXMLMap_7_TXMLMAP_OUT.put("gmd","http://www.isotc211.org/2005/gmd");
				
				docToFlat_tXMLMap_7_TXMLMAP_OUT.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_7_TXMLMAP_OUT);
				
				String[] absolutePathMappings_tXMLMap_7_TXMLMAP_OUT = new String[3];
				String[] relativePathMappings_tXMLMap_7_TXMLMAP_OUT = new String[3];
				
				absolutePathMappings_tXMLMap_7_TXMLMAP_OUT[0] = "row32.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:distributionInfo/gmd:MD_Distribution/gmd:transferOptions/gmd:MD_DigitalTransferOptions/gmd:onLine/gmd:CI_OnlineResource/gmd:linkage/gmd:URL";
				relativePathMappings_tXMLMap_7_TXMLMAP_OUT[0] = "gmd:linkage/gmd:URL";
				
				absolutePathMappings_tXMLMap_7_TXMLMAP_OUT[1] = "row32.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:distributionInfo/gmd:MD_Distribution/gmd:transferOptions/gmd:MD_DigitalTransferOptions/gmd:onLine/gmd:CI_OnlineResource/gmd:protocol/gco:CharacterString";
				relativePathMappings_tXMLMap_7_TXMLMAP_OUT[1] = "gmd:protocol/gco:CharacterString";
				
				absolutePathMappings_tXMLMap_7_TXMLMAP_OUT[2] = "row32.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:fileIdentifier/gco:CharacterString";
				relativePathMappings_tXMLMap_7_TXMLMAP_OUT[2] = "../../../../../../gmd:fileIdentifier/gco:CharacterString";
				
				docToFlat_tXMLMap_7_TXMLMAP_OUT.setAbsolutePathMappings(absolutePathMappings_tXMLMap_7_TXMLMAP_OUT);
				docToFlat_tXMLMap_7_TXMLMAP_OUT.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_7_TXMLMAP_OUT);
				//generate document to flat data
				docToFlat_tXMLMap_7_TXMLMAP_OUT.flat();
				//get flat data
				java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_7_TXMLMAP_OUT = docToFlat_tXMLMap_7_TXMLMAP_OUT.getResultSet();
				
				for (java.util.Map<String,String> oneRow_tXMLMap_7_TXMLMAP_OUT: resultSet_tXMLMap_7_TXMLMAP_OUT) { // G_TXM_M_001
					nb_line_tXMLMap_7_TXMLMAP_OUT++;
			    	rejectedInnerJoin_tXMLMap_7_TXMLMAP_OUT = false;
			    	rejectedDocInnerJoin_tXMLMap_7_TXMLMAP_OUT = false;
					mainRowRejected_tXMLMap_7_TXMLMAP_OUT=false;
				    isMatchDocRowtXMLMap_7_TXMLMAP_OUT = false;
					
			    	treeNodeAPI_tXMLMap_7_TXMLMAP_OUT.clear();
			    	for(java.util.Map.Entry<String, String> entry_tXMLMap_7_TXMLMAP_OUT : oneRow_tXMLMap_7_TXMLMAP_OUT.entrySet()) {
						treeNodeAPI_tXMLMap_7_TXMLMAP_OUT.put(entry_tXMLMap_7_TXMLMAP_OUT.getKey(),entry_tXMLMap_7_TXMLMAP_OUT.getValue());
					}
					


			
{ // start of Var scope

	// ###############################
	// # Vars tables

Var__tXMLMap_7_TXMLMAP_OUT__Struct Var = Var__tXMLMap_7_TXMLMAP_OUT;
		// ###############################
		// # Output tables

copyOfmap = null;


// # Output table : 'copyOfmap'

copyOfmap_tmp = new copyOfmapStruct();
copyOfmap_tmp.uuid = treeNodeAPI_tXMLMap_7_TXMLMAP_OUT.get_String("row32.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:fileIdentifier/gco:CharacterString");
copyOfmap_tmp.url = treeNodeAPI_tXMLMap_7_TXMLMAP_OUT.get_String("row32.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:distributionInfo/gmd:MD_Distribution/gmd:transferOptions/gmd:MD_DigitalTransferOptions/gmd:onLine/gmd:CI_OnlineResource/gmd:linkage/gmd:URL");
copyOfmap_tmp.protocol = treeNodeAPI_tXMLMap_7_TXMLMAP_OUT.get_String("row32.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:distributionInfo/gmd:MD_Distribution/gmd:transferOptions/gmd:MD_DigitalTransferOptions/gmd:onLine/gmd:CI_OnlineResource/gmd:protocol/gco:CharacterString");allOutsForAggregate_tXMLMap_7.add(copyOfmap_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_7_TXMLMAP_OUT = false;


		}//G_TXM_M_001 close
	

 


	tos_count_tXMLMap_7_TXMLMAP_OUT++;

/**
 * [tXMLMap_7_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_7_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_7_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_7_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_7_TXMLMAP_OUT process_data_end ] stop
 */

} // End of branch "row32"




	
	/**
	 * [tFileInputXML_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_12";

	

 



/**
 * [tFileInputXML_12 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_12 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_12";

	


}
	}
	globalMap.put("tFileInputXML_12_NB_LINE",nb_line_tFileInputXML_12);

	
 

ok_Hash.put("tFileInputXML_12", true);
end_Hash.put("tFileInputXML_12", System.currentTimeMillis());




/**
 * [tFileInputXML_12 end ] stop
 */

	
	/**
	 * [tXMLMap_7_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_OUT";

	




			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row32"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tXMLMap_7_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_7_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_7_TXMLMAP_OUT end ] stop
 */




	
	/**
	 * [tAggregateRow_7_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_7_AGGOUT", false);
		start_Hash.put("tAggregateRow_7_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGOUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row35" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAggregateRow_7_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_7 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_7 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_7 utilClass_tAggregateRow_7 = new UtilClass_tAggregateRow_7();

	

	class AggOperationStruct_tAggregateRow_7 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String uuid;StringBuilder url_list = new StringBuilder();
           			boolean url_list_firstEmpty = false;
           			StringBuilder protocol_list = new StringBuilder();
           			boolean protocol_list_firstEmpty = false;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_7 other = (AggOperationStruct_tAggregateRow_7) obj;
			
							if (this.uuid == null) {
								if (other.uuid != null) 
									return false;
							} else if (!this.uuid.equals(other.uuid)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_7 operation_result_tAggregateRow_7 = null;
	AggOperationStruct_tAggregateRow_7 operation_finder_tAggregateRow_7 = new AggOperationStruct_tAggregateRow_7();
	java.util.Map<AggOperationStruct_tAggregateRow_7,AggOperationStruct_tAggregateRow_7> hash_tAggregateRow_7 = new java.util.HashMap<AggOperationStruct_tAggregateRow_7,AggOperationStruct_tAggregateRow_7>();
	
	String delimiter_tAggregateRow_7 = "|";
	

 



/**
 * [tAggregateRow_7_AGGOUT begin ] stop
 */



	
	/**
	 * [tUniqRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUniqRow_1", false);
		start_Hash.put("tUniqRow_1", System.currentTimeMillis());
		
	
	currentComponent="tUniqRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row33" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tUniqRow_1 = 0;
		

	
		class KeyStruct_tUniqRow_1 {
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
					String uuid;
					String url;
					String protocol;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
								
								result = prime * result + ((this.url == null) ? 0 : this.url.hashCode());
								
								result = prime * result + ((this.protocol == null) ? 0 : this.protocol.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;
				
									if (this.uuid == null) {
										if (other.uuid != null) 
											return false;
								
									} else if (!this.uuid.equals(other.uuid))
								 
										return false;
								
									if (this.url == null) {
										if (other.url != null) 
											return false;
								
									} else if (!this.url.equals(other.url))
								 
										return false;
								
									if (this.protocol == null) {
										if (other.protocol != null) 
											return false;
								
									} else if (!this.protocol.equals(other.protocol))
								 
										return false;
								
				
				return true;
			}
	  
	        
		}

	
int nb_uniques_tUniqRow_1 = 0;
int nb_duplicates_tUniqRow_1 = 0;
KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>(); 

 



/**
 * [tUniqRow_1 begin ] stop
 */



	
	/**
	 * [tFilterRow_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_11", false);
		start_Hash.put("tFilterRow_11", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_11";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("copyOfmap" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_11 = 0;
		
    int nb_line_tFilterRow_11 = 0;
    int nb_line_ok_tFilterRow_11 = 0;
    int nb_line_reject_tFilterRow_11 = 0;

    class Operator_tFilterRow_11 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_11(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_11 begin ] stop
 */



	
	/**
	 * [tXMLMap_7_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_7_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_7_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_IN";

	
		int tos_count_tXMLMap_7_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_7 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_7");
for(Object  row_out_tXMLMap_7_TXMLMAP_IN : outs_tXMLMap_7) {//TD512
 



/**
 * [tXMLMap_7_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_7_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_IN";

	

	copyOfmap = null;
	if(row_out_tXMLMap_7_TXMLMAP_IN!=null && row_out_tXMLMap_7_TXMLMAP_IN instanceof copyOfmapStruct) {
		copyOfmap = (copyOfmapStruct)row_out_tXMLMap_7_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_7_TXMLMAP_IN++;

/**
 * [tXMLMap_7_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_7_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_7_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "copyOfmap"
if(copyOfmap != null) { 



	
	/**
	 * [tFilterRow_11 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_11";

	

			//copyOfmap
			//copyOfmap


			
				if(execStat){
					runStat.updateStatOnConnection("copyOfmap"+iterateId,1, 1);
				} 
			

		

          row33 = null;
    Operator_tFilterRow_11 ope_tFilterRow_11 = new Operator_tFilterRow_11("&&");
      ope_tFilterRow_11.matches((// code sample : use copyOfmap to define the condition.
// copyOfmap.columnName1.equals("foo") ||!(copyOfmap.columnName2.equals("bar"))
// replace the following expression by your own filter condition 
copyOfmap.protocol.contains("WMS")
			), "advanced condition failed");
    
    if (ope_tFilterRow_11.getMatchFlag()) {
              if(row33 == null){ 
                row33 = new row33Struct();
              }
               row33.uuid = copyOfmap.uuid;
               row33.url = copyOfmap.url;
               row33.protocol = copyOfmap.protocol;    
      nb_line_ok_tFilterRow_11++;
    } else {
      nb_line_reject_tFilterRow_11++;
    }

nb_line_tFilterRow_11++;

 


	tos_count_tFilterRow_11++;

/**
 * [tFilterRow_11 main ] stop
 */
	
	/**
	 * [tFilterRow_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_11";

	

 



/**
 * [tFilterRow_11 process_data_begin ] stop
 */
// Start of branch "row33"
if(row33 != null) { 



	
	/**
	 * [tUniqRow_1 main ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

			//row33
			//row33


			
				if(execStat){
					runStat.updateStatOnConnection("row33"+iterateId,1, 1);
				} 
			

		
row35 = null;			
if(row33.uuid == null){
	finder_tUniqRow_1.uuid = null;
}else{
	finder_tUniqRow_1.uuid = row33.uuid.toLowerCase();
}
if(row33.url == null){
	finder_tUniqRow_1.url = null;
}else{
	finder_tUniqRow_1.url = row33.url.toLowerCase();
}
if(row33.protocol == null){
	finder_tUniqRow_1.protocol = null;
}else{
	finder_tUniqRow_1.protocol = row33.protocol.toLowerCase();
}	
finder_tUniqRow_1.hashCodeDirty = true;
if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
		KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

		
if(row33.uuid == null){
	new_tUniqRow_1.uuid = null;
}else{
	new_tUniqRow_1.uuid = row33.uuid.toLowerCase();
}
if(row33.url == null){
	new_tUniqRow_1.url = null;
}else{
	new_tUniqRow_1.url = row33.url.toLowerCase();
}
if(row33.protocol == null){
	new_tUniqRow_1.protocol = null;
}else{
	new_tUniqRow_1.protocol = row33.protocol.toLowerCase();
}
		
		keystUniqRow_1.add(new_tUniqRow_1);if(row35 == null){ 
	
	row35 = new row35Struct();
}row35.uuid = row33.uuid;			row35.url = row33.url;			row35.protocol = row33.protocol;					
		nb_uniques_tUniqRow_1++;
	} else {
	  nb_duplicates_tUniqRow_1++;
	}

 


	tos_count_tUniqRow_1++;

/**
 * [tUniqRow_1 main ] stop
 */
	
	/**
	 * [tUniqRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_begin ] stop
 */
// Start of branch "row35"
if(row35 != null) { 



	
	/**
	 * [tAggregateRow_7_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGOUT";

	

			//row35
			//row35


			
				if(execStat){
					runStat.updateStatOnConnection("row35"+iterateId,1, 1);
				} 
			

		
	
operation_finder_tAggregateRow_7.uuid = row35.uuid;
			

	operation_finder_tAggregateRow_7.hashCodeDirty = true;
	
	operation_result_tAggregateRow_7 = hash_tAggregateRow_7.get(operation_finder_tAggregateRow_7);

	

	if(operation_result_tAggregateRow_7 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_7 = new AggOperationStruct_tAggregateRow_7();

		operation_result_tAggregateRow_7.uuid = operation_finder_tAggregateRow_7.uuid;
				
		
		

		hash_tAggregateRow_7.put(operation_result_tAggregateRow_7, operation_result_tAggregateRow_7);
	
	} // G_OutMain_AggR_001


	
				if(row35.url != null) { // G_OutMain_AggR_546
				
				if(operation_result_tAggregateRow_7.url_list.length() > 0) {
					operation_result_tAggregateRow_7.url_list.append("|");
				} 
				else if(operation_result_tAggregateRow_7.url_list_firstEmpty){
					operation_result_tAggregateRow_7.url_list.append("|");
				}
					if(operation_result_tAggregateRow_7.url_list != null) {
						if(operation_result_tAggregateRow_7.url_list_firstEmpty==false && ("").equals(String.valueOf(row35.url))){
							operation_result_tAggregateRow_7.url_list_firstEmpty = true;
						}
						operation_result_tAggregateRow_7.url_list = operation_result_tAggregateRow_7.url_list.append(String.valueOf(row35.url));
					}
				
				} // G_OutMain_AggR_546
				
				if(row35.protocol != null) { // G_OutMain_AggR_546
				
				if(operation_result_tAggregateRow_7.protocol_list.length() > 0) {
					operation_result_tAggregateRow_7.protocol_list.append("|");
				} 
				else if(operation_result_tAggregateRow_7.protocol_list_firstEmpty){
					operation_result_tAggregateRow_7.protocol_list.append("|");
				}
					if(operation_result_tAggregateRow_7.protocol_list != null) {
						if(operation_result_tAggregateRow_7.protocol_list_firstEmpty==false && ("").equals(String.valueOf(row35.protocol))){
							operation_result_tAggregateRow_7.protocol_list_firstEmpty = true;
						}
						operation_result_tAggregateRow_7.protocol_list = operation_result_tAggregateRow_7.protocol_list.append(String.valueOf(row35.protocol));
					}
				
				} // G_OutMain_AggR_546
				


 


	tos_count_tAggregateRow_7_AGGOUT++;

/**
 * [tAggregateRow_7_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_7_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGOUT";

	

 



/**
 * [tAggregateRow_7_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_7_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGOUT";

	

 



/**
 * [tAggregateRow_7_AGGOUT process_data_end ] stop
 */

} // End of branch "row35"




	
	/**
	 * [tUniqRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 process_data_end ] stop
 */

} // End of branch "row33"




	
	/**
	 * [tFilterRow_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_11";

	

 



/**
 * [tFilterRow_11 process_data_end ] stop
 */

} // End of branch "copyOfmap"




	
	/**
	 * [tXMLMap_7_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_7_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_7_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_IN";

	

}//TD512
 

ok_Hash.put("tXMLMap_7_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_7_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_7_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tFilterRow_11 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_11";

	
    globalMap.put("tFilterRow_11_NB_LINE", nb_line_tFilterRow_11);
    globalMap.put("tFilterRow_11_NB_LINE_OK", nb_line_ok_tFilterRow_11);
    globalMap.put("tFilterRow_11_NB_LINE_REJECT", nb_line_reject_tFilterRow_11);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("copyOfmap"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_11", true);
end_Hash.put("tFilterRow_11", System.currentTimeMillis());




/**
 * [tFilterRow_11 end ] stop
 */

	
	/**
	 * [tUniqRow_1 end ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

globalMap.put("tUniqRow_1_NB_UNIQUES",nb_uniques_tUniqRow_1);
globalMap.put("tUniqRow_1_NB_DUPLICATES",nb_duplicates_tUniqRow_1);

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row33"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tUniqRow_1", true);
end_Hash.put("tUniqRow_1", System.currentTimeMillis());




/**
 * [tUniqRow_1 end ] stop
 */

	
	/**
	 * [tAggregateRow_7_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGOUT";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row35"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAggregateRow_7_AGGOUT", true);
end_Hash.put("tAggregateRow_7_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_7_AGGOUT end ] stop
 */


	
	/**
	 * [tAdvancedHash_row34 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row34", false);
		start_Hash.put("tAdvancedHash_row34", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row34";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row34" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row34 = 0;
		

			   		// connection name:row34
			   		// source node:tAggregateRow_7_AGGIN - inputs:(OnRowsEnd) outputs:(row34,row34) | target node:tAdvancedHash_row34 - inputs:(row34) outputs:()
			   		// linked node: tMap_2 - inputs:(row2,row44,row6,status,row40,row8,row13,row19,row22,row23,row34,row45,row27,row15) outputs:(map)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row34 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct> tHash_Lookup_row34 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row34Struct>getLookup(matchingModeEnum_row34);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row34", tHash_Lookup_row34);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row34 begin ] stop
 */



	
	/**
	 * [tAggregateRow_7_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_7_AGGIN", false);
		start_Hash.put("tAggregateRow_7_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGIN";

	
		int tos_count_tAggregateRow_7_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_7> values_tAggregateRow_7 = hash_tAggregateRow_7.values();

globalMap.put("tAggregateRow_7_NB_LINE", values_tAggregateRow_7.size());

for(AggOperationStruct_tAggregateRow_7 aggregated_row_tAggregateRow_7 : values_tAggregateRow_7) { // G_AggR_600



 



/**
 * [tAggregateRow_7_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_7_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGIN";

	

            				    row34.uuid = aggregated_row_tAggregateRow_7.uuid;
            				    
    								row34.url = aggregated_row_tAggregateRow_7.url_list.toString();
	    						
    								row34.protocol = aggregated_row_tAggregateRow_7.protocol_list.toString();
	    						

 


	tos_count_tAggregateRow_7_AGGIN++;

/**
 * [tAggregateRow_7_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_7_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGIN";

	

 



/**
 * [tAggregateRow_7_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row34 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";

	

			//row34
			//row34


			
				if(execStat){
					runStat.updateStatOnConnection("row34"+iterateId,1, 1);
				} 
			

		


			   
			   

					row34Struct row34_HashRow = new row34Struct();
		   	   	   
				
				row34_HashRow.uuid = row34.uuid;
				
				row34_HashRow.url = row34.url;
				
				row34_HashRow.protocol = row34.protocol;
				
			tHash_Lookup_row34.put(row34_HashRow);
			
            




 


	tos_count_tAdvancedHash_row34++;

/**
 * [tAdvancedHash_row34 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row34 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";

	

 



/**
 * [tAdvancedHash_row34 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row34 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";

	

 



/**
 * [tAdvancedHash_row34 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_7_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGIN";

	

 



/**
 * [tAggregateRow_7_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_7_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_7_AGGIN", true);
end_Hash.put("tAggregateRow_7_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_7_AGGIN end ] stop
 */

	
	/**
	 * [tAdvancedHash_row34 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";

	

tHash_Lookup_row34.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row34"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row34", true);
end_Hash.put("tAdvancedHash_row34", System.currentTimeMillis());




/**
 * [tAdvancedHash_row34 end ] stop
 */





















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_7_AGGIN"
							globalMap.remove("tAggregateRow_7");
						
				try{
					
	
	/**
	 * [tFileInputXML_12 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_12";

	

 



/**
 * [tFileInputXML_12 finally ] stop
 */

	
	/**
	 * [tXMLMap_7_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_7_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_7_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_7";
	
	currentComponent="tXMLMap_7_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_7_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tFilterRow_11 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_11";

	

 



/**
 * [tFilterRow_11 finally ] stop
 */

	
	/**
	 * [tUniqRow_1 finally ] start
	 */

	

	
	
	currentComponent="tUniqRow_1";

	

 



/**
 * [tUniqRow_1 finally ] stop
 */

	
	/**
	 * [tAggregateRow_7_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGOUT";

	

 



/**
 * [tAggregateRow_7_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_7_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGIN";

	

 



/**
 * [tAggregateRow_7_AGGIN finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row34 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";

	

 



/**
 * [tAdvancedHash_row34 finally ] stop
 */





















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_12_SUBPROCESS_STATE", 1);
	}
	


public static class row45Struct implements routines.system.IPersistableComparableLookupRow<row45Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String keyword;

				public String getKeyword () {
					return this.keyword;
				}
				
			    public String codeListValue;

				public String getCodeListValue () {
					return this.codeListValue;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row45Struct other = (row45Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row45Struct other) {

		other.uuid = this.uuid;
	            other.keyword = this.keyword;
	            other.codeListValue = this.codeListValue;
	            
	}

	public void copyKeysDataTo(row45Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.keyword = readString(dis,ois);
					
						this.codeListValue = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.keyword, dos, oos);
					
						writeString(this.codeListValue, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",keyword="+keyword);
		sb.append(",codeListValue="+codeListValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row45Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class map1Struct implements routines.system.IPersistableRow<map1Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String keyword;

				public String getKeyword () {
					return this.keyword;
				}
				
			    public String codeListValue;

				public String getCodeListValue () {
					return this.codeListValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.keyword = readString(dis);
					
					this.codeListValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.keyword,dos);
					
					// String
				
						writeString(this.codeListValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",keyword="+keyword);
		sb.append(",codeListValue="+codeListValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(map1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String keyword;

				public String getKeyword () {
					return this.keyword;
				}
				
			    public String codeListValue;

				public String getCodeListValue () {
					return this.codeListValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.keyword = readString(dis);
					
					this.codeListValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.keyword,dos);
					
					// String
				
						writeString(this.codeListValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",keyword="+keyword);
		sb.append(",codeListValue="+codeListValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row29Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfmapped3_0Struct implements routines.system.IPersistableRow<copyOfcopyOfmapped3_0Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String keyword;

				public String getKeyword () {
					return this.keyword;
				}
				
			    public String codeListValue;

				public String getCodeListValue () {
					return this.codeListValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.keyword = readString(dis);
					
					this.codeListValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.keyword,dos);
					
					// String
				
						writeString(this.codeListValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",keyword="+keyword);
		sb.append(",codeListValue="+codeListValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfmapped3_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public routines.system.Document xmldoc;

				public routines.system.Document getXmldoc () {
					return this.xmldoc;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
						this.xmldoc = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.xmldoc);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("xmldoc="+String.valueOf(xmldoc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputXML_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row28Struct row28 = new row28Struct();
copyOfcopyOfmapped3_0Struct copyOfcopyOfmapped3_0 = new copyOfcopyOfmapped3_0Struct();
row29Struct row29 = new row29Struct();
map1Struct map1 = new map1Struct();
row45Struct row45 = new row45Struct();




	
	/**
	 * [tXMLMap_6_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_6_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_6_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_OUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row28" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tXMLMap_6_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_6_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_6_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_6_TXMLMAP_OUT__Struct Var__tXMLMap_6_TXMLMAP_OUT = new Var__tXMLMap_6_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
copyOfcopyOfmapped3_0Struct copyOfcopyOfmapped3_0_tmp = new copyOfcopyOfmapped3_0Struct();
copyOfcopyOfmapped3_0Struct copyOfcopyOfmapped3_0_save = null;
//the aggregate variable
copyOfcopyOfmapped3_0Struct copyOfcopyOfmapped3_0_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_6 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_6",allOutsForAggregate_tXMLMap_6);
// ###############################
class TreeNode_API_tXMLMap_6_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
	java.util.Date get_Date(String xpath, String pattern){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Date(content, pattern);
	}
	Integer get_Integer(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Integer(content);
	}
	Character get_Character(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Character(content);
	}
	Float get_Float(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Float(content);
	}
	Double get_Double(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Double(content);
	}
	Boolean get_Boolean(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Boolean(content);
	}
}
			TreeNode_API_tXMLMap_6_TXMLMAP_OUT treeNodeAPI_tXMLMap_6_TXMLMAP_OUT = new TreeNode_API_tXMLMap_6_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_6_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_6_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_6_TXMLMAP_OUT xml_api_tXMLMap_6_TXMLMAP_OUT = new XML_API_tXMLMap_6_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_6_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            
 



/**
 * [tXMLMap_6_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tFileInputXML_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_11", false);
		start_Hash.put("tFileInputXML_11", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_11";

	
		int tos_count_tFileInputXML_11 = 0;
		

	

int nb_line_tFileInputXML_11 = 0;

	String os_tFileInputXML_11 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_11=false;
	if(os_tFileInputXML_11.indexOf("windows") > -1 || os_tFileInputXML_11.indexOf("nt") > -1){
		isWindows_tFileInputXML_11=true;
	}
class NameSpaceTool_tFileInputXML_11 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_11{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_11 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_11 = null;
try {
	filename_tFileInputXML_11 = System.getProperty("java.io.tmpdir") + "/sdiDump/tmp/out.xml";
} catch(java.lang.Exception e) {
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_11 != null && filename_tFileInputXML_11 instanceof String && filename_tFileInputXML_11.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_11){
		filename_tFileInputXML_11 = filename_tFileInputXML_11.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_11 = true;
org.dom4j.Document doc_tFileInputXML_11 = null;
java.io.Closeable toClose_tFileInputXML_11 = null;
try{
	if(filename_tFileInputXML_11 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_11 = (java.io.InputStream)filename_tFileInputXML_11;
		toClose_tFileInputXML_11 = inputStream_tFileInputXML_11;
		doc_tFileInputXML_11 = reader_tFileInputXML_11.read(inputStream_tFileInputXML_11);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_11 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_11)),"ISO-8859-15");
		toClose_tFileInputXML_11 = unicodeReader_tFileInputXML_11;
		org.xml.sax.InputSource in_tFileInputXML_11= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_11);
		doc_tFileInputXML_11 = reader_tFileInputXML_11.read(in_tFileInputXML_11);
	}
}catch(java.lang.Exception e){
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_11 = false;
} finally {
	if(toClose_tFileInputXML_11!=null) {
		toClose_tFileInputXML_11.close();
	}
}
if(isValidFile_tFileInputXML_11){
NameSpaceTool_tFileInputXML_11 nsTool_tFileInputXML_11 = new NameSpaceTool_tFileInputXML_11();
nsTool_tFileInputXML_11.countNSMap(doc_tFileInputXML_11.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_11 = nsTool_tFileInputXML_11.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_11 = doc_tFileInputXML_11.createXPath(nsTool_tFileInputXML_11.addDefaultNSPrefix("/csw:GetRecordsResponse"));  
x_tFileInputXML_11.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_11); 

java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_11 = (java.util.List<org.dom4j.tree.AbstractNode>)x_tFileInputXML_11.selectNodes(doc_tFileInputXML_11);	
XML_API_tFileInputXML_11 xml_api_tFileInputXML_11 = new XML_API_tFileInputXML_11();
String str_tFileInputXML_11 = "";
org.dom4j.Node node_tFileInputXML_11 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_11=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_11{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_11 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix(".","/csw:GetRecordsResponse"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_11 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_11 xPathUtil_tFileInputXML_11 = new XPathUtil_tFileInputXML_11();
	xPathUtil_tFileInputXML_11.initXPaths(xpaths_tFileInputXML_11, nsTool_tFileInputXML_11, xmlNameSpaceMap_tFileInputXML_11);
for (org.dom4j.tree.AbstractNode temp_tFileInputXML_11: nodeList_tFileInputXML_11) {
		nb_line_tFileInputXML_11++;
		
	row28 = null;			
	boolean whetherReject_tFileInputXML_11 = false;
	row28 = new row28Struct();
	try{
    Object obj0_tFileInputXML_11 = xpaths_tFileInputXML_11.get(0).evaluate(temp_tFileInputXML_11);
    if(obj0_tFileInputXML_11 == null) {
    	node_tFileInputXML_11 = null;
		str_tFileInputXML_11 = null;
    	
    } else if(obj0_tFileInputXML_11 instanceof org.dom4j.Node) {
    	node_tFileInputXML_11 = (org.dom4j.Node)obj0_tFileInputXML_11;
		str_tFileInputXML_11 = node_tFileInputXML_11.asXML();
    } else if(obj0_tFileInputXML_11 instanceof String || obj0_tFileInputXML_11 instanceof Number){
    	node_tFileInputXML_11 = temp_tFileInputXML_11;
    	str_tFileInputXML_11 = String.valueOf(obj0_tFileInputXML_11);
    } else if(obj0_tFileInputXML_11 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_11 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_11;
    	node_tFileInputXML_11 = nodes_tFileInputXML_11.size()>0 ? nodes_tFileInputXML_11.get(0) : null;
		str_tFileInputXML_11 = node_tFileInputXML_11==null?null:node_tFileInputXML_11.asXML();
	}
								row28.xmldoc = ParserUtils.parseTo_Document(str_tFileInputXML_11,false,"ISO-8859-15"); 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_11 = true;
                System.err.println(e.getMessage());
                row28 = null;
    }
			
			

 



/**
 * [tFileInputXML_11 begin ] stop
 */
	
	/**
	 * [tFileInputXML_11 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_11";

	

 


	tos_count_tFileInputXML_11++;

/**
 * [tFileInputXML_11 main ] stop
 */
	
	/**
	 * [tFileInputXML_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_11";

	

 



/**
 * [tFileInputXML_11 process_data_begin ] stop
 */
// Start of branch "row28"
if(row28 != null) { 



	
	/**
	 * [tXMLMap_6_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_OUT";

	

			//row28
			//row28


			
				if(execStat){
					runStat.updateStatOnConnection("row28"+iterateId,1, 1);
				} 
			

		

	boolean rejectedInnerJoin_tXMLMap_6_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_6_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_6_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_6_TXMLMAP_OUT = false;
	  
	
			

					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_6_TXMLMAP_OUT_0 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_6_TXMLMAP_OUT_0.setOriginalLoop("/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:keyword");
					docToFlat_tXMLMap_6_TXMLMAP_OUT_0.setIsOptional(false);
					if(row28.xmldoc == null 
						|| row28.xmldoc.getDocument() == null) {
						throw new RuntimeException("row28.xmldoc can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_6_TXMLMAP_OUT_0 = row28.xmldoc.getDocument();
					docToFlat_tXMLMap_6_TXMLMAP_OUT_0.setDoc(doc_tXMLMap_6_TXMLMAP_OUT_0);
					docToFlat_tXMLMap_6_TXMLMAP_OUT_0.setDefineNS(true);
					docToFlat_tXMLMap_6_TXMLMAP_OUT_0.setNamespaceTool(nsTool_tXMLMap_6_TXMLMAP_OUT);
					
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_6_TXMLMAP_OUT_0 = new java.util.HashMap<String,String>();
						xmlNameSpaceMap_tXMLMap_6_TXMLMAP_OUT_0.put("gco","http://www.isotc211.org/2005/gco");xmlNameSpaceMap_tXMLMap_6_TXMLMAP_OUT_0.put("gmx","http://www.isotc211.org/2005/gmx");xmlNameSpaceMap_tXMLMap_6_TXMLMAP_OUT_0.put("csw","http://www.opengis.net/cat/csw/2.0.2");xmlNameSpaceMap_tXMLMap_6_TXMLMAP_OUT_0.put("gml","http://www.opengis.net/gml");xmlNameSpaceMap_tXMLMap_6_TXMLMAP_OUT_0.put("gmd","http://www.isotc211.org/2005/gmd");
					
					docToFlat_tXMLMap_6_TXMLMAP_OUT_0.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_6_TXMLMAP_OUT_0);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_6_TXMLMAP_OUT_0 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_6_TXMLMAP_OUT_0 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_6_TXMLMAP_OUT_0.add("row28.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:thesaurusName/gmd:CI_Citation/gmd:title/gco:CharacterString");
					relativePathMappingsList_tXMLMap_6_TXMLMAP_OUT_0.add("../gmd:thesaurusName/gmd:CI_Citation/gmd:title/gco:CharacterString");
					
					absolutePathMappingsList_tXMLMap_6_TXMLMAP_OUT_0.add("row28.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:fileIdentifier/gco:CharacterString");
					relativePathMappingsList_tXMLMap_6_TXMLMAP_OUT_0.add("../../../../../gmd:fileIdentifier/gco:CharacterString");
					
					absolutePathMappingsList_tXMLMap_6_TXMLMAP_OUT_0.add("row28.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:keyword/gco:CharacterString");
					relativePathMappingsList_tXMLMap_6_TXMLMAP_OUT_0.add("gco:CharacterString");
					
					String[] absolutePathMappings_tXMLMap_6_TXMLMAP_OUT_0 = absolutePathMappingsList_tXMLMap_6_TXMLMAP_OUT_0.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_6_TXMLMAP_OUT_0 = relativePathMappingsList_tXMLMap_6_TXMLMAP_OUT_0.toArray(new String[0]);
					
					docToFlat_tXMLMap_6_TXMLMAP_OUT_0.setAbsolutePathMappings(absolutePathMappings_tXMLMap_6_TXMLMAP_OUT_0);
					docToFlat_tXMLMap_6_TXMLMAP_OUT_0.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_6_TXMLMAP_OUT_0);
					//generate document to flat data
					docToFlat_tXMLMap_6_TXMLMAP_OUT_0.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_6_TXMLMAP_OUT_0 = docToFlat_tXMLMap_6_TXMLMAP_OUT_0.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_6_TXMLMAP_OUT_0: resultSet_tXMLMap_6_TXMLMAP_OUT_0) { // G_TXM_M_001
						nb_line_tXMLMap_6_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_6_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_6_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_6_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_6_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_6_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_6_TXMLMAP_OUT_0 : oneRow_tXMLMap_6_TXMLMAP_OUT_0.entrySet()) {
							treeNodeAPI_tXMLMap_6_TXMLMAP_OUT.put(entry_tXMLMap_6_TXMLMAP_OUT_0.getKey(),entry_tXMLMap_6_TXMLMAP_OUT_0.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_6_TXMLMAP_OUT__Struct Var = Var__tXMLMap_6_TXMLMAP_OUT;
		// ###############################
		// # Output table

copyOfcopyOfmapped3_0 = null;


// # Output table : 'copyOfcopyOfmapped3_0'

copyOfcopyOfmapped3_0_tmp = new copyOfcopyOfmapped3_0Struct();
copyOfcopyOfmapped3_0_tmp.uuid = treeNodeAPI_tXMLMap_6_TXMLMAP_OUT.get_String("row28.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:fileIdentifier/gco:CharacterString");
copyOfcopyOfmapped3_0_tmp.keyword = treeNodeAPI_tXMLMap_6_TXMLMAP_OUT.get_String("row28.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:keyword/gco:CharacterString");
copyOfcopyOfmapped3_0_tmp.codeListValue =  treeNodeAPI_tXMLMap_6_TXMLMAP_OUT.get_String("row28.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:thesaurusName/gmd:CI_Citation/gmd:title/gco:CharacterString");allOutsForAggregate_tXMLMap_6.add(copyOfcopyOfmapped3_0_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_6_TXMLMAP_OUT = false;

				}//close G_TXM_M_001

 


	tos_count_tXMLMap_6_TXMLMAP_OUT++;

/**
 * [tXMLMap_6_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_6_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_6_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_6_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_6_TXMLMAP_OUT process_data_end ] stop
 */

} // End of branch "row28"




	
	/**
	 * [tFileInputXML_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_11";

	

 



/**
 * [tFileInputXML_11 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_11 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_11";

	


}
	}
	globalMap.put("tFileInputXML_11_NB_LINE",nb_line_tFileInputXML_11);

	
 

ok_Hash.put("tFileInputXML_11", true);
end_Hash.put("tFileInputXML_11", System.currentTimeMillis());




/**
 * [tFileInputXML_11 end ] stop
 */

	
	/**
	 * [tXMLMap_6_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_OUT";

	




			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row28"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tXMLMap_6_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_6_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_6_TXMLMAP_OUT end ] stop
 */





	
	/**
	 * [tAdvancedHash_row45 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row45", false);
		start_Hash.put("tAdvancedHash_row45", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row45";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row45" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row45 = 0;
		

			   		// connection name:row45
			   		// source node:tReplace_3 - inputs:(map1) outputs:(row45,row45) | target node:tAdvancedHash_row45 - inputs:(row45) outputs:()
			   		// linked node: tMap_2 - inputs:(row2,row44,row6,status,row40,row8,row13,row19,row22,row23,row34,row45,row27,row15) outputs:(map)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row45 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row45Struct> tHash_Lookup_row45 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row45Struct>getLookup(matchingModeEnum_row45);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row45", tHash_Lookup_row45);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row45 begin ] stop
 */



	
	/**
	 * [tReplace_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplace_3", false);
		start_Hash.put("tReplace_3", System.currentTimeMillis());
		
	
	currentComponent="tReplace_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("map1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tReplace_3 = 0;
		


int nb_line_tReplace_3 = 0;
 



/**
 * [tReplace_3 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row29" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
map1Struct map1_tmp = new map1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tFilterRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_10", false);
		start_Hash.put("tFilterRow_10", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_10";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("copyOfcopyOfmapped3_0" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_10 = 0;
		
    int nb_line_tFilterRow_10 = 0;
    int nb_line_ok_tFilterRow_10 = 0;
    int nb_line_reject_tFilterRow_10 = 0;

    class Operator_tFilterRow_10 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_10(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_10 begin ] stop
 */



	
	/**
	 * [tXMLMap_6_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_6_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_6_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_IN";

	
		int tos_count_tXMLMap_6_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_6 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_6");
for(Object  row_out_tXMLMap_6_TXMLMAP_IN : outs_tXMLMap_6) {//TD512
 



/**
 * [tXMLMap_6_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_6_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_IN";

	

	copyOfcopyOfmapped3_0 = null;
	if(row_out_tXMLMap_6_TXMLMAP_IN!=null && row_out_tXMLMap_6_TXMLMAP_IN instanceof copyOfcopyOfmapped3_0Struct) {
		copyOfcopyOfmapped3_0 = (copyOfcopyOfmapped3_0Struct)row_out_tXMLMap_6_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_6_TXMLMAP_IN++;

/**
 * [tXMLMap_6_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_6_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_6_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfmapped3_0"
if(copyOfcopyOfmapped3_0 != null) { 



	
	/**
	 * [tFilterRow_10 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_10";

	

			//copyOfcopyOfmapped3_0
			//copyOfcopyOfmapped3_0


			
				if(execStat){
					runStat.updateStatOnConnection("copyOfcopyOfmapped3_0"+iterateId,1, 1);
				} 
			

		

          row29 = null;
    Operator_tFilterRow_10 ope_tFilterRow_10 = new Operator_tFilterRow_10("&&");
      ope_tFilterRow_10.matches((// code sample : use copyOfcopyOfmapped3_0 to define the condition.
// copyOfcopyOfmapped3_0.columnName1.equals("foo") ||!(copyOfcopyOfmapped3_0.columnName2.equals("bar"))
// replace the following expression by your own filter condition 
//copyOfcopyOfmapped3_0.codeListValue.contains("GEMET") || !(copyOfcopyOfmapped3_0.codeListValue.contains("INSPIRE"))
copyOfcopyOfmapped3_0.keyword.toUpperCase().contains("IDP") && copyOfcopyOfmapped3_0.keyword.toUpperCase().contains("SHORTNAME")), "advanced condition failed");
    
    if (ope_tFilterRow_10.getMatchFlag()) {
              if(row29 == null){ 
                row29 = new row29Struct();
              }
               row29.uuid = copyOfcopyOfmapped3_0.uuid;
               row29.keyword = copyOfcopyOfmapped3_0.keyword;
               row29.codeListValue = copyOfcopyOfmapped3_0.codeListValue;    
      nb_line_ok_tFilterRow_10++;
    } else {
      nb_line_reject_tFilterRow_10++;
    }

nb_line_tFilterRow_10++;

 


	tos_count_tFilterRow_10++;

/**
 * [tFilterRow_10 main ] stop
 */
	
	/**
	 * [tFilterRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_10";

	

 



/**
 * [tFilterRow_10 process_data_begin ] stop
 */
// Start of branch "row29"
if(row29 != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

			//row29
			//row29


			
				if(execStat){
					runStat.updateStatOnConnection("row29"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

map1 = null;


// # Output table : 'map1'
map1_tmp.uuid = row29.uuid;
map1_tmp.keyword = StringHandling.UPCASE(row29.keyword.substring(0,14))  + row29.keyword.substring(14,StringHandling.LEN(row29.keyword)) ;
map1_tmp.codeListValue = row29.codeListValue;
map1 = map1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "map1"
if(map1 != null) { 



	
	/**
	 * [tReplace_3 main ] start
	 */

	

	
	
	currentComponent="tReplace_3";

	

			//map1
			//map1


			
				if(execStat){
					runStat.updateStatOnConnection("map1"+iterateId,1, 1);
				} 
			

		

						String searchStr_tReplace_3_1 = "IDP_SHORTNAME_" + "";
							map1.keyword = StringUtils.replaceAllStrictly(map1.keyword, searchStr_tReplace_3_1, "" + "", false, false);
	        row45.uuid = map1.uuid;
	        
	        row45.keyword = map1.keyword;
	        
	        row45.codeListValue = map1.codeListValue;
	        
    nb_line_tReplace_3++;

 


	tos_count_tReplace_3++;

/**
 * [tReplace_3 main ] stop
 */
	
	/**
	 * [tReplace_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tReplace_3";

	

 



/**
 * [tReplace_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row45 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row45";

	

			//row45
			//row45


			
				if(execStat){
					runStat.updateStatOnConnection("row45"+iterateId,1, 1);
				} 
			

		


			   
			   

					row45Struct row45_HashRow = new row45Struct();
		   	   	   
				
				row45_HashRow.uuid = row45.uuid;
				
				row45_HashRow.keyword = row45.keyword;
				
				row45_HashRow.codeListValue = row45.codeListValue;
				
			tHash_Lookup_row45.put(row45_HashRow);
			
            




 


	tos_count_tAdvancedHash_row45++;

/**
 * [tAdvancedHash_row45 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row45 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row45";

	

 



/**
 * [tAdvancedHash_row45 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row45 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row45";

	

 



/**
 * [tAdvancedHash_row45 process_data_end ] stop
 */



	
	/**
	 * [tReplace_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tReplace_3";

	

 



/**
 * [tReplace_3 process_data_end ] stop
 */

} // End of branch "map1"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "row29"




	
	/**
	 * [tFilterRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_10";

	

 



/**
 * [tFilterRow_10 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfmapped3_0"




	
	/**
	 * [tXMLMap_6_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_6_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_6_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_IN";

	

}//TD512
 

ok_Hash.put("tXMLMap_6_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_6_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_6_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tFilterRow_10 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_10";

	
    globalMap.put("tFilterRow_10_NB_LINE", nb_line_tFilterRow_10);
    globalMap.put("tFilterRow_10_NB_LINE_OK", nb_line_ok_tFilterRow_10);
    globalMap.put("tFilterRow_10_NB_LINE_REJECT", nb_line_reject_tFilterRow_10);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("copyOfcopyOfmapped3_0"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_10", true);
end_Hash.put("tFilterRow_10", System.currentTimeMillis());




/**
 * [tFilterRow_10 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row29"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tReplace_3 end ] start
	 */

	

	
	
	currentComponent="tReplace_3";

	


globalMap.put("tReplace_3_NB_LINE",nb_line_tReplace_3);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("map1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tReplace_3", true);
end_Hash.put("tReplace_3", System.currentTimeMillis());




/**
 * [tReplace_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row45 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row45";

	

tHash_Lookup_row45.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row45"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row45", true);
end_Hash.put("tAdvancedHash_row45", System.currentTimeMillis());




/**
 * [tAdvancedHash_row45 end ] stop
 */


















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_11 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_11";

	

 



/**
 * [tFileInputXML_11 finally ] stop
 */

	
	/**
	 * [tXMLMap_6_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_6_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_6_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_6";
	
	currentComponent="tXMLMap_6_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_6_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tFilterRow_10 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_10";

	

 



/**
 * [tFilterRow_10 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tReplace_3 finally ] start
	 */

	

	
	
	currentComponent="tReplace_3";

	

 



/**
 * [tReplace_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row45 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row45";

	

 



/**
 * [tAdvancedHash_row45 finally ] stop
 */


















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_11_SUBPROCESS_STATE", 1);
	}
	


public static class row27Struct implements routines.system.IPersistableComparableLookupRow<row27Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String keyword;

				public String getKeyword () {
					return this.keyword;
				}
				
			    public String codeListValue;

				public String getCodeListValue () {
					return this.codeListValue;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row27Struct other = (row27Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row27Struct other) {

		other.uuid = this.uuid;
	            other.keyword = this.keyword;
	            other.codeListValue = this.codeListValue;
	            
	}

	public void copyKeysDataTo(row27Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.keyword = readString(dis,ois);
					
						this.codeListValue = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.keyword, dos, oos);
					
						writeString(this.codeListValue, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",keyword="+keyword);
		sb.append(",codeListValue="+codeListValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfmapped3_0Struct implements routines.system.IPersistableRow<copyOfmapped3_0Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String keyword;

				public String getKeyword () {
					return this.keyword;
				}
				
			    public String codeListValue;

				public String getCodeListValue () {
					return this.codeListValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.keyword = readString(dis);
					
					this.codeListValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.keyword,dos);
					
					// String
				
						writeString(this.codeListValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",keyword="+keyword);
		sb.append(",codeListValue="+codeListValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfmapped3_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public routines.system.Document xmldoc;

				public routines.system.Document getXmldoc () {
					return this.xmldoc;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
						this.xmldoc = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.xmldoc);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("xmldoc="+String.valueOf(xmldoc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputXML_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row21Struct row21 = new row21Struct();
copyOfmapped3_0Struct copyOfmapped3_0 = new copyOfmapped3_0Struct();
row27Struct row27 = new row27Struct();




	
	/**
	 * [tXMLMap_3_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_3_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_3_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_OUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row21" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tXMLMap_3_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_3_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_3_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_3_TXMLMAP_OUT__Struct Var__tXMLMap_3_TXMLMAP_OUT = new Var__tXMLMap_3_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
copyOfmapped3_0Struct copyOfmapped3_0_tmp = new copyOfmapped3_0Struct();
copyOfmapped3_0Struct copyOfmapped3_0_save = null;
//the aggregate variable
copyOfmapped3_0Struct copyOfmapped3_0_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_3 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_3",allOutsForAggregate_tXMLMap_3);
// ###############################
class TreeNode_API_tXMLMap_3_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
	java.util.Date get_Date(String xpath, String pattern){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Date(content, pattern);
	}
	Integer get_Integer(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Integer(content);
	}
	Character get_Character(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Character(content);
	}
	Float get_Float(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Float(content);
	}
	Double get_Double(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Double(content);
	}
	Boolean get_Boolean(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Boolean(content);
	}
}
			TreeNode_API_tXMLMap_3_TXMLMAP_OUT treeNodeAPI_tXMLMap_3_TXMLMAP_OUT = new TreeNode_API_tXMLMap_3_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_3_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_3_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_3_TXMLMAP_OUT xml_api_tXMLMap_3_TXMLMAP_OUT = new XML_API_tXMLMap_3_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_3_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            
 



/**
 * [tXMLMap_3_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tFileInputXML_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_10", false);
		start_Hash.put("tFileInputXML_10", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_10";

	
		int tos_count_tFileInputXML_10 = 0;
		

	

int nb_line_tFileInputXML_10 = 0;

	String os_tFileInputXML_10 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_10=false;
	if(os_tFileInputXML_10.indexOf("windows") > -1 || os_tFileInputXML_10.indexOf("nt") > -1){
		isWindows_tFileInputXML_10=true;
	}
class NameSpaceTool_tFileInputXML_10 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_10{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_10 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_10 = null;
try {
	filename_tFileInputXML_10 = System.getProperty("java.io.tmpdir") + "/sdiDump/tmp/out.xml";
} catch(java.lang.Exception e) {
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_10 != null && filename_tFileInputXML_10 instanceof String && filename_tFileInputXML_10.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_10){
		filename_tFileInputXML_10 = filename_tFileInputXML_10.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_10 = true;
org.dom4j.Document doc_tFileInputXML_10 = null;
java.io.Closeable toClose_tFileInputXML_10 = null;
try{
	if(filename_tFileInputXML_10 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_10 = (java.io.InputStream)filename_tFileInputXML_10;
		toClose_tFileInputXML_10 = inputStream_tFileInputXML_10;
		doc_tFileInputXML_10 = reader_tFileInputXML_10.read(inputStream_tFileInputXML_10);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_10 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_10)),"ISO-8859-15");
		toClose_tFileInputXML_10 = unicodeReader_tFileInputXML_10;
		org.xml.sax.InputSource in_tFileInputXML_10= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_10);
		doc_tFileInputXML_10 = reader_tFileInputXML_10.read(in_tFileInputXML_10);
	}
}catch(java.lang.Exception e){
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_10 = false;
} finally {
	if(toClose_tFileInputXML_10!=null) {
		toClose_tFileInputXML_10.close();
	}
}
if(isValidFile_tFileInputXML_10){
NameSpaceTool_tFileInputXML_10 nsTool_tFileInputXML_10 = new NameSpaceTool_tFileInputXML_10();
nsTool_tFileInputXML_10.countNSMap(doc_tFileInputXML_10.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_10 = nsTool_tFileInputXML_10.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_10 = doc_tFileInputXML_10.createXPath(nsTool_tFileInputXML_10.addDefaultNSPrefix("/csw:GetRecordsResponse"));  
x_tFileInputXML_10.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_10); 

java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_10 = (java.util.List<org.dom4j.tree.AbstractNode>)x_tFileInputXML_10.selectNodes(doc_tFileInputXML_10);	
XML_API_tFileInputXML_10 xml_api_tFileInputXML_10 = new XML_API_tFileInputXML_10();
String str_tFileInputXML_10 = "";
org.dom4j.Node node_tFileInputXML_10 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_10=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_10{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_10 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix(".","/csw:GetRecordsResponse"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_10 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_10 xPathUtil_tFileInputXML_10 = new XPathUtil_tFileInputXML_10();
	xPathUtil_tFileInputXML_10.initXPaths(xpaths_tFileInputXML_10, nsTool_tFileInputXML_10, xmlNameSpaceMap_tFileInputXML_10);
for (org.dom4j.tree.AbstractNode temp_tFileInputXML_10: nodeList_tFileInputXML_10) {
		nb_line_tFileInputXML_10++;
		
	row21 = null;			
	boolean whetherReject_tFileInputXML_10 = false;
	row21 = new row21Struct();
	try{
    Object obj0_tFileInputXML_10 = xpaths_tFileInputXML_10.get(0).evaluate(temp_tFileInputXML_10);
    if(obj0_tFileInputXML_10 == null) {
    	node_tFileInputXML_10 = null;
		str_tFileInputXML_10 = null;
    	
    } else if(obj0_tFileInputXML_10 instanceof org.dom4j.Node) {
    	node_tFileInputXML_10 = (org.dom4j.Node)obj0_tFileInputXML_10;
		str_tFileInputXML_10 = node_tFileInputXML_10.asXML();
    } else if(obj0_tFileInputXML_10 instanceof String || obj0_tFileInputXML_10 instanceof Number){
    	node_tFileInputXML_10 = temp_tFileInputXML_10;
    	str_tFileInputXML_10 = String.valueOf(obj0_tFileInputXML_10);
    } else if(obj0_tFileInputXML_10 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_10 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_10;
    	node_tFileInputXML_10 = nodes_tFileInputXML_10.size()>0 ? nodes_tFileInputXML_10.get(0) : null;
		str_tFileInputXML_10 = node_tFileInputXML_10==null?null:node_tFileInputXML_10.asXML();
	}
								row21.xmldoc = ParserUtils.parseTo_Document(str_tFileInputXML_10,false,"ISO-8859-15"); 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_10 = true;
                System.err.println(e.getMessage());
                row21 = null;
    }
			
			

 



/**
 * [tFileInputXML_10 begin ] stop
 */
	
	/**
	 * [tFileInputXML_10 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_10";

	

 


	tos_count_tFileInputXML_10++;

/**
 * [tFileInputXML_10 main ] stop
 */
	
	/**
	 * [tFileInputXML_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_10";

	

 



/**
 * [tFileInputXML_10 process_data_begin ] stop
 */
// Start of branch "row21"
if(row21 != null) { 



	
	/**
	 * [tXMLMap_3_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_OUT";

	

			//row21
			//row21


			
				if(execStat){
					runStat.updateStatOnConnection("row21"+iterateId,1, 1);
				} 
			

		

	boolean rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_3_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_3_TXMLMAP_OUT = false;
	  
	
			

					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_3_TXMLMAP_OUT_0 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_3_TXMLMAP_OUT_0.setOriginalLoop("/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:keyword");
					docToFlat_tXMLMap_3_TXMLMAP_OUT_0.setIsOptional(false);
					if(row21.xmldoc == null 
						|| row21.xmldoc.getDocument() == null) {
						throw new RuntimeException("row21.xmldoc can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_3_TXMLMAP_OUT_0 = row21.xmldoc.getDocument();
					docToFlat_tXMLMap_3_TXMLMAP_OUT_0.setDoc(doc_tXMLMap_3_TXMLMAP_OUT_0);
					docToFlat_tXMLMap_3_TXMLMAP_OUT_0.setDefineNS(true);
					docToFlat_tXMLMap_3_TXMLMAP_OUT_0.setNamespaceTool(nsTool_tXMLMap_3_TXMLMAP_OUT);
					
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT_0 = new java.util.HashMap<String,String>();
						xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT_0.put("gco","http://www.isotc211.org/2005/gco");xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT_0.put("gmx","http://www.isotc211.org/2005/gmx");xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT_0.put("csw","http://www.opengis.net/cat/csw/2.0.2");xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT_0.put("gml","http://www.opengis.net/gml");xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT_0.put("gmd","http://www.isotc211.org/2005/gmd");
					
					docToFlat_tXMLMap_3_TXMLMAP_OUT_0.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_3_TXMLMAP_OUT_0);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("row21.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:fileIdentifier/gco:CharacterString");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("../../../../../gmd:fileIdentifier/gco:CharacterString");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("row21.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:thesaurusName/gmd:CI_Citation/gmd:title/gco:CharacterString");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("../gmd:thesaurusName/gmd:CI_Citation/gmd:title/gco:CharacterString");
					
					absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("row21.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:keyword/gco:CharacterString");
					relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.add("gco:CharacterString");
					
					String[] absolutePathMappings_tXMLMap_3_TXMLMAP_OUT_0 = absolutePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_3_TXMLMAP_OUT_0 = relativePathMappingsList_tXMLMap_3_TXMLMAP_OUT_0.toArray(new String[0]);
					
					docToFlat_tXMLMap_3_TXMLMAP_OUT_0.setAbsolutePathMappings(absolutePathMappings_tXMLMap_3_TXMLMAP_OUT_0);
					docToFlat_tXMLMap_3_TXMLMAP_OUT_0.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_3_TXMLMAP_OUT_0);
					//generate document to flat data
					docToFlat_tXMLMap_3_TXMLMAP_OUT_0.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_3_TXMLMAP_OUT_0 = docToFlat_tXMLMap_3_TXMLMAP_OUT_0.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_3_TXMLMAP_OUT_0: resultSet_tXMLMap_3_TXMLMAP_OUT_0) { // G_TXM_M_001
						nb_line_tXMLMap_3_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_3_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_3_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_3_TXMLMAP_OUT_0 : oneRow_tXMLMap_3_TXMLMAP_OUT_0.entrySet()) {
							treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.put(entry_tXMLMap_3_TXMLMAP_OUT_0.getKey(),entry_tXMLMap_3_TXMLMAP_OUT_0.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_3_TXMLMAP_OUT__Struct Var = Var__tXMLMap_3_TXMLMAP_OUT;
		// ###############################
		// # Output table

copyOfmapped3_0 = null;


// # Output table : 'copyOfmapped3_0'

copyOfmapped3_0_tmp = new copyOfmapped3_0Struct();
copyOfmapped3_0_tmp.uuid = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row21.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:fileIdentifier/gco:CharacterString");
copyOfmapped3_0_tmp.keyword = treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row21.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:keyword/gco:CharacterString");
copyOfmapped3_0_tmp.codeListValue =  treeNodeAPI_tXMLMap_3_TXMLMAP_OUT.get_String("row21.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:thesaurusName/gmd:CI_Citation/gmd:title/gco:CharacterString");allOutsForAggregate_tXMLMap_3.add(copyOfmapped3_0_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_3_TXMLMAP_OUT = false;

				}//close G_TXM_M_001

 


	tos_count_tXMLMap_3_TXMLMAP_OUT++;

/**
 * [tXMLMap_3_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_3_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_3_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_3_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_3_TXMLMAP_OUT process_data_end ] stop
 */

} // End of branch "row21"




	
	/**
	 * [tFileInputXML_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_10";

	

 



/**
 * [tFileInputXML_10 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_10 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_10";

	


}
	}
	globalMap.put("tFileInputXML_10_NB_LINE",nb_line_tFileInputXML_10);

	
 

ok_Hash.put("tFileInputXML_10", true);
end_Hash.put("tFileInputXML_10", System.currentTimeMillis());




/**
 * [tFileInputXML_10 end ] stop
 */

	
	/**
	 * [tXMLMap_3_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_OUT";

	




			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row21"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tXMLMap_3_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_3_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_3_TXMLMAP_OUT end ] stop
 */



	
	/**
	 * [tAdvancedHash_row27 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row27", false);
		start_Hash.put("tAdvancedHash_row27", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row27";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row27" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row27 = 0;
		

			   		// connection name:row27
			   		// source node:tFilterRow_8 - inputs:(copyOfmapped3_0) outputs:(row27,row27) | target node:tAdvancedHash_row27 - inputs:(row27) outputs:()
			   		// linked node: tMap_2 - inputs:(row2,row44,row6,status,row40,row8,row13,row19,row22,row23,row34,row45,row27,row15) outputs:(map)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row27 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct> tHash_Lookup_row27 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row27Struct>getLookup(matchingModeEnum_row27);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row27", tHash_Lookup_row27);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row27 begin ] stop
 */



	
	/**
	 * [tFilterRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_8", false);
		start_Hash.put("tFilterRow_8", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_8";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("copyOfmapped3_0" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_8 = 0;
		
    int nb_line_tFilterRow_8 = 0;
    int nb_line_ok_tFilterRow_8 = 0;
    int nb_line_reject_tFilterRow_8 = 0;

    class Operator_tFilterRow_8 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_8(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_8 begin ] stop
 */



	
	/**
	 * [tXMLMap_3_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_3_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_3_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_IN";

	
		int tos_count_tXMLMap_3_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_3 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_3");
for(Object  row_out_tXMLMap_3_TXMLMAP_IN : outs_tXMLMap_3) {//TD512
 



/**
 * [tXMLMap_3_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_3_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_IN";

	

	copyOfmapped3_0 = null;
	if(row_out_tXMLMap_3_TXMLMAP_IN!=null && row_out_tXMLMap_3_TXMLMAP_IN instanceof copyOfmapped3_0Struct) {
		copyOfmapped3_0 = (copyOfmapped3_0Struct)row_out_tXMLMap_3_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_3_TXMLMAP_IN++;

/**
 * [tXMLMap_3_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_3_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_3_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "copyOfmapped3_0"
if(copyOfmapped3_0 != null) { 



	
	/**
	 * [tFilterRow_8 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_8";

	

			//copyOfmapped3_0
			//copyOfmapped3_0


			
				if(execStat){
					runStat.updateStatOnConnection("copyOfmapped3_0"+iterateId,1, 1);
				} 
			

		

          row27 = null;
          row27 = null;
    Operator_tFilterRow_8 ope_tFilterRow_8 = new Operator_tFilterRow_8("&&");
      ope_tFilterRow_8.matches((// code sample : use copyOfmapped3_0 to define the condition.
// copyOfmapped3_0.columnName1.equals("foo") ||!(copyOfmapped3_0.columnName2.equals("bar"))
// replace the following expression by your own filter condition 
//copyOfmapped3_0.codeListValue.contains("GEMET") || !(copyOfmapped3_0.codeListValue.contains("INSPIRE"))
copyOfmapped3_0.keyword.toLowerCase().contains("idp") && copyOfmapped3_0.keyword.toLowerCase().contains("reference") ), "advanced condition failed");
    
    if (ope_tFilterRow_8.getMatchFlag()) {
              if(row27 == null){ 
                row27 = new row27Struct();
              }
               row27.uuid = copyOfmapped3_0.uuid;
               row27.keyword = copyOfmapped3_0.keyword;
               row27.codeListValue = copyOfmapped3_0.codeListValue;
              if(row27 == null){ 
                row27 = new row27Struct();
              }
               row27.uuid = copyOfmapped3_0.uuid;
               row27.keyword = copyOfmapped3_0.keyword;
               row27.codeListValue = copyOfmapped3_0.codeListValue;    
      nb_line_ok_tFilterRow_8++;
    } else {
      nb_line_reject_tFilterRow_8++;
    }

nb_line_tFilterRow_8++;

 


	tos_count_tFilterRow_8++;

/**
 * [tFilterRow_8 main ] stop
 */
	
	/**
	 * [tFilterRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_8";

	

 



/**
 * [tFilterRow_8 process_data_begin ] stop
 */
// Start of branch "row27"
if(row27 != null) { 



	
	/**
	 * [tAdvancedHash_row27 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";

	

			//row27
			//row27


			
				if(execStat){
					runStat.updateStatOnConnection("row27"+iterateId,1, 1);
				} 
			

		


			   
			   

					row27Struct row27_HashRow = new row27Struct();
		   	   	   
				
				row27_HashRow.uuid = row27.uuid;
				
				row27_HashRow.keyword = row27.keyword;
				
				row27_HashRow.codeListValue = row27.codeListValue;
				
			tHash_Lookup_row27.put(row27_HashRow);
			
            




 


	tos_count_tAdvancedHash_row27++;

/**
 * [tAdvancedHash_row27 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";

	

 



/**
 * [tAdvancedHash_row27 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row27 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";

	

 



/**
 * [tAdvancedHash_row27 process_data_end ] stop
 */

} // End of branch "row27"




	
	/**
	 * [tFilterRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_8";

	

 



/**
 * [tFilterRow_8 process_data_end ] stop
 */

} // End of branch "copyOfmapped3_0"




	
	/**
	 * [tXMLMap_3_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_3_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_3_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_IN";

	

}//TD512
 

ok_Hash.put("tXMLMap_3_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_3_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_3_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tFilterRow_8 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_8";

	
    globalMap.put("tFilterRow_8_NB_LINE", nb_line_tFilterRow_8);
    globalMap.put("tFilterRow_8_NB_LINE_OK", nb_line_ok_tFilterRow_8);
    globalMap.put("tFilterRow_8_NB_LINE_REJECT", nb_line_reject_tFilterRow_8);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("copyOfmapped3_0"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_8", true);
end_Hash.put("tFilterRow_8", System.currentTimeMillis());




/**
 * [tFilterRow_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row27 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";

	

tHash_Lookup_row27.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row27"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row27", true);
end_Hash.put("tAdvancedHash_row27", System.currentTimeMillis());




/**
 * [tAdvancedHash_row27 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_10 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_10";

	

 



/**
 * [tFileInputXML_10 finally ] stop
 */

	
	/**
	 * [tXMLMap_3_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_3_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_3_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_3";
	
	currentComponent="tXMLMap_3_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_3_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tFilterRow_8 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_8";

	

 



/**
 * [tFilterRow_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row27 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";

	

 



/**
 * [tAdvancedHash_row27 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_10_SUBPROCESS_STATE", 1);
	}
	


public static class row15Struct implements routines.system.IPersistableComparableLookupRow<row15Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String keyword;

				public String getKeyword () {
					return this.keyword;
				}
				
			    public String codeListValue;

				public String getCodeListValue () {
					return this.codeListValue;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row15Struct other = (row15Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row15Struct other) {

		other.uuid = this.uuid;
	            other.keyword = this.keyword;
	            other.codeListValue = this.codeListValue;
	            
	}

	public void copyKeysDataTo(row15Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.keyword = readString(dis,ois);
					
						this.codeListValue = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.keyword, dos, oos);
					
						writeString(this.codeListValue, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",keyword="+keyword);
		sb.append(",codeListValue="+codeListValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_4 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_4> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String keyword;

				public String getKeyword () {
					return this.keyword;
				}
				
			    public String codeListValue;

				public String getCodeListValue () {
					return this.codeListValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.keyword = readString(dis);
					
					this.codeListValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.keyword,dos);
					
					// String
				
						writeString(this.codeListValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",keyword="+keyword);
		sb.append(",codeListValue="+codeListValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_4 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String keyword;

				public String getKeyword () {
					return this.keyword;
				}
				
			    public String codeListValue;

				public String getCodeListValue () {
					return this.codeListValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.keyword = readString(dis);
					
					this.codeListValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.keyword,dos);
					
					// String
				
						writeString(this.codeListValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",keyword="+keyword);
		sb.append(",codeListValue="+codeListValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String keyword;

				public String getKeyword () {
					return this.keyword;
				}
				
			    public String codeListValue;

				public String getCodeListValue () {
					return this.codeListValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.keyword = readString(dis);
					
					this.codeListValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.keyword,dos);
					
					// String
				
						writeString(this.codeListValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",keyword="+keyword);
		sb.append(",codeListValue="+codeListValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfmapped3_1Struct implements routines.system.IPersistableRow<copyOfmapped3_1Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String keyword;

				public String getKeyword () {
					return this.keyword;
				}
				
			    public String codeListValue;

				public String getCodeListValue () {
					return this.codeListValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.keyword = readString(dis);
					
					this.codeListValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.keyword,dos);
					
					// String
				
						writeString(this.codeListValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",keyword="+keyword);
		sb.append(",codeListValue="+codeListValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfmapped3_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public routines.system.Document xmldoc;

				public routines.system.Document getXmldoc () {
					return this.xmldoc;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
						this.xmldoc = (routines.system.Document) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Document
				
       			    	dos.writeObject(this.xmldoc);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("xmldoc="+String.valueOf(xmldoc));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row26Struct row26 = new row26Struct();
copyOfmapped3_1Struct copyOfmapped3_1 = new copyOfmapped3_1Struct();
row12Struct row12 = new row12Struct();
row14Struct row14 = new row14Struct();
row15Struct row15 = new row15Struct();




	
	/**
	 * [tXMLMap_11_TXMLMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_11_TXMLMAP_OUT", false);
		start_Hash.put("tXMLMap_11_TXMLMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_11";
	
	currentComponent="tXMLMap_11_TXMLMAP_OUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row26" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tXMLMap_11_TXMLMAP_OUT = 0;
		

	
	
//===============================input xml init part===============================
class XML_API_tXMLMap_11_TXMLMAP_OUT{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}
	class Var__tXMLMap_11_TXMLMAP_OUT__Struct {
	}
	Var__tXMLMap_11_TXMLMAP_OUT__Struct Var__tXMLMap_11_TXMLMAP_OUT = new Var__tXMLMap_11_TXMLMAP_OUT__Struct();
// ###############################
// # Outputs initialization
copyOfmapped3_1Struct copyOfmapped3_1_tmp = new copyOfmapped3_1Struct();
copyOfmapped3_1Struct copyOfmapped3_1_save = null;
//the aggregate variable
copyOfmapped3_1Struct copyOfmapped3_1_aggregate = null;
//init the resultset for aggregate
java.util.List<Object> allOutsForAggregate_tXMLMap_11 = new java.util.ArrayList<Object>();
globalMap.put("allOutsForAggregate_tXMLMap_11",allOutsForAggregate_tXMLMap_11);
// ###############################
class TreeNode_API_tXMLMap_11_TXMLMAP_OUT {
	java.util.Map<String, String> xpath_value_map = new java.util.HashMap<String, String>();
	
	void clear(){
		xpath_value_map.clear();
	}
	
	void put(String xpath, String value){
		xpath_value_map.put(xpath, value);
	}
	String get_null(String xpath) {
		return null;
	}
	String get_String(String xpath){
		return xpath_value_map.get(xpath);
	}
	java.util.Date get_Date(String xpath, String pattern){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Date(content, pattern);
	}
	Integer get_Integer(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Integer(content);
	}
	Character get_Character(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Character(content);
	}
	Float get_Float(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Float(content);
	}
	Double get_Double(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Double(content);
	}
	Boolean get_Boolean(String xpath){
		String content = xpath_value_map.get(xpath);
		if(content==null || content.length()==0) return null;
		return ParserUtils.parseTo_Boolean(content);
	}
}
			TreeNode_API_tXMLMap_11_TXMLMAP_OUT treeNodeAPI_tXMLMap_11_TXMLMAP_OUT = new TreeNode_API_tXMLMap_11_TXMLMAP_OUT();
			NameSpaceTool nsTool_tXMLMap_11_TXMLMAP_OUT = new NameSpaceTool();
		int nb_line_tXMLMap_11_TXMLMAP_OUT = 0; 
	
    XML_API_tXMLMap_11_TXMLMAP_OUT xml_api_tXMLMap_11_TXMLMAP_OUT = new XML_API_tXMLMap_11_TXMLMAP_OUT();

	//the map store the previous value of aggregate columns
	java.util.Map<String,Object> aggregateCacheMap_tXMLMap_11_TXMLMAP_OUT = new java.util.HashMap<String,Object>();

	            
 



/**
 * [tXMLMap_11_TXMLMAP_OUT begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";

	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class NameSpaceTool_tFileInputXML_1 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_1{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getText().length() == 0;
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_1 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = System.getProperty("java.io.tmpdir") + "/sdiDump/tmp/out.xml";
} catch(java.lang.Exception e) {
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_1 = true;
org.dom4j.Document doc_tFileInputXML_1 = null;
java.io.Closeable toClose_tFileInputXML_1 = null;
try{
	if(filename_tFileInputXML_1 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_1 = (java.io.InputStream)filename_tFileInputXML_1;
		toClose_tFileInputXML_1 = inputStream_tFileInputXML_1;
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(inputStream_tFileInputXML_1);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_1 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_1)),"UTF-8");
		toClose_tFileInputXML_1 = unicodeReader_tFileInputXML_1;
		org.xml.sax.InputSource in_tFileInputXML_1= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_1);
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(in_tFileInputXML_1);
	}
}catch(java.lang.Exception e){
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_1 = false;
} finally {
	if(toClose_tFileInputXML_1!=null) {
		toClose_tFileInputXML_1.close();
	}
}
if(isValidFile_tFileInputXML_1){
NameSpaceTool_tFileInputXML_1 nsTool_tFileInputXML_1 = new NameSpaceTool_tFileInputXML_1();
nsTool_tFileInputXML_1.countNSMap(doc_tFileInputXML_1.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_1 = nsTool_tFileInputXML_1.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_1 = doc_tFileInputXML_1.createXPath(nsTool_tFileInputXML_1.addDefaultNSPrefix("/csw:GetRecordsResponse"));  
x_tFileInputXML_1.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1); 

java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_1 = (java.util.List<org.dom4j.tree.AbstractNode>)x_tFileInputXML_1.selectNodes(doc_tFileInputXML_1);	
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();
String str_tFileInputXML_1 = "";
org.dom4j.Node node_tFileInputXML_1 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_1=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_1{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix(".","/csw:GetRecordsResponse"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_1 xPathUtil_tFileInputXML_1 = new XPathUtil_tFileInputXML_1();
	xPathUtil_tFileInputXML_1.initXPaths(xpaths_tFileInputXML_1, nsTool_tFileInputXML_1, xmlNameSpaceMap_tFileInputXML_1);
for (org.dom4j.tree.AbstractNode temp_tFileInputXML_1: nodeList_tFileInputXML_1) {
		nb_line_tFileInputXML_1++;
		
	row26 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row26 = new row26Struct();
	try{
    Object obj0_tFileInputXML_1 = xpaths_tFileInputXML_1.get(0).evaluate(temp_tFileInputXML_1);
    if(obj0_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
		str_tFileInputXML_1 = null;
    	
    } else if(obj0_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj0_tFileInputXML_1;
		str_tFileInputXML_1 = node_tFileInputXML_1.asXML();
    } else if(obj0_tFileInputXML_1 instanceof String || obj0_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj0_tFileInputXML_1);
    } else if(obj0_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
		str_tFileInputXML_1 = node_tFileInputXML_1==null?null:node_tFileInputXML_1.asXML();
	}
								row26.xmldoc = ParserUtils.parseTo_Document(str_tFileInputXML_1,false,"UTF-8"); 
			
    } catch (java.lang.Exception e) {
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row26 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row26"
if(row26 != null) { 



	
	/**
	 * [tXMLMap_11_TXMLMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_11";
	
	currentComponent="tXMLMap_11_TXMLMAP_OUT";

	

			//row26
			//row26


			
				if(execStat){
					runStat.updateStatOnConnection("row26"+iterateId,1, 1);
				} 
			

		

	boolean rejectedInnerJoin_tXMLMap_11_TXMLMAP_OUT = false;
	boolean rejectedDocInnerJoin_tXMLMap_11_TXMLMAP_OUT = false;
	boolean mainRowRejected_tXMLMap_11_TXMLMAP_OUT = false;
	boolean isMatchDocRowtXMLMap_11_TXMLMAP_OUT = false;
	  
	
			

					//init document to flat tool
					routines.system.DocumentToFlat docToFlat_tXMLMap_11_TXMLMAP_OUT_0 = new routines.system.DocumentToFlat();
					docToFlat_tXMLMap_11_TXMLMAP_OUT_0.setOriginalLoop("/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:keyword");
					docToFlat_tXMLMap_11_TXMLMAP_OUT_0.setIsOptional(false);
					if(row26.xmldoc == null 
						|| row26.xmldoc.getDocument() == null) {
						throw new RuntimeException("row26.xmldoc can't be empty");
					}
					org.dom4j.Document doc_tXMLMap_11_TXMLMAP_OUT_0 = row26.xmldoc.getDocument();
					docToFlat_tXMLMap_11_TXMLMAP_OUT_0.setDoc(doc_tXMLMap_11_TXMLMAP_OUT_0);
					docToFlat_tXMLMap_11_TXMLMAP_OUT_0.setDefineNS(true);
					docToFlat_tXMLMap_11_TXMLMAP_OUT_0.setNamespaceTool(nsTool_tXMLMap_11_TXMLMAP_OUT);
					
						java.util.HashMap<String,String> xmlNameSpaceMap_tXMLMap_11_TXMLMAP_OUT_0 = new java.util.HashMap<String,String>();
						xmlNameSpaceMap_tXMLMap_11_TXMLMAP_OUT_0.put("gco","http://www.isotc211.org/2005/gco");xmlNameSpaceMap_tXMLMap_11_TXMLMAP_OUT_0.put("gmx","http://www.isotc211.org/2005/gmx");xmlNameSpaceMap_tXMLMap_11_TXMLMAP_OUT_0.put("csw","http://www.opengis.net/cat/csw/2.0.2");xmlNameSpaceMap_tXMLMap_11_TXMLMAP_OUT_0.put("gml","http://www.opengis.net/gml");xmlNameSpaceMap_tXMLMap_11_TXMLMAP_OUT_0.put("gmd","http://www.isotc211.org/2005/gmd");
					
					docToFlat_tXMLMap_11_TXMLMAP_OUT_0.setXmlNameSpaceMap(xmlNameSpaceMap_tXMLMap_11_TXMLMAP_OUT_0);
					
					java.util.List<String> absolutePathMappingsList_tXMLMap_11_TXMLMAP_OUT_0 = new java.util.ArrayList<String>();
					java.util.List<String> relativePathMappingsList_tXMLMap_11_TXMLMAP_OUT_0 = new java.util.ArrayList<String>();
					
					absolutePathMappingsList_tXMLMap_11_TXMLMAP_OUT_0.add("row26.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:thesaurusName/gmd:CI_Citation/gmd:title/gco:CharacterString");
					relativePathMappingsList_tXMLMap_11_TXMLMAP_OUT_0.add("../gmd:thesaurusName/gmd:CI_Citation/gmd:title/gco:CharacterString");
					
					absolutePathMappingsList_tXMLMap_11_TXMLMAP_OUT_0.add("row26.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:fileIdentifier/gco:CharacterString");
					relativePathMappingsList_tXMLMap_11_TXMLMAP_OUT_0.add("../../../../../gmd:fileIdentifier/gco:CharacterString");
					
					absolutePathMappingsList_tXMLMap_11_TXMLMAP_OUT_0.add("row26.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:keyword/gco:CharacterString");
					relativePathMappingsList_tXMLMap_11_TXMLMAP_OUT_0.add("gco:CharacterString");
					
					String[] absolutePathMappings_tXMLMap_11_TXMLMAP_OUT_0 = absolutePathMappingsList_tXMLMap_11_TXMLMAP_OUT_0.toArray(new String[0]);
					String[] relativePathMappings_tXMLMap_11_TXMLMAP_OUT_0 = relativePathMappingsList_tXMLMap_11_TXMLMAP_OUT_0.toArray(new String[0]);
					
					docToFlat_tXMLMap_11_TXMLMAP_OUT_0.setAbsolutePathMappings(absolutePathMappings_tXMLMap_11_TXMLMAP_OUT_0);
					docToFlat_tXMLMap_11_TXMLMAP_OUT_0.setCurrentRelativePathMappings(relativePathMappings_tXMLMap_11_TXMLMAP_OUT_0);
					//generate document to flat data
					docToFlat_tXMLMap_11_TXMLMAP_OUT_0.flat();
					//get flat data
					java.util.List<java.util.Map<String, String>> resultSet_tXMLMap_11_TXMLMAP_OUT_0 = docToFlat_tXMLMap_11_TXMLMAP_OUT_0.getResultSet();
					
					for (java.util.Map<String,String> oneRow_tXMLMap_11_TXMLMAP_OUT_0: resultSet_tXMLMap_11_TXMLMAP_OUT_0) { // G_TXM_M_001
						nb_line_tXMLMap_11_TXMLMAP_OUT++;
				    	rejectedInnerJoin_tXMLMap_11_TXMLMAP_OUT = false;
				    	rejectedDocInnerJoin_tXMLMap_11_TXMLMAP_OUT = false;
						mainRowRejected_tXMLMap_11_TXMLMAP_OUT=false;
					    isMatchDocRowtXMLMap_11_TXMLMAP_OUT = false;
				    	treeNodeAPI_tXMLMap_11_TXMLMAP_OUT.clear();
				    	for(java.util.Map.Entry<String, String> entry_tXMLMap_11_TXMLMAP_OUT_0 : oneRow_tXMLMap_11_TXMLMAP_OUT_0.entrySet()) {
							treeNodeAPI_tXMLMap_11_TXMLMAP_OUT.put(entry_tXMLMap_11_TXMLMAP_OUT_0.getKey(),entry_tXMLMap_11_TXMLMAP_OUT_0.getValue());
						}
						
{ // start of Var scope

	// ###############################
	// # Vars tables
Var__tXMLMap_11_TXMLMAP_OUT__Struct Var = Var__tXMLMap_11_TXMLMAP_OUT;
		// ###############################
		// # Output table

copyOfmapped3_1 = null;


// # Output table : 'copyOfmapped3_1'

copyOfmapped3_1_tmp = new copyOfmapped3_1Struct();
copyOfmapped3_1_tmp.uuid = treeNodeAPI_tXMLMap_11_TXMLMAP_OUT.get_String("row26.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:fileIdentifier/gco:CharacterString");
copyOfmapped3_1_tmp.keyword = treeNodeAPI_tXMLMap_11_TXMLMAP_OUT.get_String("row26.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:keyword/gco:CharacterString");
copyOfmapped3_1_tmp.codeListValue =  treeNodeAPI_tXMLMap_11_TXMLMAP_OUT.get_String("row26.xmldoc:/csw:GetRecordsResponse/csw:SearchResults/gmd:MD_Metadata/gmd:identificationInfo/gmd:MD_DataIdentification/gmd:descriptiveKeywords/gmd:MD_Keywords/gmd:thesaurusName/gmd:CI_Citation/gmd:title/gco:CharacterString");allOutsForAggregate_tXMLMap_11.add(copyOfmapped3_1_tmp);

// ###############################

} // end of Var scope

rejectedInnerJoin_tXMLMap_11_TXMLMAP_OUT = false;

				}//close G_TXM_M_001

 


	tos_count_tXMLMap_11_TXMLMAP_OUT++;

/**
 * [tXMLMap_11_TXMLMAP_OUT main ] stop
 */
	
	/**
	 * [tXMLMap_11_TXMLMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_11";
	
	currentComponent="tXMLMap_11_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_11_TXMLMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tXMLMap_11_TXMLMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_11";
	
	currentComponent="tXMLMap_11_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_11_TXMLMAP_OUT process_data_end ] stop
 */

} // End of branch "row26"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	


}
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	
 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tXMLMap_11_TXMLMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_11";
	
	currentComponent="tXMLMap_11_TXMLMAP_OUT";

	




			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row26"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tXMLMap_11_TXMLMAP_OUT", true);
end_Hash.put("tXMLMap_11_TXMLMAP_OUT", System.currentTimeMillis());




/**
 * [tXMLMap_11_TXMLMAP_OUT end ] stop
 */




	
	/**
	 * [tAggregateRow_4_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_4_AGGOUT", false);
		start_Hash.put("tAggregateRow_4_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row14" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAggregateRow_4_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_4 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_4 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_4 utilClass_tAggregateRow_4 = new UtilClass_tAggregateRow_4();

	

	class AggOperationStruct_tAggregateRow_4 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String uuid;StringBuilder keyword_list = new StringBuilder();
           			boolean keyword_list_firstEmpty = false;
           			StringBuilder codeListValue_list = new StringBuilder();
           			boolean codeListValue_list_firstEmpty = false;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_4 other = (AggOperationStruct_tAggregateRow_4) obj;
			
							if (this.uuid == null) {
								if (other.uuid != null) 
									return false;
							} else if (!this.uuid.equals(other.uuid)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_4 operation_result_tAggregateRow_4 = null;
	AggOperationStruct_tAggregateRow_4 operation_finder_tAggregateRow_4 = new AggOperationStruct_tAggregateRow_4();
	java.util.Map<AggOperationStruct_tAggregateRow_4,AggOperationStruct_tAggregateRow_4> hash_tAggregateRow_4 = new java.util.HashMap<AggOperationStruct_tAggregateRow_4,AggOperationStruct_tAggregateRow_4>();
	
	String delimiter_tAggregateRow_4 = "|";
	

 



/**
 * [tAggregateRow_4_AGGOUT begin ] stop
 */



	
	/**
	 * [tFilterRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_3", false);
		start_Hash.put("tFilterRow_3", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row12" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_3 = 0;
		
    int nb_line_tFilterRow_3 = 0;
    int nb_line_ok_tFilterRow_3 = 0;
    int nb_line_reject_tFilterRow_3 = 0;

    class Operator_tFilterRow_3 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_3(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_3 begin ] stop
 */



	
	/**
	 * [tFilterRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_2", false);
		start_Hash.put("tFilterRow_2", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("copyOfmapped3_1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_2 = 0;
		
    int nb_line_tFilterRow_2 = 0;
    int nb_line_ok_tFilterRow_2 = 0;
    int nb_line_reject_tFilterRow_2 = 0;

    class Operator_tFilterRow_2 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_2(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_2 begin ] stop
 */



	
	/**
	 * [tXMLMap_11_TXMLMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tXMLMap_11_TXMLMAP_IN", false);
		start_Hash.put("tXMLMap_11_TXMLMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tXMLMap_11";
	
	currentComponent="tXMLMap_11_TXMLMAP_IN";

	
		int tos_count_tXMLMap_11_TXMLMAP_IN = 0;
		
java.util.List<Object> outs_tXMLMap_11 = (java.util.List<Object>)globalMap.get("allOutsForAggregate_tXMLMap_11");
for(Object  row_out_tXMLMap_11_TXMLMAP_IN : outs_tXMLMap_11) {//TD512
 



/**
 * [tXMLMap_11_TXMLMAP_IN begin ] stop
 */
	
	/**
	 * [tXMLMap_11_TXMLMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_11";
	
	currentComponent="tXMLMap_11_TXMLMAP_IN";

	

	copyOfmapped3_1 = null;
	if(row_out_tXMLMap_11_TXMLMAP_IN!=null && row_out_tXMLMap_11_TXMLMAP_IN instanceof copyOfmapped3_1Struct) {
		copyOfmapped3_1 = (copyOfmapped3_1Struct)row_out_tXMLMap_11_TXMLMAP_IN;		
	}
 


	tos_count_tXMLMap_11_TXMLMAP_IN++;

/**
 * [tXMLMap_11_TXMLMAP_IN main ] stop
 */
	
	/**
	 * [tXMLMap_11_TXMLMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_11";
	
	currentComponent="tXMLMap_11_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_11_TXMLMAP_IN process_data_begin ] stop
 */
// Start of branch "copyOfmapped3_1"
if(copyOfmapped3_1 != null) { 



	
	/**
	 * [tFilterRow_2 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

			//copyOfmapped3_1
			//copyOfmapped3_1


			
				if(execStat){
					runStat.updateStatOnConnection("copyOfmapped3_1"+iterateId,1, 1);
				} 
			

		

          row12 = null;
    Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("&&");
            ope_tFilterRow_2.matches((copyOfmapped3_1.codeListValue == null? false : copyOfmapped3_1.codeListValue.compareTo("") != 0)
                           , "codeListValue.compareTo(\"\") != 0 failed");
    
    if (ope_tFilterRow_2.getMatchFlag()) {
              if(row12 == null){ 
                row12 = new row12Struct();
              }
               row12.uuid = copyOfmapped3_1.uuid;
               row12.keyword = copyOfmapped3_1.keyword;
               row12.codeListValue = copyOfmapped3_1.codeListValue;    
      nb_line_ok_tFilterRow_2++;
    } else {
      nb_line_reject_tFilterRow_2++;
    }

nb_line_tFilterRow_2++;

 


	tos_count_tFilterRow_2++;

/**
 * [tFilterRow_2 main ] stop
 */
	
	/**
	 * [tFilterRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 process_data_begin ] stop
 */
// Start of branch "row12"
if(row12 != null) { 



	
	/**
	 * [tFilterRow_3 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

			//row12
			//row12


			
				if(execStat){
					runStat.updateStatOnConnection("row12"+iterateId,1, 1);
				} 
			

		

          row14 = null;
    Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3("&&");
      ope_tFilterRow_3.matches((// code sample : use row12 to define the condition.
// row12.columnName1.equals("foo") ||!(row12.columnName2.equals("bar"))
// replace the following expression by your own filter condition 
//row12.codeListValue.contains("GEMET") || !(row12.codeListValue.contains("INSPIRE"))
row12.codeListValue.contains("INSPIRE")), "advanced condition failed");
    
    if (ope_tFilterRow_3.getMatchFlag()) {
              if(row14 == null){ 
                row14 = new row14Struct();
              }
               row14.uuid = row12.uuid;
               row14.keyword = row12.keyword;
               row14.codeListValue = row12.codeListValue;    
      nb_line_ok_tFilterRow_3++;
    } else {
      nb_line_reject_tFilterRow_3++;
    }

nb_line_tFilterRow_3++;

 


	tos_count_tFilterRow_3++;

/**
 * [tFilterRow_3 main ] stop
 */
	
	/**
	 * [tFilterRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 process_data_begin ] stop
 */
// Start of branch "row14"
if(row14 != null) { 



	
	/**
	 * [tAggregateRow_4_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";

	

			//row14
			//row14


			
				if(execStat){
					runStat.updateStatOnConnection("row14"+iterateId,1, 1);
				} 
			

		
	
operation_finder_tAggregateRow_4.uuid = row14.uuid;
			

	operation_finder_tAggregateRow_4.hashCodeDirty = true;
	
	operation_result_tAggregateRow_4 = hash_tAggregateRow_4.get(operation_finder_tAggregateRow_4);

	

	if(operation_result_tAggregateRow_4 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_4 = new AggOperationStruct_tAggregateRow_4();

		operation_result_tAggregateRow_4.uuid = operation_finder_tAggregateRow_4.uuid;
				
		
		

		hash_tAggregateRow_4.put(operation_result_tAggregateRow_4, operation_result_tAggregateRow_4);
	
	} // G_OutMain_AggR_001


	
				if(row14.keyword != null) { // G_OutMain_AggR_546
				
				if(operation_result_tAggregateRow_4.keyword_list.length() > 0) {
					operation_result_tAggregateRow_4.keyword_list.append("|");
				} 
				else if(operation_result_tAggregateRow_4.keyword_list_firstEmpty){
					operation_result_tAggregateRow_4.keyword_list.append("|");
				}
					if(operation_result_tAggregateRow_4.keyword_list != null) {
						if(operation_result_tAggregateRow_4.keyword_list_firstEmpty==false && ("").equals(String.valueOf(row14.keyword))){
							operation_result_tAggregateRow_4.keyword_list_firstEmpty = true;
						}
						operation_result_tAggregateRow_4.keyword_list = operation_result_tAggregateRow_4.keyword_list.append(String.valueOf(row14.keyword));
					}
				
				} // G_OutMain_AggR_546
				
				if(row14.codeListValue != null) { // G_OutMain_AggR_546
				
				if(operation_result_tAggregateRow_4.codeListValue_list.length() > 0) {
					operation_result_tAggregateRow_4.codeListValue_list.append("|");
				} 
				else if(operation_result_tAggregateRow_4.codeListValue_list_firstEmpty){
					operation_result_tAggregateRow_4.codeListValue_list.append("|");
				}
					if(operation_result_tAggregateRow_4.codeListValue_list != null) {
						if(operation_result_tAggregateRow_4.codeListValue_list_firstEmpty==false && ("").equals(String.valueOf(row14.codeListValue))){
							operation_result_tAggregateRow_4.codeListValue_list_firstEmpty = true;
						}
						operation_result_tAggregateRow_4.codeListValue_list = operation_result_tAggregateRow_4.codeListValue_list.append(String.valueOf(row14.codeListValue));
					}
				
				} // G_OutMain_AggR_546
				


 


	tos_count_tAggregateRow_4_AGGOUT++;

/**
 * [tAggregateRow_4_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_4_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";

	

 



/**
 * [tAggregateRow_4_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_4_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";

	

 



/**
 * [tAggregateRow_4_AGGOUT process_data_end ] stop
 */

} // End of branch "row14"




	
	/**
	 * [tFilterRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 process_data_end ] stop
 */

} // End of branch "row12"




	
	/**
	 * [tFilterRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 process_data_end ] stop
 */

} // End of branch "copyOfmapped3_1"




	
	/**
	 * [tXMLMap_11_TXMLMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_11";
	
	currentComponent="tXMLMap_11_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_11_TXMLMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tXMLMap_11_TXMLMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_11";
	
	currentComponent="tXMLMap_11_TXMLMAP_IN";

	

}//TD512
 

ok_Hash.put("tXMLMap_11_TXMLMAP_IN", true);
end_Hash.put("tXMLMap_11_TXMLMAP_IN", System.currentTimeMillis());




/**
 * [tXMLMap_11_TXMLMAP_IN end ] stop
 */

	
	/**
	 * [tFilterRow_2 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	
    globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("copyOfmapped3_1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_2", true);
end_Hash.put("tFilterRow_2", System.currentTimeMillis());




/**
 * [tFilterRow_2 end ] stop
 */

	
	/**
	 * [tFilterRow_3 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	
    globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_OK", nb_line_ok_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_REJECT", nb_line_reject_tFilterRow_3);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row12"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_3", true);
end_Hash.put("tFilterRow_3", System.currentTimeMillis());




/**
 * [tFilterRow_3 end ] stop
 */

	
	/**
	 * [tAggregateRow_4_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row14"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAggregateRow_4_AGGOUT", true);
end_Hash.put("tAggregateRow_4_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_4_AGGOUT end ] stop
 */


	
	/**
	 * [tAdvancedHash_row15 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row15", false);
		start_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row15";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row15" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row15 = 0;
		

			   		// connection name:row15
			   		// source node:tAggregateRow_4_AGGIN - inputs:(OnRowsEnd) outputs:(row15,row15) | target node:tAdvancedHash_row15 - inputs:(row15) outputs:()
			   		// linked node: tMap_2 - inputs:(row2,row44,row6,status,row40,row8,row13,row19,row22,row23,row34,row45,row27,row15) outputs:(map)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row15 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row15Struct>getLookup(matchingModeEnum_row15);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row15", tHash_Lookup_row15);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row15 begin ] stop
 */



	
	/**
	 * [tAggregateRow_4_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_4_AGGIN", false);
		start_Hash.put("tAggregateRow_4_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";

	
		int tos_count_tAggregateRow_4_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_4> values_tAggregateRow_4 = hash_tAggregateRow_4.values();

globalMap.put("tAggregateRow_4_NB_LINE", values_tAggregateRow_4.size());

for(AggOperationStruct_tAggregateRow_4 aggregated_row_tAggregateRow_4 : values_tAggregateRow_4) { // G_AggR_600



 



/**
 * [tAggregateRow_4_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_4_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";

	

            				    row15.uuid = aggregated_row_tAggregateRow_4.uuid;
            				    
    								row15.keyword = aggregated_row_tAggregateRow_4.keyword_list.toString();
	    						
    								row15.codeListValue = aggregated_row_tAggregateRow_4.codeListValue_list.toString();
	    						

 


	tos_count_tAggregateRow_4_AGGIN++;

/**
 * [tAggregateRow_4_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_4_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";

	

 



/**
 * [tAggregateRow_4_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";

	

			//row15
			//row15


			
				if(execStat){
					runStat.updateStatOnConnection("row15"+iterateId,1, 1);
				} 
			

		


			   
			   

					row15Struct row15_HashRow = new row15Struct();
		   	   	   
				
				row15_HashRow.uuid = row15.uuid;
				
				row15_HashRow.keyword = row15.keyword;
				
				row15_HashRow.codeListValue = row15.codeListValue;
				
			tHash_Lookup_row15.put(row15_HashRow);
			
            




 


	tos_count_tAdvancedHash_row15++;

/**
 * [tAdvancedHash_row15 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";

	

 



/**
 * [tAdvancedHash_row15 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row15 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";

	

 



/**
 * [tAdvancedHash_row15 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_4_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";

	

 



/**
 * [tAggregateRow_4_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_4_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_4_AGGIN", true);
end_Hash.put("tAggregateRow_4_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_4_AGGIN end ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";

	

tHash_Lookup_row15.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row15"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row15", true);
end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());




/**
 * [tAdvancedHash_row15 end ] stop
 */





















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_4_AGGIN"
							globalMap.remove("tAggregateRow_4");
						
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";

	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tXMLMap_11_TXMLMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_11";
	
	currentComponent="tXMLMap_11_TXMLMAP_OUT";

	

 



/**
 * [tXMLMap_11_TXMLMAP_OUT finally ] stop
 */

	
	/**
	 * [tXMLMap_11_TXMLMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tXMLMap_11";
	
	currentComponent="tXMLMap_11_TXMLMAP_IN";

	

 



/**
 * [tXMLMap_11_TXMLMAP_IN finally ] stop
 */

	
	/**
	 * [tFilterRow_2 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 finally ] stop
 */

	
	/**
	 * [tFilterRow_3 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 finally ] stop
 */

	
	/**
	 * [tAggregateRow_4_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";

	

 



/**
 * [tAggregateRow_4_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_4_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";

	

 



/**
 * [tAggregateRow_4_AGGIN finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";

	

 



/**
 * [tAdvancedHash_row15 finally ] stop
 */





















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String dataset_id;

				public String getDataset_id () {
					return this.dataset_id;
				}
				
			    public String datestamp;

				public String getDatestamp () {
					return this.datestamp;
				}
				
			    public String crs;

				public String getCrs () {
					return this.crs;
				}
				
			    public String title;

				public String getTitle () {
					return this.title;
				}
				
			    public String edition;

				public String getEdition () {
					return this.edition;
				}
				
			    public String abstracts;

				public String getAbstracts () {
					return this.abstracts;
				}
				
			    public String custodian;

				public String getCustodian () {
					return this.custodian;
				}
				
			    public String inspire_themes;

				public String getInspire_themes () {
					return this.inspire_themes;
				}
				
			    public String gemet_concepts;

				public String getGemet_concepts () {
					return this.gemet_concepts;
				}
				
			    public Float wlon;

				public Float getWlon () {
					return this.wlon;
				}
				
			    public Float elon;

				public Float getElon () {
					return this.elon;
				}
				
			    public Float slat;

				public Float getSlat () {
					return this.slat;
				}
				
			    public Float nlat;

				public Float getNlat () {
					return this.nlat;
				}
				
			    public String stype;

				public String getStype () {
					return this.stype;
				}
				
			    public String scaleres;

				public String getScaleres () {
					return this.scaleres;
				}
				
			    public String tbegin;

				public String getTbegin () {
					return this.tbegin;
				}
				
			    public String tend;

				public String getTend () {
					return this.tend;
				}
				
			    public String protocols;

				public String getProtocols () {
					return this.protocols;
				}
				
			    public String links;

				public String getLinks () {
					return this.links;
				}
				
			    public String lineage;

				public String getLineage () {
					return this.lineage;
				}
				
			    public String data_src;

				public String getData_src () {
					return this.data_src;
				}
				
			    public String published;

				public String getPublished () {
					return this.published;
				}
				
			    public String sdiurl;

				public String getSdiurl () {
					return this.sdiurl;
				}
				
			    public String distributionFormat;

				public String getDistributionFormat () {
					return this.distributionFormat;
				}
				
			    public String place;

				public String getPlace () {
					return this.place;
				}
				
			    public String useLimitation;

				public String getUseLimitation () {
					return this.useLimitation;
				}
				
			    public String browseGraphic;

				public String getBrowseGraphic () {
					return this.browseGraphic;
				}
				
			    public String shortName;

				public String getShortName () {
					return this.shortName;
				}
				
			    public String referenceFlag;

				public String getReferenceFlag () {
					return this.referenceFlag;
				}
				
			    public String wms;

				public String getWms () {
					return this.wms;
				}
				
			    public String idpTopics;

				public String getIdpTopics () {
					return this.idpTopics;
				}
				
			    public String restApi;

				public String getRestApi () {
					return this.restApi;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.dataset_id = readString(dis);
					
					this.datestamp = readString(dis);
					
					this.crs = readString(dis);
					
					this.title = readString(dis);
					
					this.edition = readString(dis);
					
					this.abstracts = readString(dis);
					
					this.custodian = readString(dis);
					
					this.inspire_themes = readString(dis);
					
					this.gemet_concepts = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.wlon = null;
           				} else {
           			    	this.wlon = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.elon = null;
           				} else {
           			    	this.elon = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.slat = null;
           				} else {
           			    	this.slat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nlat = null;
           				} else {
           			    	this.nlat = dis.readFloat();
           				}
					
					this.stype = readString(dis);
					
					this.scaleres = readString(dis);
					
					this.tbegin = readString(dis);
					
					this.tend = readString(dis);
					
					this.protocols = readString(dis);
					
					this.links = readString(dis);
					
					this.lineage = readString(dis);
					
					this.data_src = readString(dis);
					
					this.published = readString(dis);
					
					this.sdiurl = readString(dis);
					
					this.distributionFormat = readString(dis);
					
					this.place = readString(dis);
					
					this.useLimitation = readString(dis);
					
					this.browseGraphic = readString(dis);
					
					this.shortName = readString(dis);
					
					this.referenceFlag = readString(dis);
					
					this.wms = readString(dis);
					
					this.idpTopics = readString(dis);
					
					this.restApi = readString(dis);
					
					this.status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.dataset_id,dos);
					
					// String
				
						writeString(this.datestamp,dos);
					
					// String
				
						writeString(this.crs,dos);
					
					// String
				
						writeString(this.title,dos);
					
					// String
				
						writeString(this.edition,dos);
					
					// String
				
						writeString(this.abstracts,dos);
					
					// String
				
						writeString(this.custodian,dos);
					
					// String
				
						writeString(this.inspire_themes,dos);
					
					// String
				
						writeString(this.gemet_concepts,dos);
					
					// Float
				
						if(this.wlon == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.wlon);
		            	}
					
					// Float
				
						if(this.elon == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.elon);
		            	}
					
					// Float
				
						if(this.slat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.slat);
		            	}
					
					// Float
				
						if(this.nlat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.nlat);
		            	}
					
					// String
				
						writeString(this.stype,dos);
					
					// String
				
						writeString(this.scaleres,dos);
					
					// String
				
						writeString(this.tbegin,dos);
					
					// String
				
						writeString(this.tend,dos);
					
					// String
				
						writeString(this.protocols,dos);
					
					// String
				
						writeString(this.links,dos);
					
					// String
				
						writeString(this.lineage,dos);
					
					// String
				
						writeString(this.data_src,dos);
					
					// String
				
						writeString(this.published,dos);
					
					// String
				
						writeString(this.sdiurl,dos);
					
					// String
				
						writeString(this.distributionFormat,dos);
					
					// String
				
						writeString(this.place,dos);
					
					// String
				
						writeString(this.useLimitation,dos);
					
					// String
				
						writeString(this.browseGraphic,dos);
					
					// String
				
						writeString(this.shortName,dos);
					
					// String
				
						writeString(this.referenceFlag,dos);
					
					// String
				
						writeString(this.wms,dos);
					
					// String
				
						writeString(this.idpTopics,dos);
					
					// String
				
						writeString(this.restApi,dos);
					
					// String
				
						writeString(this.status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",dataset_id="+dataset_id);
		sb.append(",datestamp="+datestamp);
		sb.append(",crs="+crs);
		sb.append(",title="+title);
		sb.append(",edition="+edition);
		sb.append(",abstracts="+abstracts);
		sb.append(",custodian="+custodian);
		sb.append(",inspire_themes="+inspire_themes);
		sb.append(",gemet_concepts="+gemet_concepts);
		sb.append(",wlon="+String.valueOf(wlon));
		sb.append(",elon="+String.valueOf(elon));
		sb.append(",slat="+String.valueOf(slat));
		sb.append(",nlat="+String.valueOf(nlat));
		sb.append(",stype="+stype);
		sb.append(",scaleres="+scaleres);
		sb.append(",tbegin="+tbegin);
		sb.append(",tend="+tend);
		sb.append(",protocols="+protocols);
		sb.append(",links="+links);
		sb.append(",lineage="+lineage);
		sb.append(",data_src="+data_src);
		sb.append(",published="+published);
		sb.append(",sdiurl="+sdiurl);
		sb.append(",distributionFormat="+distributionFormat);
		sb.append(",place="+place);
		sb.append(",useLimitation="+useLimitation);
		sb.append(",browseGraphic="+browseGraphic);
		sb.append(",shortName="+shortName);
		sb.append(",referenceFlag="+referenceFlag);
		sb.append(",wms="+wms);
		sb.append(",idpTopics="+idpTopics);
		sb.append(",restApi="+restApi);
		sb.append(",status="+status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String dataset_id;

				public String getDataset_id () {
					return this.dataset_id;
				}
				
			    public String datestamp;

				public String getDatestamp () {
					return this.datestamp;
				}
				
			    public String crs;

				public String getCrs () {
					return this.crs;
				}
				
			    public String title;

				public String getTitle () {
					return this.title;
				}
				
			    public String edition;

				public String getEdition () {
					return this.edition;
				}
				
			    public String abstracts;

				public String getAbstracts () {
					return this.abstracts;
				}
				
			    public String custodian;

				public String getCustodian () {
					return this.custodian;
				}
				
			    public String inspire_themes;

				public String getInspire_themes () {
					return this.inspire_themes;
				}
				
			    public String gemet_concepts;

				public String getGemet_concepts () {
					return this.gemet_concepts;
				}
				
			    public Float wlon;

				public Float getWlon () {
					return this.wlon;
				}
				
			    public Float elon;

				public Float getElon () {
					return this.elon;
				}
				
			    public Float slat;

				public Float getSlat () {
					return this.slat;
				}
				
			    public Float nlat;

				public Float getNlat () {
					return this.nlat;
				}
				
			    public String stype;

				public String getStype () {
					return this.stype;
				}
				
			    public String scaleres;

				public String getScaleres () {
					return this.scaleres;
				}
				
			    public String tbegin;

				public String getTbegin () {
					return this.tbegin;
				}
				
			    public String tend;

				public String getTend () {
					return this.tend;
				}
				
			    public String protocols;

				public String getProtocols () {
					return this.protocols;
				}
				
			    public String links;

				public String getLinks () {
					return this.links;
				}
				
			    public String lineage;

				public String getLineage () {
					return this.lineage;
				}
				
			    public String data_src;

				public String getData_src () {
					return this.data_src;
				}
				
			    public String published;

				public String getPublished () {
					return this.published;
				}
				
			    public String sdiurl;

				public String getSdiurl () {
					return this.sdiurl;
				}
				
			    public String distributionFormat;

				public String getDistributionFormat () {
					return this.distributionFormat;
				}
				
			    public String place;

				public String getPlace () {
					return this.place;
				}
				
			    public String useLimitation;

				public String getUseLimitation () {
					return this.useLimitation;
				}
				
			    public String browseGraphic;

				public String getBrowseGraphic () {
					return this.browseGraphic;
				}
				
			    public String shortName;

				public String getShortName () {
					return this.shortName;
				}
				
			    public String referenceFlag;

				public String getReferenceFlag () {
					return this.referenceFlag;
				}
				
			    public String wms;

				public String getWms () {
					return this.wms;
				}
				
			    public String idpTopics;

				public String getIdpTopics () {
					return this.idpTopics;
				}
				
			    public String restApi;

				public String getRestApi () {
					return this.restApi;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.dataset_id = readString(dis);
					
					this.datestamp = readString(dis);
					
					this.crs = readString(dis);
					
					this.title = readString(dis);
					
					this.edition = readString(dis);
					
					this.abstracts = readString(dis);
					
					this.custodian = readString(dis);
					
					this.inspire_themes = readString(dis);
					
					this.gemet_concepts = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.wlon = null;
           				} else {
           			    	this.wlon = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.elon = null;
           				} else {
           			    	this.elon = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.slat = null;
           				} else {
           			    	this.slat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nlat = null;
           				} else {
           			    	this.nlat = dis.readFloat();
           				}
					
					this.stype = readString(dis);
					
					this.scaleres = readString(dis);
					
					this.tbegin = readString(dis);
					
					this.tend = readString(dis);
					
					this.protocols = readString(dis);
					
					this.links = readString(dis);
					
					this.lineage = readString(dis);
					
					this.data_src = readString(dis);
					
					this.published = readString(dis);
					
					this.sdiurl = readString(dis);
					
					this.distributionFormat = readString(dis);
					
					this.place = readString(dis);
					
					this.useLimitation = readString(dis);
					
					this.browseGraphic = readString(dis);
					
					this.shortName = readString(dis);
					
					this.referenceFlag = readString(dis);
					
					this.wms = readString(dis);
					
					this.idpTopics = readString(dis);
					
					this.restApi = readString(dis);
					
					this.status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.dataset_id,dos);
					
					// String
				
						writeString(this.datestamp,dos);
					
					// String
				
						writeString(this.crs,dos);
					
					// String
				
						writeString(this.title,dos);
					
					// String
				
						writeString(this.edition,dos);
					
					// String
				
						writeString(this.abstracts,dos);
					
					// String
				
						writeString(this.custodian,dos);
					
					// String
				
						writeString(this.inspire_themes,dos);
					
					// String
				
						writeString(this.gemet_concepts,dos);
					
					// Float
				
						if(this.wlon == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.wlon);
		            	}
					
					// Float
				
						if(this.elon == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.elon);
		            	}
					
					// Float
				
						if(this.slat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.slat);
		            	}
					
					// Float
				
						if(this.nlat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.nlat);
		            	}
					
					// String
				
						writeString(this.stype,dos);
					
					// String
				
						writeString(this.scaleres,dos);
					
					// String
				
						writeString(this.tbegin,dos);
					
					// String
				
						writeString(this.tend,dos);
					
					// String
				
						writeString(this.protocols,dos);
					
					// String
				
						writeString(this.links,dos);
					
					// String
				
						writeString(this.lineage,dos);
					
					// String
				
						writeString(this.data_src,dos);
					
					// String
				
						writeString(this.published,dos);
					
					// String
				
						writeString(this.sdiurl,dos);
					
					// String
				
						writeString(this.distributionFormat,dos);
					
					// String
				
						writeString(this.place,dos);
					
					// String
				
						writeString(this.useLimitation,dos);
					
					// String
				
						writeString(this.browseGraphic,dos);
					
					// String
				
						writeString(this.shortName,dos);
					
					// String
				
						writeString(this.referenceFlag,dos);
					
					// String
				
						writeString(this.wms,dos);
					
					// String
				
						writeString(this.idpTopics,dos);
					
					// String
				
						writeString(this.restApi,dos);
					
					// String
				
						writeString(this.status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",dataset_id="+dataset_id);
		sb.append(",datestamp="+datestamp);
		sb.append(",crs="+crs);
		sb.append(",title="+title);
		sb.append(",edition="+edition);
		sb.append(",abstracts="+abstracts);
		sb.append(",custodian="+custodian);
		sb.append(",inspire_themes="+inspire_themes);
		sb.append(",gemet_concepts="+gemet_concepts);
		sb.append(",wlon="+String.valueOf(wlon));
		sb.append(",elon="+String.valueOf(elon));
		sb.append(",slat="+String.valueOf(slat));
		sb.append(",nlat="+String.valueOf(nlat));
		sb.append(",stype="+stype);
		sb.append(",scaleres="+scaleres);
		sb.append(",tbegin="+tbegin);
		sb.append(",tend="+tend);
		sb.append(",protocols="+protocols);
		sb.append(",links="+links);
		sb.append(",lineage="+lineage);
		sb.append(",data_src="+data_src);
		sb.append(",published="+published);
		sb.append(",sdiurl="+sdiurl);
		sb.append(",distributionFormat="+distributionFormat);
		sb.append(",place="+place);
		sb.append(",useLimitation="+useLimitation);
		sb.append(",browseGraphic="+browseGraphic);
		sb.append(",shortName="+shortName);
		sb.append(",referenceFlag="+referenceFlag);
		sb.append(",wms="+wms);
		sb.append(",idpTopics="+idpTopics);
		sb.append(",restApi="+restApi);
		sb.append(",status="+status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String dataset_id;

				public String getDataset_id () {
					return this.dataset_id;
				}
				
			    public String datestamp;

				public String getDatestamp () {
					return this.datestamp;
				}
				
			    public String crs;

				public String getCrs () {
					return this.crs;
				}
				
			    public String title;

				public String getTitle () {
					return this.title;
				}
				
			    public String edition;

				public String getEdition () {
					return this.edition;
				}
				
			    public String abstracts;

				public String getAbstracts () {
					return this.abstracts;
				}
				
			    public String custodian;

				public String getCustodian () {
					return this.custodian;
				}
				
			    public String inspire_themes;

				public String getInspire_themes () {
					return this.inspire_themes;
				}
				
			    public String gemet_concepts;

				public String getGemet_concepts () {
					return this.gemet_concepts;
				}
				
			    public Float wlon;

				public Float getWlon () {
					return this.wlon;
				}
				
			    public Float elon;

				public Float getElon () {
					return this.elon;
				}
				
			    public Float slat;

				public Float getSlat () {
					return this.slat;
				}
				
			    public Float nlat;

				public Float getNlat () {
					return this.nlat;
				}
				
			    public String stype;

				public String getStype () {
					return this.stype;
				}
				
			    public String scaleres;

				public String getScaleres () {
					return this.scaleres;
				}
				
			    public String tbegin;

				public String getTbegin () {
					return this.tbegin;
				}
				
			    public String tend;

				public String getTend () {
					return this.tend;
				}
				
			    public String protocols;

				public String getProtocols () {
					return this.protocols;
				}
				
			    public String links;

				public String getLinks () {
					return this.links;
				}
				
			    public String lineage;

				public String getLineage () {
					return this.lineage;
				}
				
			    public String data_src;

				public String getData_src () {
					return this.data_src;
				}
				
			    public String published;

				public String getPublished () {
					return this.published;
				}
				
			    public String sdiurl;

				public String getSdiurl () {
					return this.sdiurl;
				}
				
			    public String distributionFormat;

				public String getDistributionFormat () {
					return this.distributionFormat;
				}
				
			    public String place;

				public String getPlace () {
					return this.place;
				}
				
			    public String useLimitation;

				public String getUseLimitation () {
					return this.useLimitation;
				}
				
			    public String browseGraphic;

				public String getBrowseGraphic () {
					return this.browseGraphic;
				}
				
			    public String shortName;

				public String getShortName () {
					return this.shortName;
				}
				
			    public String referenceFlag;

				public String getReferenceFlag () {
					return this.referenceFlag;
				}
				
			    public String wms;

				public String getWms () {
					return this.wms;
				}
				
			    public String idpTopics;

				public String getIdpTopics () {
					return this.idpTopics;
				}
				
			    public String restApi;

				public String getRestApi () {
					return this.restApi;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor.length == 0) {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.dataset_id = readString(dis);
					
					this.datestamp = readString(dis);
					
					this.crs = readString(dis);
					
					this.title = readString(dis);
					
					this.edition = readString(dis);
					
					this.abstracts = readString(dis);
					
					this.custodian = readString(dis);
					
					this.inspire_themes = readString(dis);
					
					this.gemet_concepts = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.wlon = null;
           				} else {
           			    	this.wlon = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.elon = null;
           				} else {
           			    	this.elon = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.slat = null;
           				} else {
           			    	this.slat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.nlat = null;
           				} else {
           			    	this.nlat = dis.readFloat();
           				}
					
					this.stype = readString(dis);
					
					this.scaleres = readString(dis);
					
					this.tbegin = readString(dis);
					
					this.tend = readString(dis);
					
					this.protocols = readString(dis);
					
					this.links = readString(dis);
					
					this.lineage = readString(dis);
					
					this.data_src = readString(dis);
					
					this.published = readString(dis);
					
					this.sdiurl = readString(dis);
					
					this.distributionFormat = readString(dis);
					
					this.place = readString(dis);
					
					this.useLimitation = readString(dis);
					
					this.browseGraphic = readString(dis);
					
					this.shortName = readString(dis);
					
					this.referenceFlag = readString(dis);
					
					this.wms = readString(dis);
					
					this.idpTopics = readString(dis);
					
					this.restApi = readString(dis);
					
					this.status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.dataset_id,dos);
					
					// String
				
						writeString(this.datestamp,dos);
					
					// String
				
						writeString(this.crs,dos);
					
					// String
				
						writeString(this.title,dos);
					
					// String
				
						writeString(this.edition,dos);
					
					// String
				
						writeString(this.abstracts,dos);
					
					// String
				
						writeString(this.custodian,dos);
					
					// String
				
						writeString(this.inspire_themes,dos);
					
					// String
				
						writeString(this.gemet_concepts,dos);
					
					// Float
				
						if(this.wlon == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.wlon);
		            	}
					
					// Float
				
						if(this.elon == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.elon);
		            	}
					
					// Float
				
						if(this.slat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.slat);
		            	}
					
					// Float
				
						if(this.nlat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.nlat);
		            	}
					
					// String
				
						writeString(this.stype,dos);
					
					// String
				
						writeString(this.scaleres,dos);
					
					// String
				
						writeString(this.tbegin,dos);
					
					// String
				
						writeString(this.tend,dos);
					
					// String
				
						writeString(this.protocols,dos);
					
					// String
				
						writeString(this.links,dos);
					
					// String
				
						writeString(this.lineage,dos);
					
					// String
				
						writeString(this.data_src,dos);
					
					// String
				
						writeString(this.published,dos);
					
					// String
				
						writeString(this.sdiurl,dos);
					
					// String
				
						writeString(this.distributionFormat,dos);
					
					// String
				
						writeString(this.place,dos);
					
					// String
				
						writeString(this.useLimitation,dos);
					
					// String
				
						writeString(this.browseGraphic,dos);
					
					// String
				
						writeString(this.shortName,dos);
					
					// String
				
						writeString(this.referenceFlag,dos);
					
					// String
				
						writeString(this.wms,dos);
					
					// String
				
						writeString(this.idpTopics,dos);
					
					// String
				
						writeString(this.restApi,dos);
					
					// String
				
						writeString(this.status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",dataset_id="+dataset_id);
		sb.append(",datestamp="+datestamp);
		sb.append(",crs="+crs);
		sb.append(",title="+title);
		sb.append(",edition="+edition);
		sb.append(",abstracts="+abstracts);
		sb.append(",custodian="+custodian);
		sb.append(",inspire_themes="+inspire_themes);
		sb.append(",gemet_concepts="+gemet_concepts);
		sb.append(",wlon="+String.valueOf(wlon));
		sb.append(",elon="+String.valueOf(elon));
		sb.append(",slat="+String.valueOf(slat));
		sb.append(",nlat="+String.valueOf(nlat));
		sb.append(",stype="+stype);
		sb.append(",scaleres="+scaleres);
		sb.append(",tbegin="+tbegin);
		sb.append(",tend="+tend);
		sb.append(",protocols="+protocols);
		sb.append(",links="+links);
		sb.append(",lineage="+lineage);
		sb.append(",data_src="+data_src);
		sb.append(",published="+published);
		sb.append(",sdiurl="+sdiurl);
		sb.append(",distributionFormat="+distributionFormat);
		sb.append(",place="+place);
		sb.append(",useLimitation="+useLimitation);
		sb.append(",browseGraphic="+browseGraphic);
		sb.append(",shortName="+shortName);
		sb.append(",referenceFlag="+referenceFlag);
		sb.append(",wms="+wms);
		sb.append(",idpTopics="+idpTopics);
		sb.append(",restApi="+restApi);
		sb.append(",status="+status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
row4Struct row4 = new row4Struct();




	
	/**
	 * [tAggregateRow_1_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGOUT", false);
		start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAggregateRow_1_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap(); 

// ------------
	class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String uuid;
    				String dataset_id;
    				String datestamp;
    				String crs;
    				String title;
    				String edition;
    				String abstracts;
    				String custodian;
    				String inspire_themes;
    				String gemet_concepts;
    				Float wlon;
    				Float elon;
    				Float slat;
    				Float nlat;
    				String stype;
    				String scaleres;
    				String tbegin;
    				String tend;
    				String protocols;
    				String links;
    				String lineage;
    				String data_src;
    				String published;
    				String sdiurl;
    				String distributionFormat;
    				String place;
    				String useLimitation;
    				String browseGraphic;
    				String shortName;
    				String referenceFlag;
    				String wms;
    				String idpTopics;
    				String restApi;
    				String status;
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
							
							result = prime * result + ((this.dataset_id == null) ? 0 : this.dataset_id.hashCode());
							
							result = prime * result + ((this.datestamp == null) ? 0 : this.datestamp.hashCode());
							
							result = prime * result + ((this.crs == null) ? 0 : this.crs.hashCode());
							
							result = prime * result + ((this.title == null) ? 0 : this.title.hashCode());
							
							result = prime * result + ((this.edition == null) ? 0 : this.edition.hashCode());
							
							result = prime * result + ((this.abstracts == null) ? 0 : this.abstracts.hashCode());
							
							result = prime * result + ((this.custodian == null) ? 0 : this.custodian.hashCode());
							
							result = prime * result + ((this.inspire_themes == null) ? 0 : this.inspire_themes.hashCode());
							
							result = prime * result + ((this.gemet_concepts == null) ? 0 : this.gemet_concepts.hashCode());
							
							result = prime * result + ((this.wlon == null) ? 0 : this.wlon.hashCode());
							
							result = prime * result + ((this.elon == null) ? 0 : this.elon.hashCode());
							
							result = prime * result + ((this.slat == null) ? 0 : this.slat.hashCode());
							
							result = prime * result + ((this.nlat == null) ? 0 : this.nlat.hashCode());
							
							result = prime * result + ((this.stype == null) ? 0 : this.stype.hashCode());
							
							result = prime * result + ((this.scaleres == null) ? 0 : this.scaleres.hashCode());
							
							result = prime * result + ((this.tbegin == null) ? 0 : this.tbegin.hashCode());
							
							result = prime * result + ((this.tend == null) ? 0 : this.tend.hashCode());
							
							result = prime * result + ((this.protocols == null) ? 0 : this.protocols.hashCode());
							
							result = prime * result + ((this.links == null) ? 0 : this.links.hashCode());
							
							result = prime * result + ((this.lineage == null) ? 0 : this.lineage.hashCode());
							
							result = prime * result + ((this.data_src == null) ? 0 : this.data_src.hashCode());
							
							result = prime * result + ((this.published == null) ? 0 : this.published.hashCode());
							
							result = prime * result + ((this.sdiurl == null) ? 0 : this.sdiurl.hashCode());
							
							result = prime * result + ((this.distributionFormat == null) ? 0 : this.distributionFormat.hashCode());
							
							result = prime * result + ((this.place == null) ? 0 : this.place.hashCode());
							
							result = prime * result + ((this.useLimitation == null) ? 0 : this.useLimitation.hashCode());
							
							result = prime * result + ((this.browseGraphic == null) ? 0 : this.browseGraphic.hashCode());
							
							result = prime * result + ((this.shortName == null) ? 0 : this.shortName.hashCode());
							
							result = prime * result + ((this.referenceFlag == null) ? 0 : this.referenceFlag.hashCode());
							
							result = prime * result + ((this.wms == null) ? 0 : this.wms.hashCode());
							
							result = prime * result + ((this.idpTopics == null) ? 0 : this.idpTopics.hashCode());
							
							result = prime * result + ((this.restApi == null) ? 0 : this.restApi.hashCode());
							
							result = prime * result + ((this.status == null) ? 0 : this.status.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;
			
							if (this.uuid == null) {
								if (other.uuid != null) 
									return false;
							} else if (!this.uuid.equals(other.uuid)) 
								return false;
						
							if (this.dataset_id == null) {
								if (other.dataset_id != null) 
									return false;
							} else if (!this.dataset_id.equals(other.dataset_id)) 
								return false;
						
							if (this.datestamp == null) {
								if (other.datestamp != null) 
									return false;
							} else if (!this.datestamp.equals(other.datestamp)) 
								return false;
						
							if (this.crs == null) {
								if (other.crs != null) 
									return false;
							} else if (!this.crs.equals(other.crs)) 
								return false;
						
							if (this.title == null) {
								if (other.title != null) 
									return false;
							} else if (!this.title.equals(other.title)) 
								return false;
						
							if (this.edition == null) {
								if (other.edition != null) 
									return false;
							} else if (!this.edition.equals(other.edition)) 
								return false;
						
							if (this.abstracts == null) {
								if (other.abstracts != null) 
									return false;
							} else if (!this.abstracts.equals(other.abstracts)) 
								return false;
						
							if (this.custodian == null) {
								if (other.custodian != null) 
									return false;
							} else if (!this.custodian.equals(other.custodian)) 
								return false;
						
							if (this.inspire_themes == null) {
								if (other.inspire_themes != null) 
									return false;
							} else if (!this.inspire_themes.equals(other.inspire_themes)) 
								return false;
						
							if (this.gemet_concepts == null) {
								if (other.gemet_concepts != null) 
									return false;
							} else if (!this.gemet_concepts.equals(other.gemet_concepts)) 
								return false;
						
							if (this.wlon == null) {
								if (other.wlon != null) 
									return false;
							} else if (!this.wlon.equals(other.wlon)) 
								return false;
						
							if (this.elon == null) {
								if (other.elon != null) 
									return false;
							} else if (!this.elon.equals(other.elon)) 
								return false;
						
							if (this.slat == null) {
								if (other.slat != null) 
									return false;
							} else if (!this.slat.equals(other.slat)) 
								return false;
						
							if (this.nlat == null) {
								if (other.nlat != null) 
									return false;
							} else if (!this.nlat.equals(other.nlat)) 
								return false;
						
							if (this.stype == null) {
								if (other.stype != null) 
									return false;
							} else if (!this.stype.equals(other.stype)) 
								return false;
						
							if (this.scaleres == null) {
								if (other.scaleres != null) 
									return false;
							} else if (!this.scaleres.equals(other.scaleres)) 
								return false;
						
							if (this.tbegin == null) {
								if (other.tbegin != null) 
									return false;
							} else if (!this.tbegin.equals(other.tbegin)) 
								return false;
						
							if (this.tend == null) {
								if (other.tend != null) 
									return false;
							} else if (!this.tend.equals(other.tend)) 
								return false;
						
							if (this.protocols == null) {
								if (other.protocols != null) 
									return false;
							} else if (!this.protocols.equals(other.protocols)) 
								return false;
						
							if (this.links == null) {
								if (other.links != null) 
									return false;
							} else if (!this.links.equals(other.links)) 
								return false;
						
							if (this.lineage == null) {
								if (other.lineage != null) 
									return false;
							} else if (!this.lineage.equals(other.lineage)) 
								return false;
						
							if (this.data_src == null) {
								if (other.data_src != null) 
									return false;
							} else if (!this.data_src.equals(other.data_src)) 
								return false;
						
							if (this.published == null) {
								if (other.published != null) 
									return false;
							} else if (!this.published.equals(other.published)) 
								return false;
						
							if (this.sdiurl == null) {
								if (other.sdiurl != null) 
									return false;
							} else if (!this.sdiurl.equals(other.sdiurl)) 
								return false;
						
							if (this.distributionFormat == null) {
								if (other.distributionFormat != null) 
									return false;
							} else if (!this.distributionFormat.equals(other.distributionFormat)) 
								return false;
						
							if (this.place == null) {
								if (other.place != null) 
									return false;
							} else if (!this.place.equals(other.place)) 
								return false;
						
							if (this.useLimitation == null) {
								if (other.useLimitation != null) 
									return false;
							} else if (!this.useLimitation.equals(other.useLimitation)) 
								return false;
						
							if (this.browseGraphic == null) {
								if (other.browseGraphic != null) 
									return false;
							} else if (!this.browseGraphic.equals(other.browseGraphic)) 
								return false;
						
							if (this.shortName == null) {
								if (other.shortName != null) 
									return false;
							} else if (!this.shortName.equals(other.shortName)) 
								return false;
						
							if (this.referenceFlag == null) {
								if (other.referenceFlag != null) 
									return false;
							} else if (!this.referenceFlag.equals(other.referenceFlag)) 
								return false;
						
							if (this.wms == null) {
								if (other.wms != null) 
									return false;
							} else if (!this.wms.equals(other.wms)) 
								return false;
						
							if (this.idpTopics == null) {
								if (other.idpTopics != null) 
									return false;
							} else if (!this.idpTopics.equals(other.idpTopics)) 
								return false;
						
							if (this.restApi == null) {
								if (other.restApi != null) 
									return false;
							} else if (!this.restApi.equals(other.restApi)) 
								return false;
						
							if (this.status == null) {
								if (other.status != null) 
									return false;
							} else if (!this.status.equals(other.status)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
	AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
	java.util.Map<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1>();
	

 



/**
 * [tAggregateRow_1_AGGOUT begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;	
				
				char fieldSeparator_tFileInputDelimited_1[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1 = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_1[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_1 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */System.getProperty("java.io.tmpdir") + "/sdiDump/tmp/out.csv"/** End field tFileInputDelimited_1:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;
	
				try{
					
						String[] rowtFileInputDelimited_1=null;
						int currentLinetFileInputDelimited_1 = 0;
	        			int outputLinetFileInputDelimited_1 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0;
			if(footer_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
							}else{
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),"UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);
		        			}
					
					
					csvReadertFileInputDelimited_1.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )
	        			csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
	        				csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	            				//?????doesn't work for other escapeChar
	            				//the default escape mode is double escape
	            				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_1 > 0){
						for(totalLinetFileInputDelimited_1=0;totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++){
							csvReadertFileInputDelimited_1.readNext();
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
			            while (csvReadertFileInputDelimited_1.readNext()) {
							
								rowtFileInputDelimited_1=csvReadertFileInputDelimited_1.getValues();
								if(!(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0]))){//empty line when row separator is '\n'
							
	                
	                		totalLinetFileInputDelimited_1++;
	                
							
								}
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1   < 0? 0 : totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1 ;
	            		if(lastLinetFileInputDelimited_1 > 0){
	                		lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1 : lastLineTemptFileInputDelimited_1; 
	            		}else {
	                		lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
	            		}
	         
			          	csvReadertFileInputDelimited_1.close();
				        if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
		        		}else{
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),"UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);
						}
						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )	
	        				csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
							csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	        				//?????doesn't work for other escapeChar
	        				//the default escape mode is double escape
	        				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_1 != 0){
			        	for(currentLinetFileInputDelimited_1=0;currentLinetFileInputDelimited_1 < 1;currentLinetFileInputDelimited_1++){
			        		csvReadertFileInputDelimited_1.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
	        
	    		} catch(java.lang.Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1!=null && csvReadertFileInputDelimited_1.readNext() ) { 
	        		rowstate_tFileInputDelimited_1.reset();
	        
		        	rowtFileInputDelimited_1=csvReadertFileInputDelimited_1.getValues();
	        	
					
	        			if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
	        				continue;
	        			}
					
	        	
	        	
	        		currentLinetFileInputDelimited_1++;
	            
		            if(lastLinetFileInputDelimited_1 > -1 && currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_1++;
	            	if (limittFileInputDelimited_1 > 0 && outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
	                	break;
	            	}  
	                                                                      
					
	    							row3 = null;			
								
								boolean whetherReject_tFileInputDelimited_1 = false;
								row3 = new row3Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)";").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1_ListType = ((String)";").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
					
							row3.uuid = null;
					
							row3.dataset_id = null;
					
							row3.datestamp = null;
					
							row3.crs = null;
					
							row3.title = null;
					
							row3.edition = null;
					
							row3.abstracts = null;
					
							row3.custodian = null;
					
							row3.inspire_themes = null;
					
							row3.gemet_concepts = null;
					
							row3.wlon = null;
					
							row3.elon = null;
					
							row3.slat = null;
					
							row3.nlat = null;
					
							row3.stype = null;
					
							row3.scaleres = null;
					
							row3.tbegin = null;
					
							row3.tend = null;
					
							row3.protocols = null;
					
							row3.links = null;
					
							row3.lineage = null;
					
							row3.data_src = null;
					
							row3.published = null;
					
							row3.sdiurl = null;
					
							row3.distributionFormat = null;
					
							row3.place = null;
					
							row3.useLimitation = null;
					
							row3.browseGraphic = null;
					
							row3.shortName = null;
					
							row3.referenceFlag = null;
					
							row3.wms = null;
					
							row3.idpTopics = null;
					
							row3.restApi = null;
					
							row3.status = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_1 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_1 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row3.uuid = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row3.uuid = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row3.dataset_id = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row3.dataset_id = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row3.datestamp = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row3.datestamp = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row3.crs = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row3.crs = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row3.title = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row3.title = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row3.edition = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row3.edition = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row3.abstracts = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row3.abstracts = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row3.custodian = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row3.custodian = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row3.inspire_themes = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row3.inspire_themes = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row3.gemet_concepts = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row3.gemet_concepts = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row3.wlon = ParserUtils.parseTo_Float(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"wlon", "row3", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row3.wlon = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row3.wlon = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row3.elon = ParserUtils.parseTo_Float(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"elon", "row3", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row3.elon = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row3.elon = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row3.slat = ParserUtils.parseTo_Float(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"slat", "row3", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row3.slat = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row3.slat = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 13;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row3.nlat = ParserUtils.parseTo_Float(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"nlat", "row3", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row3.nlat = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row3.nlat = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 14;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row3.stype = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row3.stype = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 15;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row3.scaleres = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row3.scaleres = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 16;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row3.tbegin = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row3.tbegin = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 17;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row3.tend = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row3.tend = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 18;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row3.protocols = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row3.protocols = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 19;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row3.links = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row3.links = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 20;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row3.lineage = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row3.lineage = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 21;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row3.data_src = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row3.data_src = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 22;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row3.published = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row3.published = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 23;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row3.sdiurl = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row3.sdiurl = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 24;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row3.distributionFormat = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row3.distributionFormat = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 25;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row3.place = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row3.place = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 26;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row3.useLimitation = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row3.useLimitation = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 27;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row3.browseGraphic = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row3.browseGraphic = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 28;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row3.shortName = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row3.shortName = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 29;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row3.referenceFlag = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row3.referenceFlag = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 30;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row3.wms = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row3.wms = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 31;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row3.idpTopics = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row3.idpTopics = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 32;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row3.restApi = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row3.restApi = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 33;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row3.status = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row3.status = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_1.getException()!=null) {
										throw rowstate_tFileInputDelimited_1.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
							        whetherReject_tFileInputDelimited_1 = true;
        							
                							System.err.println(e.getMessage());
                							row3 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tAggregateRow_1_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		
	
operation_finder_tAggregateRow_1.uuid = row3.uuid;
			operation_finder_tAggregateRow_1.dataset_id = row3.dataset_id;
			operation_finder_tAggregateRow_1.datestamp = row3.datestamp;
			operation_finder_tAggregateRow_1.crs = row3.crs;
			operation_finder_tAggregateRow_1.title = row3.title;
			operation_finder_tAggregateRow_1.edition = row3.edition;
			operation_finder_tAggregateRow_1.abstracts = row3.abstracts;
			operation_finder_tAggregateRow_1.custodian = row3.custodian;
			operation_finder_tAggregateRow_1.inspire_themes = row3.inspire_themes;
			operation_finder_tAggregateRow_1.gemet_concepts = row3.gemet_concepts;
			operation_finder_tAggregateRow_1.wlon = row3.wlon;
			operation_finder_tAggregateRow_1.elon = row3.elon;
			operation_finder_tAggregateRow_1.slat = row3.slat;
			operation_finder_tAggregateRow_1.nlat = row3.nlat;
			operation_finder_tAggregateRow_1.stype = row3.stype;
			operation_finder_tAggregateRow_1.scaleres = row3.scaleres;
			operation_finder_tAggregateRow_1.tbegin = row3.tbegin;
			operation_finder_tAggregateRow_1.tend = row3.tend;
			operation_finder_tAggregateRow_1.protocols = row3.protocols;
			operation_finder_tAggregateRow_1.links = row3.links;
			operation_finder_tAggregateRow_1.lineage = row3.lineage;
			operation_finder_tAggregateRow_1.data_src = row3.data_src;
			operation_finder_tAggregateRow_1.published = row3.published;
			operation_finder_tAggregateRow_1.sdiurl = row3.sdiurl;
			operation_finder_tAggregateRow_1.distributionFormat = row3.distributionFormat;
			operation_finder_tAggregateRow_1.place = row3.place;
			operation_finder_tAggregateRow_1.useLimitation = row3.useLimitation;
			operation_finder_tAggregateRow_1.browseGraphic = row3.browseGraphic;
			operation_finder_tAggregateRow_1.shortName = row3.shortName;
			operation_finder_tAggregateRow_1.referenceFlag = row3.referenceFlag;
			operation_finder_tAggregateRow_1.wms = row3.wms;
			operation_finder_tAggregateRow_1.idpTopics = row3.idpTopics;
			operation_finder_tAggregateRow_1.restApi = row3.restApi;
			operation_finder_tAggregateRow_1.status = row3.status;
			

	operation_finder_tAggregateRow_1.hashCodeDirty = true;
	
	operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

	

	if(operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

		operation_result_tAggregateRow_1.uuid = operation_finder_tAggregateRow_1.uuid;
				operation_result_tAggregateRow_1.dataset_id = operation_finder_tAggregateRow_1.dataset_id;
				operation_result_tAggregateRow_1.datestamp = operation_finder_tAggregateRow_1.datestamp;
				operation_result_tAggregateRow_1.crs = operation_finder_tAggregateRow_1.crs;
				operation_result_tAggregateRow_1.title = operation_finder_tAggregateRow_1.title;
				operation_result_tAggregateRow_1.edition = operation_finder_tAggregateRow_1.edition;
				operation_result_tAggregateRow_1.abstracts = operation_finder_tAggregateRow_1.abstracts;
				operation_result_tAggregateRow_1.custodian = operation_finder_tAggregateRow_1.custodian;
				operation_result_tAggregateRow_1.inspire_themes = operation_finder_tAggregateRow_1.inspire_themes;
				operation_result_tAggregateRow_1.gemet_concepts = operation_finder_tAggregateRow_1.gemet_concepts;
				operation_result_tAggregateRow_1.wlon = operation_finder_tAggregateRow_1.wlon;
				operation_result_tAggregateRow_1.elon = operation_finder_tAggregateRow_1.elon;
				operation_result_tAggregateRow_1.slat = operation_finder_tAggregateRow_1.slat;
				operation_result_tAggregateRow_1.nlat = operation_finder_tAggregateRow_1.nlat;
				operation_result_tAggregateRow_1.stype = operation_finder_tAggregateRow_1.stype;
				operation_result_tAggregateRow_1.scaleres = operation_finder_tAggregateRow_1.scaleres;
				operation_result_tAggregateRow_1.tbegin = operation_finder_tAggregateRow_1.tbegin;
				operation_result_tAggregateRow_1.tend = operation_finder_tAggregateRow_1.tend;
				operation_result_tAggregateRow_1.protocols = operation_finder_tAggregateRow_1.protocols;
				operation_result_tAggregateRow_1.links = operation_finder_tAggregateRow_1.links;
				operation_result_tAggregateRow_1.lineage = operation_finder_tAggregateRow_1.lineage;
				operation_result_tAggregateRow_1.data_src = operation_finder_tAggregateRow_1.data_src;
				operation_result_tAggregateRow_1.published = operation_finder_tAggregateRow_1.published;
				operation_result_tAggregateRow_1.sdiurl = operation_finder_tAggregateRow_1.sdiurl;
				operation_result_tAggregateRow_1.distributionFormat = operation_finder_tAggregateRow_1.distributionFormat;
				operation_result_tAggregateRow_1.place = operation_finder_tAggregateRow_1.place;
				operation_result_tAggregateRow_1.useLimitation = operation_finder_tAggregateRow_1.useLimitation;
				operation_result_tAggregateRow_1.browseGraphic = operation_finder_tAggregateRow_1.browseGraphic;
				operation_result_tAggregateRow_1.shortName = operation_finder_tAggregateRow_1.shortName;
				operation_result_tAggregateRow_1.referenceFlag = operation_finder_tAggregateRow_1.referenceFlag;
				operation_result_tAggregateRow_1.wms = operation_finder_tAggregateRow_1.wms;
				operation_result_tAggregateRow_1.idpTopics = operation_finder_tAggregateRow_1.idpTopics;
				operation_result_tAggregateRow_1.restApi = operation_finder_tAggregateRow_1.restApi;
				operation_result_tAggregateRow_1.status = operation_finder_tAggregateRow_1.status;
				
		
		

		hash_tAggregateRow_1.put(operation_result_tAggregateRow_1, operation_result_tAggregateRow_1);
	
	} // G_OutMain_AggR_001


	


 


	tos_count_tAggregateRow_1_AGGOUT++;

/**
 * [tAggregateRow_1_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	


				nb_line_tFileInputDelimited_1++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_1!=null){
    					csvReadertFileInputDelimited_1.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_1!=null){
    				globalMap.put("tFileInputDelimited_1_NB_LINE",nb_line_tFileInputDelimited_1);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAggregateRow_1_AGGOUT", true);
end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGOUT end ] stop
 */


	
	/**
	 * [tFileOutputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_3", false);
		start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_3 = 0;
		

String fileName_tFileOutputDelimited_3 = "";
    fileName_tFileOutputDelimited_3 = (new java.io.File(System.getProperty("java.io.tmpdir") + "/sdiDump/tmp/sdi.tsv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_3 = null;
    String extension_tFileOutputDelimited_3 = null;
    String directory_tFileOutputDelimited_3 = null;
    if((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        }
        directory_tFileOutputDelimited_3 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_3 = true;
    java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
    globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
                String[] headColutFileOutputDelimited_3=new String[34];
            class CSVBasicSet_tFileOutputDelimited_3{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_3[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_3 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_3[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator("\t");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_3[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_3 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_3[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\r\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_3[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_3 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_3[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_3 = 0;
            int splitedFileNo_tFileOutputDelimited_3 =0;
            int currentRow_tFileOutputDelimited_3 = 0;


            CSVBasicSet_tFileOutputDelimited_3 csvSettings_tFileOutputDelimited_3 = new CSVBasicSet_tFileOutputDelimited_3();
            csvSettings_tFileOutputDelimited_3.setFieldSeparator("\t");
            csvSettings_tFileOutputDelimited_3.setRowSeparator("\r\n");
            csvSettings_tFileOutputDelimited_3.setEscapeAndTextEnclosure("\"","\"");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
                        if(!dir_tFileOutputDelimited_3.exists()) {
                            dir_tFileOutputDelimited_3.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_3 = null;

                            java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
                            if(fileToDelete_tFileOutputDelimited_3.exists()) {
                                fileToDelete_tFileOutputDelimited_3.delete();
                            }
                            CsvWritertFileOutputDelimited_3 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, false), "UTF-8")));
                            CsvWritertFileOutputDelimited_3.setSeparator(csvSettings_tFileOutputDelimited_3.getFieldDelim());
                    if(!csvSettings_tFileOutputDelimited_3.isUseCRLFRecordDelimiter() && csvSettings_tFileOutputDelimited_3.getRowDelim()!='\r' && csvSettings_tFileOutputDelimited_3.getRowDelim()!='\n') {
                        CsvWritertFileOutputDelimited_3.setLineEnd(""+csvSettings_tFileOutputDelimited_3.getRowDelim());
                    }
                        if(filetFileOutputDelimited_3.length()==0){
                                    headColutFileOutputDelimited_3[0]="uuid";
                                    headColutFileOutputDelimited_3[1]="dataset_id";
                                    headColutFileOutputDelimited_3[2]="datestamp";
                                    headColutFileOutputDelimited_3[3]="crs";
                                    headColutFileOutputDelimited_3[4]="title";
                                    headColutFileOutputDelimited_3[5]="edition";
                                    headColutFileOutputDelimited_3[6]="abstracts";
                                    headColutFileOutputDelimited_3[7]="custodian";
                                    headColutFileOutputDelimited_3[8]="inspire_themes";
                                    headColutFileOutputDelimited_3[9]="gemet_concepts";
                                    headColutFileOutputDelimited_3[10]="wlon";
                                    headColutFileOutputDelimited_3[11]="elon";
                                    headColutFileOutputDelimited_3[12]="slat";
                                    headColutFileOutputDelimited_3[13]="nlat";
                                    headColutFileOutputDelimited_3[14]="stype";
                                    headColutFileOutputDelimited_3[15]="scaleres";
                                    headColutFileOutputDelimited_3[16]="tbegin";
                                    headColutFileOutputDelimited_3[17]="tend";
                                    headColutFileOutputDelimited_3[18]="protocols";
                                    headColutFileOutputDelimited_3[19]="links";
                                    headColutFileOutputDelimited_3[20]="lineage";
                                    headColutFileOutputDelimited_3[21]="data_src";
                                    headColutFileOutputDelimited_3[22]="published";
                                    headColutFileOutputDelimited_3[23]="sdiurl";
                                    headColutFileOutputDelimited_3[24]="distributionFormat";
                                    headColutFileOutputDelimited_3[25]="place";
                                    headColutFileOutputDelimited_3[26]="useLimitation";
                                    headColutFileOutputDelimited_3[27]="browseGraphic";
                                    headColutFileOutputDelimited_3[28]="shortName";
                                    headColutFileOutputDelimited_3[29]="referenceFlag";
                                    headColutFileOutputDelimited_3[30]="wms";
                                    headColutFileOutputDelimited_3[31]="idpTopics";
                                    headColutFileOutputDelimited_3[32]="restApi";
                                    headColutFileOutputDelimited_3[33]="status";
                            CsvWritertFileOutputDelimited_3.writeNext(headColutFileOutputDelimited_3);
                            CsvWritertFileOutputDelimited_3.flush();
                        }
                CsvWritertFileOutputDelimited_3.setEscapeChar(csvSettings_tFileOutputDelimited_3.getEscapeChar());
                CsvWritertFileOutputDelimited_3.setQuoteChar(csvSettings_tFileOutputDelimited_3.getTextEnclosure());
                CsvWritertFileOutputDelimited_3.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_3", CsvWritertFileOutputDelimited_3);
resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

 



/**
 * [tFileOutputDelimited_3 begin ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGIN", false);
		start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	
		int tos_count_tAggregateRow_1_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1.values();

globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

for(AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600



 



/**
 * [tAggregateRow_1_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

            				    row4.uuid = aggregated_row_tAggregateRow_1.uuid;
            				    
            				    row4.dataset_id = aggregated_row_tAggregateRow_1.dataset_id;
            				    
            				    row4.datestamp = aggregated_row_tAggregateRow_1.datestamp;
            				    
            				    row4.crs = aggregated_row_tAggregateRow_1.crs;
            				    
            				    row4.title = aggregated_row_tAggregateRow_1.title;
            				    
            				    row4.edition = aggregated_row_tAggregateRow_1.edition;
            				    
            				    row4.abstracts = aggregated_row_tAggregateRow_1.abstracts;
            				    
            				    row4.custodian = aggregated_row_tAggregateRow_1.custodian;
            				    
            				    row4.inspire_themes = aggregated_row_tAggregateRow_1.inspire_themes;
            				    
            				    row4.gemet_concepts = aggregated_row_tAggregateRow_1.gemet_concepts;
            				    
            				    row4.wlon = aggregated_row_tAggregateRow_1.wlon;
            				    
            				    row4.elon = aggregated_row_tAggregateRow_1.elon;
            				    
            				    row4.slat = aggregated_row_tAggregateRow_1.slat;
            				    
            				    row4.nlat = aggregated_row_tAggregateRow_1.nlat;
            				    
            				    row4.stype = aggregated_row_tAggregateRow_1.stype;
            				    
            				    row4.scaleres = aggregated_row_tAggregateRow_1.scaleres;
            				    
            				    row4.tbegin = aggregated_row_tAggregateRow_1.tbegin;
            				    
            				    row4.tend = aggregated_row_tAggregateRow_1.tend;
            				    
            				    row4.protocols = aggregated_row_tAggregateRow_1.protocols;
            				    
            				    row4.links = aggregated_row_tAggregateRow_1.links;
            				    
            				    row4.lineage = aggregated_row_tAggregateRow_1.lineage;
            				    
            				    row4.data_src = aggregated_row_tAggregateRow_1.data_src;
            				    
            				    row4.published = aggregated_row_tAggregateRow_1.published;
            				    
            				    row4.sdiurl = aggregated_row_tAggregateRow_1.sdiurl;
            				    
            				    row4.distributionFormat = aggregated_row_tAggregateRow_1.distributionFormat;
            				    
            				    row4.place = aggregated_row_tAggregateRow_1.place;
            				    
            				    row4.useLimitation = aggregated_row_tAggregateRow_1.useLimitation;
            				    
            				    row4.browseGraphic = aggregated_row_tAggregateRow_1.browseGraphic;
            				    
            				    row4.shortName = aggregated_row_tAggregateRow_1.shortName;
            				    
            				    row4.referenceFlag = aggregated_row_tAggregateRow_1.referenceFlag;
            				    
            				    row4.wms = aggregated_row_tAggregateRow_1.wms;
            				    
            				    row4.idpTopics = aggregated_row_tAggregateRow_1.idpTopics;
            				    
            				    row4.restApi = aggregated_row_tAggregateRow_1.restApi;
            				    
            				    row4.status = aggregated_row_tAggregateRow_1.status;
            				    

 


	tos_count_tAggregateRow_1_AGGIN++;

/**
 * [tAggregateRow_1_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		


                        String[] rowtFileOutputDelimited_3=new String[34];
                            rowtFileOutputDelimited_3[0]=row4.uuid == null ? null : row4.uuid;
                            rowtFileOutputDelimited_3[1]=row4.dataset_id == null ? null : row4.dataset_id;
                            rowtFileOutputDelimited_3[2]=row4.datestamp == null ? null : row4.datestamp;
                            rowtFileOutputDelimited_3[3]=row4.crs == null ? null : row4.crs;
                            rowtFileOutputDelimited_3[4]=row4.title == null ? null : row4.title;
                            rowtFileOutputDelimited_3[5]=row4.edition == null ? null : row4.edition;
                            rowtFileOutputDelimited_3[6]=row4.abstracts == null ? null : row4.abstracts;
                            rowtFileOutputDelimited_3[7]=row4.custodian == null ? null : row4.custodian;
                            rowtFileOutputDelimited_3[8]=row4.inspire_themes == null ? null : row4.inspire_themes;
                            rowtFileOutputDelimited_3[9]=row4.gemet_concepts == null ? null : row4.gemet_concepts;
                            rowtFileOutputDelimited_3[10]=row4.wlon == null ? null : String.valueOf(row4.wlon);
                            rowtFileOutputDelimited_3[11]=row4.elon == null ? null : String.valueOf(row4.elon);
                            rowtFileOutputDelimited_3[12]=row4.slat == null ? null : String.valueOf(row4.slat);
                            rowtFileOutputDelimited_3[13]=row4.nlat == null ? null : String.valueOf(row4.nlat);
                            rowtFileOutputDelimited_3[14]=row4.stype == null ? null : row4.stype;
                            rowtFileOutputDelimited_3[15]=row4.scaleres == null ? null : row4.scaleres;
                            rowtFileOutputDelimited_3[16]=row4.tbegin == null ? null : row4.tbegin;
                            rowtFileOutputDelimited_3[17]=row4.tend == null ? null : row4.tend;
                            rowtFileOutputDelimited_3[18]=row4.protocols == null ? null : row4.protocols;
                            rowtFileOutputDelimited_3[19]=row4.links == null ? null : row4.links;
                            rowtFileOutputDelimited_3[20]=row4.lineage == null ? null : row4.lineage;
                            rowtFileOutputDelimited_3[21]=row4.data_src == null ? null : row4.data_src;
                            rowtFileOutputDelimited_3[22]=row4.published == null ? null : row4.published;
                            rowtFileOutputDelimited_3[23]=row4.sdiurl == null ? null : row4.sdiurl;
                            rowtFileOutputDelimited_3[24]=row4.distributionFormat == null ? null : row4.distributionFormat;
                            rowtFileOutputDelimited_3[25]=row4.place == null ? null : row4.place;
                            rowtFileOutputDelimited_3[26]=row4.useLimitation == null ? null : row4.useLimitation;
                            rowtFileOutputDelimited_3[27]=row4.browseGraphic == null ? null : row4.browseGraphic;
                            rowtFileOutputDelimited_3[28]=row4.shortName == null ? null : row4.shortName;
                            rowtFileOutputDelimited_3[29]=row4.referenceFlag == null ? null : row4.referenceFlag;
                            rowtFileOutputDelimited_3[30]=row4.wms == null ? null : row4.wms;
                            rowtFileOutputDelimited_3[31]=row4.idpTopics == null ? null : row4.idpTopics;
                            rowtFileOutputDelimited_3[32]=row4.restApi == null ? null : row4.restApi;
                            rowtFileOutputDelimited_3[33]=row4.status == null ? null : row4.status;
                nb_line_tFileOutputDelimited_3++;
                resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);
                                       CsvWritertFileOutputDelimited_3.writeNext(rowtFileOutputDelimited_3);




 


	tos_count_tFileOutputDelimited_3++;

/**
 * [tFileOutputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	

 



/**
 * [tFileOutputDelimited_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	

 



/**
 * [tFileOutputDelimited_3 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_1_AGGIN", true);
end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGIN end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_3!=null) {
				    	CsvWritertFileOutputDelimited_3.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_3_NB_LINE",nb_line_tFileOutputDelimited_3);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_3", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_3", true);
end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tFileOutputDelimited_3 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_1_AGGIN"
							globalMap.remove("tAggregateRow_1");
						
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	


		if(resourceMap.get("finish_tFileOutputDelimited_3") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_3 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_3");
					
						if(CsvWritertFileOutputDelimited_3!=null) {
					    	CsvWritertFileOutputDelimited_3.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_3 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
		int tos_count_tRunJob_1 = 0;
		


 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        			paraList_tRunJob_1.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_1 = null;

	
	
		local_project.resolveuuid2cmsurl_0_1.resolveuuid2cmsurl childJob_tRunJob_1 = new local_project.resolveuuid2cmsurl_0_1.resolveuuid2cmsurl();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
	  	
				errorCode = childJob_tRunJob_1.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_1.getErrorCode() == null){
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
		    }
		    if (childJob_tRunJob_1.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_1.getException().getClass().getName() + ": " + childJob_tRunJob_1.getException().getMessage());
				}
			
	  	

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tRunJob_2Process(globalMap);



/**
 * [tRunJob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}
	

public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tRunJob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_2", false);
		start_Hash.put("tRunJob_2", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_2";

	
		int tos_count_tRunJob_2 = 0;
		


 



/**
 * [tRunJob_2 begin ] stop
 */
	
	/**
	 * [tRunJob_2 main ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	
	java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
	
	        			paraList_tRunJob_2.add("--father_pid="+pid);
	      			
	        			paraList_tRunJob_2.add("--root_pid="+rootPid);
	      			
	        			paraList_tRunJob_2.add("--father_node=tRunJob_2");
	      			
	        			paraList_tRunJob_2.add("--context=Default");
	      			
	//for feature:10589
	
		paraList_tRunJob_2.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null){
		paraList_tRunJob_2.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
		
			parentContextMap_tRunJob_2.put("username", context.username);
			paraList_tRunJob_2.add("--context_type " + "username" + "=" + "id_String");
		
			parentContextMap_tRunJob_2.put("password", context.password);
			paraList_tRunJob_2.add("--context_type " + "password" + "=" + "id_Password");
		
			parentContextMap_tRunJob_2.put("outputDir", context.outputDir);
			paraList_tRunJob_2.add("--context_type " + "outputDir" + "=" + "id_String");
		 
		java.util.Enumeration<?> propertyNames_tRunJob_2 = context.propertyNames();
		while (propertyNames_tRunJob_2.hasMoreElements()) {
			String key_tRunJob_2 = (String) propertyNames_tRunJob_2.nextElement();
			Object value_tRunJob_2 = (Object) context.get(key_tRunJob_2);
			if(value_tRunJob_2!=null) {  
				paraList_tRunJob_2.add("--context_param " + key_tRunJob_2 + "=" + value_tRunJob_2);
			} else {
				paraList_tRunJob_2.add("--context_param " + key_tRunJob_2 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_2 = null;

	
	
		local_project.merge_0_1.merge childJob_tRunJob_2 = new local_project.merge_0_1.merge();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_2) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
			        .entrySet()) {
	            dataSources_tRunJob_2.put(talendDataSourceEntry_tRunJob_2.getKey(),
	                    talendDataSourceEntry_tRunJob_2.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
	    }
		  
			childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;
		  
		
		String[][] childReturn_tRunJob_2 = childJob_tRunJob_2.runJob((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));
		
	  	
				errorCode = childJob_tRunJob_2.getErrorCode();
		    
	            
	    	if(childJob_tRunJob_2.getErrorCode() == null){
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getStatus() != null && ("failure").equals(childJob_tRunJob_2.getStatus()) ? 1 : 0);
	    	}else{
				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", childJob_tRunJob_2.getErrorCode());
		    }
		    if (childJob_tRunJob_2.getExceptionStackTrace() != null) { 
		    	globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_2.getExceptionStackTrace());
		    }
	  
			 
				if (childJob_tRunJob_2.getErrorCode() != null || ("failure").equals(childJob_tRunJob_2.getStatus())) {
	        		throw new RuntimeException("Child job running failed.\n"+childJob_tRunJob_2.getException().getClass().getName() + ": " + childJob_tRunJob_2.getException().getMessage());
				}
			
	  	

 


	tos_count_tRunJob_2++;

/**
 * [tRunJob_2 main ] stop
 */
	
	/**
	 * [tRunJob_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_2 end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 

ok_Hash.put("tRunJob_2", true);
end_Hash.put("tRunJob_2", System.currentTimeMillis());




/**
 * [tRunJob_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_2 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_2";

	

 



/**
 * [tRunJob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}
	

public void tFileDelete_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileDelete_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_1", false);
		start_Hash.put("tFileDelete_1", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_1";

	
		int tos_count_tFileDelete_1 = 0;
		

 



/**
 * [tFileDelete_1 begin ] stop
 */
	
	/**
	 * [tFileDelete_1 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 

class DeleteFoldertFileDelete_1{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}

	java.io.File filetFileDelete_1 = new java.io.File(System.getProperty("java.io.tmpdir") + "/sdiDump/tmp");

	if(filetFileDelete_1.exists()&& filetFileDelete_1.isDirectory()){
		DeleteFoldertFileDelete_1 dftFileDelete_1 = new DeleteFoldertFileDelete_1();
		if(dftFileDelete_1.delete(filetFileDelete_1)){
			globalMap.put("tFileDelete_1_CURRENT_STATUS", "Path deleted.");
		}else{
			globalMap.put("tFileDelete_1_CURRENT_STATUS", "No path deleted.");
		}
	}else{
		globalMap.put("tFileDelete_1_CURRENT_STATUS", "Path does not exist or is invalid.");
    }
    globalMap.put("tFileDelete_1_DELETE_PATH",System.getProperty("java.io.tmpdir") + "/sdiDump/tmp");
    
     
 

 


	tos_count_tFileDelete_1++;

/**
 * [tFileDelete_1 main ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_1 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 

ok_Hash.put("tFileDelete_1", true);
end_Hash.put("tFileDelete_1", System.currentTimeMillis());




/**
 * [tFileDelete_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileDelete_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tLoop_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_1 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";

	

 



/**
 * [tFileDelete_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}
	

public void tAssertCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tAssertCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tAssertCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tAssertCatcher_1", false);
		start_Hash.put("tAssertCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tAssertCatcher_1";

	
		int tos_count_tAssertCatcher_1 = 0;
		

	for (AssertCatcherUtils.AssertCatcherMessage acm : tAssertCatcher_1.getMessages()) {
 



/**
 * [tAssertCatcher_1 begin ] stop
 */
	
	/**
	 * [tAssertCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tAssertCatcher_1";

	

 


	tos_count_tAssertCatcher_1++;

/**
 * [tAssertCatcher_1 main ] stop
 */
	
	/**
	 * [tAssertCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAssertCatcher_1";

	

 



/**
 * [tAssertCatcher_1 process_data_begin ] stop
 */
	
	/**
	 * [tAssertCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tAssertCatcher_1";

	

 



/**
 * [tAssertCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tAssertCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tAssertCatcher_1";

	
	}
 

ok_Hash.put("tAssertCatcher_1", true);
end_Hash.put("tAssertCatcher_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tFileInputDelimited_1Process(globalMap);



/**
 * [tAssertCatcher_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tAssertCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tAssertCatcher_1";

	

 



/**
 * [tAssertCatcher_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tAssertCatcher_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final sdiMetadataExtractor sdiMetadataExtractorClass = new sdiMetadataExtractor();

        int exitCode = sdiMetadataExtractorClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = sdiMetadataExtractor.class.getClassLoader().getResourceAsStream("local_project/sdimetadataextractor_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = sdiMetadataExtractor.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null && context != null && context.isEmpty()) {
                //defaultProps is in order to keep the original context value
                defaultProps.load(inContext);
                inContext.close();
                context = new ContextProperties(defaultProps);
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("username", "id_String");
				
                context.username=(String) context.getProperty("username");
				    context.setContextType("password", "id_Password");
				
            		String pwd_password_value = context.getProperty("password");
            		context.password = null;
            		if(pwd_password_value!=null) {
            			if(context_param.containsKey("password")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.password = pwd_password_value;
            			} else if (!pwd_password_value.isEmpty()) {
            				try {
            					context.password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_password_value);
            					context.put("password",context.password);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
				    context.setContextType("outputDir", "id_String");
				
                context.outputDir=(String) context.getProperty("outputDir");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("username")) {
                context.username = (String) parentContextMap.get("username");
            }if (parentContextMap.containsKey("password")) {
                context.password = (java.lang.String) parentContextMap.get("password");
            }if (parentContextMap.containsKey("outputDir")) {
                context.outputDir = (String) parentContextMap.get("outputDir");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileDelete_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileDelete_1) {
globalMap.put("tFileDelete_1_SUBPROCESS_STATE", -1);

e_tFileDelete_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : sdiMetadataExtractor");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1153716 characters generated by Talend Open Studio for Big Data 
 *     on the July 25, 2019 9:28:38 PM CEST
 ************************************************************************************************/