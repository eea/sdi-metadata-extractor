// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package backup2.sdimetadataextractor_0_1;

import routines.DataOperation;
import routines.OpenStreetMap;
import routines.TalendDataGenerator;
import routines.Relational;
import routines.GetRandomPhoneNum;
import routines.Mathematical;
import routines.WebScraperUtilities;
import routines.GeometryUtility;
import routines.Numeric;
import routines.GeoOperation;
import routines.Utility;
import routines.GeometryOperation;
import routines.TalendString;
import routines.StringHandling;
import routines.TalendDate;
import routines.DemoRoutines;
import routines.PopulateFromDynamic;
import routines.MD5;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJavaFlex_2
	//import java.util.List;

	//the import part of tJavaFlex_3
	//import java.util.List;

	//the import part of tJavaFlex_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: sdiMetadataExtractor Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.3.1.20161216_1026
 * @status 
 */
public class sdiMetadataExtractor implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(outputDir != null){
				
					this.setProperty("outputDir", outputDir.toString());
				
			}
			
			if(pgDatabase != null){
				
					this.setProperty("pgDatabase", pgDatabase.toString());
				
			}
			
			if(pgHost != null){
				
					this.setProperty("pgHost", pgHost.toString());
				
			}
			
			if(pgPassword != null){
				
					this.setProperty("pgPassword", pgPassword.toString());
				
			}
			
			if(pgPort != null){
				
					this.setProperty("pgPort", pgPort.toString());
				
			}
			
			if(pgSchema != null){
				
					this.setProperty("pgSchema", pgSchema.toString());
				
			}
			
			if(pgUsername != null){
				
					this.setProperty("pgUsername", pgUsername.toString());
				
			}
			
			if(resolveFilename != null){
				
					this.setProperty("resolveFilename", resolveFilename.toString());
				
			}
			
			if(sqliteFilename != null){
				
					this.setProperty("sqliteFilename", sqliteFilename.toString());
				
			}
			
		}

public String outputDir;
public String getOutputDir(){
	return this.outputDir;
}
public String pgDatabase;
public String getPgDatabase(){
	return this.pgDatabase;
}
public String pgHost;
public String getPgHost(){
	return this.pgHost;
}
public java.lang.String pgPassword;
public java.lang.String getPgPassword(){
	return this.pgPassword;
}
public Integer pgPort;
public Integer getPgPort(){
	return this.pgPort;
}
public String pgSchema;
public String getPgSchema(){
	return this.pgSchema;
}
public String pgUsername;
public String getPgUsername(){
	return this.pgUsername;
}
public String resolveFilename;
public String getResolveFilename(){
	return this.resolveFilename;
}
public String sqliteFilename;
public String getSqliteFilename(){
	return this.sqliteFilename;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "sdiMetadataExtractor";
	private final String projectName = "BACKUP2";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			 globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent);
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				sdiMetadataExtractor.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(sdiMetadataExtractor.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tForeach_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tForeach_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_34_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_34_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplicate_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tExtractDelimitedFields_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tForeach_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplicate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tForeach_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tForeach_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tForeach_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaFlex_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tForeach_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tForeach_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tForeach_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tForeach_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaFlex_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tForeach_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tForeach_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tForeach_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tForeach_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaFlex_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tForeach_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tForeach_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tForeach_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_25_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_26_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_28_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_23_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_31_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_32_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_32_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_33_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_33_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_35_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_35_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSQLiteInput_36_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_36_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostgresqlConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostgresqlConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row32_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_25_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row33_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_26_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row34_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row35_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row36_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row37_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_28_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row38_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row39_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_22_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row40_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_23_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row41_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row42_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_31_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row43_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_30_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row44_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_32_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row45_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_33_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row49_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_35_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row53_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSQLiteInput_36_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tIterateToFlow_1_ITFO_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tForeach_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tIterateToFlow_1_AI_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tForeach_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tForeach_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_34_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_16_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_17_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_18_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_19_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_25_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_26_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_20_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_24_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_27_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_28_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_21_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_22_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_23_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_29_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_31_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_30_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_32_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_33_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_35_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tSQLiteInput_36_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostgresqlConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tIterateToFlow_1_AI_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class OnSubjobOkStructtIterateToFlow_1 implements routines.system.IPersistableRow<OnSubjobOkStructtIterateToFlow_1> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];

	
			    public String myStatements;

				public String getMyStatements () {
					return this.myStatements;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.myStatements = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.myStatements,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("myStatements="+myStatements);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnSubjobOkStructtIterateToFlow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tForeach_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tForeach_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tForeach_2 begin ] start
	 */

				
			int NB_ITERATE_tIterateToFlow_1_ITFO = 0; //for statistics
			

	
		
		ok_Hash.put("tForeach_2", false);
		start_Hash.put("tForeach_2", System.currentTimeMillis());
		
	
	currentComponent="tForeach_2";

	
		int tos_count_tForeach_2 = 0;
		
    	class BytesLimit65535_tForeach_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tForeach_2().limitLog4jByte();


Object[] values_tForeach_2 = new Object[]{
    "title|//gmd:citation[*]/gmd:CI_Citation[*]/gmd:title[*]/gco:CharacterString[1]/text()",
    "edition|//gmd:edition[*]/gco:CharacterString[1]/text()",
    "abstract|//gmd:abstract[*]/gco:CharacterString[1]/text()",
    "custodian|//gmd:CI_ResponsibleParty/gmd:role/gmd:CI_RoleCode[@codeListValue=\"custodian\"]/../../gmd:organisationName/gco:CharacterString/text()",
    "wlon|//gmd:westBoundLongitude[1]/gco:Decimal[1]/text()",
    "elon|//gmd:eastBoundLongitude[1]/gco:Decimal[1]/text()|",
    "slat|//gmd:southBoundLatitude[1]/gco:Decimal[1]/text()",
    "nlat|//gmd:northBoundLatitude[1]/gco:Decimal[1]/text()",
    "stype|//gmd:MD_SpatialRepresentationTypeCode/@codeListValue",
    "publication|//gmd:CI_Citation/gmd:date/gmd:CI_Date/gmd:dateType/gmd:CI_DateTypeCode//@codeListValue",
    "status|//gmd:MD_ProgressCode/@codeListValue",
    "tbegin|//gml:beginPosition[1]/text()",
    "protocol|//gmd:protocol/gco:CharacterString/text()",
    "tbegin2|//gml:timePosition[1]/text()",
    "tend|//gml:endPosition[1]/text()",
    "mediatype|//gmd:MD_Format/gmd:name/gco:CharacterString/text()",
    "tend2|//gml:timePosition[1]/text()",
    "lineage|//gmd:statement[*]/gco:CharacterString[1]/text()",
    "data_src|//gmd:LI_Lineage[1]/gmd:source/@uuidref",
    "scalares|//gmd:MD_RepresentativeFraction/gmd:denominator/gco:Integer/text()",
    "scalares2|//gmd:MD_Resolution/gmd:distance/gco:Distance/text()",
    "scalares_unit|//gmd:MD_Resolution/gmd:distance/gco:Distance/@uom",
    "dataset_id|//gmd:identifier[*]/gmd:MD_Identifier[*]/gmd:code[*]/gco:CharacterString[1]/text()",
    "browseGraphic|//gmd:fileName[*]/gco:CharacterString[1]/text()",
    "crs|//gmd:RS_Identifier[*]/gmd:code[*]/gmx:Anchor[1]/text()",
    "keywords|//gmd:MD_Keywords|//gmd:keyword/gco:CharacterString[1]/text()|//gmd:thesaurusName/gmd:CI_Citation/gmd:title/gco:CharacterString[1]/text()",
    "online_resource||//gmd:onLine[*]/gmd:CI_OnlineResource[*]/gmd:protocol[*]/gco:CharacterString[1]/text()|//gmd:onLine[*]/gmd:CI_OnlineResource[*]/gmd:linkage[*]/gmd:URL[1]/text()",
    "useLimitation|//gmd:useLimitation/gco:CharacterString/text()",
    "timestamp|//gmd:dateStamp/gco:DateTime/text()",
};

for(Object tmp_tForeach_2 :values_tForeach_2) {
	
    globalMap.put("tForeach_2_CURRENT_VALUE", tmp_tForeach_2);

 



/**
 * [tForeach_2 begin ] stop
 */
	
	/**
	 * [tForeach_2 main ] start
	 */

	

	
	
	currentComponent="tForeach_2";

	

 


	tos_count_tForeach_2++;

/**
 * [tForeach_2 main ] stop
 */
	NB_ITERATE_tIterateToFlow_1_ITFO++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate2", 1, "exec" + NB_ITERATE_tIterateToFlow_1_ITFO);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tIterateToFlow_1_ITFO begin ] start
	 */

	

	
		
		ok_Hash.put("tIterateToFlow_1_ITFO", false);
		start_Hash.put("tIterateToFlow_1_ITFO", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tIterateToFlow_1";
	
	currentComponent="tIterateToFlow_1_ITFO";

	
		int tos_count_tIterateToFlow_1_ITFO = 0;
		
    	class BytesLimit65535_tIterateToFlow_1_ITFO{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tIterateToFlow_1_ITFO().limitLog4jByte();

OnSubjobOkStructtIterateToFlow_1 struct_tIterateToFlow_1_ITFO = new OnSubjobOkStructtIterateToFlow_1();
struct_tIterateToFlow_1_ITFO.myStatements  = ((String)globalMap.get("tForeach_2_CURRENT_VALUE"));

    if(globalMap.get("tIterateToFlow_1") != null){
    	java.util.List<OnSubjobOkStructtIterateToFlow_1> list_tIterateToFlow_1_ITFO = (java.util.List<OnSubjobOkStructtIterateToFlow_1>)globalMap.get("tIterateToFlow_1"); 
    	list_tIterateToFlow_1_ITFO.add(struct_tIterateToFlow_1_ITFO);
    }else{
    	java.util.List<OnSubjobOkStructtIterateToFlow_1> list_tIterateToFlow_1_ITFO = new java.util.ArrayList<OnSubjobOkStructtIterateToFlow_1>();
    	list_tIterateToFlow_1_ITFO.add(struct_tIterateToFlow_1_ITFO);
    	globalMap.put("tIterateToFlow_1",list_tIterateToFlow_1_ITFO);
    }
 



/**
 * [tIterateToFlow_1_ITFO begin ] stop
 */
	
	/**
	 * [tIterateToFlow_1_ITFO main ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_1";
	
	currentComponent="tIterateToFlow_1_ITFO";

	

 


	tos_count_tIterateToFlow_1_ITFO++;

/**
 * [tIterateToFlow_1_ITFO main ] stop
 */
	
	/**
	 * [tIterateToFlow_1_ITFO end ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_1";
	
	currentComponent="tIterateToFlow_1_ITFO";

	

 

ok_Hash.put("tIterateToFlow_1_ITFO", true);
end_Hash.put("tIterateToFlow_1_ITFO", System.currentTimeMillis());




/**
 * [tIterateToFlow_1_ITFO end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate2", 2, "exec" + NB_ITERATE_tIterateToFlow_1_ITFO);
						}				
					




	
	/**
	 * [tForeach_2 end ] start
	 */

	

	
	
	currentComponent="tForeach_2";

	

}

 

ok_Hash.put("tForeach_2", true);
end_Hash.put("tForeach_2", System.currentTimeMillis());




/**
 * [tForeach_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tForeach_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk", 0, "ok");
								} 
							
							tIterateToFlow_1_AIProcess(globalMap); 
						
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tForeach_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tSQLiteInput_34Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tForeach_2 finally ] start
	 */

	

	
	
	currentComponent="tForeach_2";

	

 



/**
 * [tForeach_2 finally ] stop
 */

	
	/**
	 * [tIterateToFlow_1_ITFO finally ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_1";
	
	currentComponent="tIterateToFlow_1_ITFO";

	

 



/**
 * [tIterateToFlow_1_ITFO finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tForeach_2_SUBPROCESS_STATE", 1);
	}
	


public static class row48Struct implements routines.system.IPersistableRow<row48Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String realURL;

				public String getRealURL () {
					return this.realURL;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.realURL = readString(dis);
					
					this.obsValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.realURL,dos);
					
					// String
				
						writeString(this.obsValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",realURL="+realURL);
		sb.append(",obsValue="+obsValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row48Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row46Struct implements routines.system.IPersistableRow<row46Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				
			    public String obsValue2;

				public String getObsValue2 () {
					return this.obsValue2;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.obsValue = readString(dis);
					
					this.obsValue2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.obsValue,dos);
					
					// String
				
						writeString(this.obsValue2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
		sb.append(",obsValue2="+obsValue2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row46Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_34Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_34_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row46Struct row46 = new row46Struct();
row48Struct row48 = new row48Struct();





	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row48" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_1 = 0;
		
    	class BytesLimit65535_tFileOutputDelimited_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputDelimited_1().limitLog4jByte();

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(System.getProperty("java.io.tmpdir") + context.resolveFilename)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitEvery_tFileOutputDelimited_1 = 1000;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"UTF-8"));


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row46" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_1 = 0;
		
    	class BytesLimit65535_tJavaRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_1().limitLog4jByte();

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_34 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_34", false);
		start_Hash.put("tSQLiteInput_34", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_34";

	
		int tos_count_tSQLiteInput_34 = 0;
		
    	class BytesLimit65535_tSQLiteInput_34{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_34().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_34 = 0;
		    java.sql.Connection conn_tSQLiteInput_34 = null;
			    String driverClass_tSQLiteInput_34 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_34);
				
			String url_tSQLiteInput_34 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_34 = java.sql.DriverManager.getConnection(url_tSQLiteInput_34);
		    
			java.sql.Statement stmt_tSQLiteInput_34 = conn_tSQLiteInput_34.createStatement();

		    String dbquery_tSQLiteInput_34 = "SELECT DISTINCT uuid, \nGROUP_CONCAT(obsValue2, '|') AS obsValue\nFROM	(\n  SELECT DISTINCT uuid, obsValue, REPLACE(obsValue2, 'http:', 'https:') AS obsValue2\n  FROM online_resource\n  WHERE obsValue = 'WWW:LINK-1.0-http--link'\n)\nGROUP BY uuid\nCOLLATE NOCASE";
			

                       globalMap.put("tSQLiteInput_34_QUERY",dbquery_tSQLiteInput_34);

		    java.sql.ResultSet rs_tSQLiteInput_34 = null;
		try{
		    rs_tSQLiteInput_34 = stmt_tSQLiteInput_34.executeQuery(dbquery_tSQLiteInput_34);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_34 = rs_tSQLiteInput_34.getMetaData();
		    int colQtyInRs_tSQLiteInput_34 = rsmd_tSQLiteInput_34.getColumnCount();

		    String tmpContent_tSQLiteInput_34 = null;
		    
		    
		    while (rs_tSQLiteInput_34.next()) {
		        nb_line_tSQLiteInput_34++;
		        
							if(colQtyInRs_tSQLiteInput_34 < 1) {
								row46.uuid = null;
							} else {
	                         		
        	row46.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_34, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_34 < 2) {
								row46.obsValue = null;
							} else {
	                         		
        	row46.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_34, 2, false);
		                    }
							if(colQtyInRs_tSQLiteInput_34 < 3) {
								row46.obsValue2 = null;
							} else {
	                         		
        	row46.obsValue2 = routines.system.JDBCUtil.getString(rs_tSQLiteInput_34, 3, false);
		                    }
					



 



/**
 * [tSQLiteInput_34 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_34 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_34";

	

 


	tos_count_tSQLiteInput_34++;

/**
 * [tSQLiteInput_34 main ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

			//row46
			//row46


			
				if(execStat){
					runStat.updateStatOnConnection("row46"+iterateId,1, 1);
				} 
			

		

    String url = row46.obsValue;
java.net.HttpURLConnection con = (java.net.HttpURLConnection) new java.net.URL(url).openConnection();
con.setInstanceFollowRedirects(false);
con.connect();
String realURL = con.getHeaderField("Location");
//System.out.println(realURL);
row48.realURL = realURL;
row48.uuid = row46.uuid;
row48.obsValue = url;
con.disconnect();
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

			//row48
			//row48


			
				if(execStat){
					runStat.updateStatOnConnection("row48"+iterateId,1, 1);
				} 
			

		


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row48.uuid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row48.uuid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row48.realURL != null) {
                        sb_tFileOutputDelimited_1.append(
                            row48.realURL
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row48.obsValue != null) {
                        sb_tFileOutputDelimited_1.append(
                            row48.obsValue
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */






	
	/**
	 * [tSQLiteInput_34 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_34";

	

	}
}finally{
	stmt_tSQLiteInput_34.close();

		if(conn_tSQLiteInput_34 != null && !conn_tSQLiteInput_34.isClosed()) {
			
			conn_tSQLiteInput_34.close();
			
		}
}
globalMap.put("tSQLiteInput_34_NB_LINE",nb_line_tSQLiteInput_34);

 

ok_Hash.put("tSQLiteInput_34", true);
end_Hash.put("tSQLiteInput_34", System.currentTimeMillis());




/**
 * [tSQLiteInput_34 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row46"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row48"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tFileInputDelimited_2Process(globalMap);



/**
 * [tFileOutputDelimited_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_34 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_34";

	

 



/**
 * [tSQLiteInput_34 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_34_SUBPROCESS_STATE", 1);
	}
	


public static class row47Struct implements routines.system.IPersistableRow<row47Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String realURL;

				public String getRealURL () {
					return this.realURL;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.realURL = readString(dis);
					
					this.obsValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.realURL,dos);
					
					// String
				
						writeString(this.obsValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",realURL="+realURL);
		sb.append(",obsValue="+obsValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row47Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row50Struct implements routines.system.IPersistableRow<row50Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String realURL;

				public String getRealURL () {
					return this.realURL;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.realURL = readString(dis);
					
					this.obsValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.realURL,dos);
					
					// String
				
						writeString(this.obsValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",realURL="+realURL);
		sb.append(",obsValue="+obsValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row50Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row50Struct row50 = new row50Struct();
row50Struct row47 = row50;





	
	/**
	 * [tSQLiteOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteOutput_4", false);
		start_Hash.put("tSQLiteOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteOutput_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row47" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tSQLiteOutput_4 = 0;
		
    	class BytesLimit65535_tSQLiteOutput_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteOutput_4().limitLog4jByte();
	




int nb_line_tSQLiteOutput_4 = 0;
int nb_line_update_tSQLiteOutput_4 = 0;
int nb_line_inserted_tSQLiteOutput_4 = 0;
int nb_line_deleted_tSQLiteOutput_4 = 0;
int nb_line_rejected_tSQLiteOutput_4 = 0;

int deletedCount_tSQLiteOutput_4=0;
int updatedCount_tSQLiteOutput_4=0;
int insertedCount_tSQLiteOutput_4=0;

String tableName_tSQLiteOutput_4 = "online_resource_resolved";
boolean whetherReject_tSQLiteOutput_4 = false;

       int batchSize_tSQLiteOutput_4 = 10000;
       int batchSizeCounter_tSQLiteOutput_4=0;
       int tmp_batchUpdateCount_tSQLiteOutput_4 = 0;


java.sql.Connection conn_tSQLiteOutput_4 = null;
    	
    java.lang.Class.forName("org.sqlite.JDBC");
    String url_tSQLiteOutput_4 = "jdbc:sqlite:"+ "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
    	
    conn_tSQLiteOutput_4 = java.sql.DriverManager.getConnection(url_tSQLiteOutput_4);
	resourceMap.put("conn_tSQLiteOutput_4", conn_tSQLiteOutput_4);
        conn_tSQLiteOutput_4.setAutoCommit(false);
        int commitEvery_tSQLiteOutput_4 = 10000;
        int commitCounter_tSQLiteOutput_4 = 0;

            java.sql.DatabaseMetaData dbMetaData_tSQLiteOutput_4 = conn_tSQLiteOutput_4.getMetaData();
            java.sql.ResultSet rsTable_tSQLiteOutput_4 = dbMetaData_tSQLiteOutput_4.getTables(null, null, null, new String[]{"TABLE"});
            boolean whetherExist_tSQLiteOutput_4 = false;
            while(rsTable_tSQLiteOutput_4.next()) {
                String table_tSQLiteOutput_4 = rsTable_tSQLiteOutput_4.getString("TABLE_NAME");
                if(table_tSQLiteOutput_4.equalsIgnoreCase("online_resource_resolved")) {
                    whetherExist_tSQLiteOutput_4 = true;
                    break;
                }
            }
            rsTable_tSQLiteOutput_4.close();
                if(whetherExist_tSQLiteOutput_4) {
                    java.sql.Statement stmtDrop_tSQLiteOutput_4 = conn_tSQLiteOutput_4.createStatement();
                    	
                    stmtDrop_tSQLiteOutput_4.execute("DROP TABLE \"" + tableName_tSQLiteOutput_4 + "\"");
                    	
                }
                java.sql.Statement stmtCreate_tSQLiteOutput_4 = conn_tSQLiteOutput_4.createStatement();
                	
                stmtCreate_tSQLiteOutput_4.execute("CREATE TABLE \"" + tableName_tSQLiteOutput_4 + "\"(\"uuid\" VARCHAR(0)  ,\"realURL\" VARCHAR(0)  ,\"obsValue\" VARCHAR(0)  )");
                	
	    String insert_tSQLiteOutput_4 = "INSERT INTO \"" + "online_resource_resolved" + "\" (\"uuid\",\"realURL\",\"obsValue\") VALUES (?,?,?)";
	    java.sql.PreparedStatement pstmt_tSQLiteOutput_4 = conn_tSQLiteOutput_4.prepareStatement(insert_tSQLiteOutput_4);
	    

 



/**
 * [tSQLiteOutput_4 begin ] stop
 */



	
	/**
	 * [tLogRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_3", false);
		start_Hash.put("tLogRow_3", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row50" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tLogRow_3 = 0;
		
    	class BytesLimit65535_tLogRow_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tLogRow_3().limitLog4jByte();

	///////////////////////
		


	class Util_tLogRow_3 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_3--tLogRow_3";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 8;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "uuid");
				for(int i=0; i<titleWidth -"uuid".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "realURL");
				for(int i=0; i<titleWidth -"realURL".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "obsValue");
				for(int i=0; i<titleWidth -"obsValue".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[2]);
				for(int i=0; row[2] == null && i<dataWidth - 3 || row[2] != null && i<dataWidth -row[2].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_3 util_tLogRow_3 = new Util_tLogRow_3();




	java.io.PrintStream consoleOut_tLogRow_3 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_3);
    }

 		StringBuilder strBuffer_tLogRow_3 = null;
		int nb_line_tLogRow_3 = 0;
///////////////////////    			



 



/**
 * [tLogRow_3 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
    	class BytesLimit65535_tFileInputDelimited_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileInputDelimited_2().limitLog4jByte();
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				try{
					
						Object filename_tFileInputDelimited_2 = System.getProperty("java.io.tmpdir") + context.resolveFilename;
						if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
			if(footer_value_tFileInputDelimited_2 >0 || random_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(System.getProperty("java.io.tmpdir") + context.resolveFilename, "ISO-8859-15",";","\n",true,0,0,-1,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_2!=null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();
						
			    						row50 = null;			
												
									boolean whetherReject_tFileInputDelimited_2 = false;
									row50 = new row50Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					columnIndexWithD_tFileInputDelimited_2 = 0;
					
							row50.uuid = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 1;
					
							row50.realURL = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 2;
					
							row50.obsValue = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
				
										
										if(rowstate_tFileInputDelimited_2.getException()!=null) {
											throw rowstate_tFileInputDelimited_2.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_2 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row50 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
// Start of branch "row50"
if(row50 != null) { 



	
	/**
	 * [tLogRow_3 main ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

			//row50
			//row50


			
				if(execStat){
					runStat.updateStatOnConnection("row50"+iterateId,1, 1);
				} 
			

		
///////////////////////		
						



				strBuffer_tLogRow_3 = new StringBuilder();




   				
	    		if(row50.uuid != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row50.uuid)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row50.realURL != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row50.realURL)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_3.append("|");
    			


   				
	    		if(row50.obsValue != null) { //              
                    							
       
				strBuffer_tLogRow_3.append(
				                String.valueOf(row50.obsValue)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_3 = new String[3];
   				
	    		if(row50.uuid != null) { //              
                 row_tLogRow_3[0]=    						    
				                String.valueOf(row50.uuid)			
					          ;	
							
	    		} //			
    			   				
	    		if(row50.realURL != null) { //              
                 row_tLogRow_3[1]=    						    
				                String.valueOf(row50.realURL)			
					          ;	
							
	    		} //			
    			   				
	    		if(row50.obsValue != null) { //              
                 row_tLogRow_3[2]=    						    
				                String.valueOf(row50.obsValue)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_3++;
                consoleOut_tLogRow_3.println(util_tLogRow_3.print(row_tLogRow_3,nb_line_tLogRow_3));
                consoleOut_tLogRow_3.flush();
//////

//////                    
                    
///////////////////////    			

 
     row47 = row50;


	tos_count_tLogRow_3++;

/**
 * [tLogRow_3 main ] stop
 */

	
	/**
	 * [tSQLiteOutput_4 main ] start
	 */

	

	
	
	currentComponent="tSQLiteOutput_4";

	

			//row47
			//row47


			
				if(execStat){
					runStat.updateStatOnConnection("row47"+iterateId,1, 1);
				} 
			

		
	



        whetherReject_tSQLiteOutput_4 = false;
                    if(row47.uuid == null) {
pstmt_tSQLiteOutput_4.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_4.setString(1, row47.uuid);
}

                    if(row47.realURL == null) {
pstmt_tSQLiteOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_4.setString(2, row47.realURL);
}

                    if(row47.obsValue == null) {
pstmt_tSQLiteOutput_4.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_4.setString(3, row47.obsValue);
}


                       pstmt_tSQLiteOutput_4.addBatch();
                       batchSizeCounter_tSQLiteOutput_4++;
                       nb_line_tSQLiteOutput_4++;
                if ((batchSize_tSQLiteOutput_4 > 0) && (batchSize_tSQLiteOutput_4 <= batchSizeCounter_tSQLiteOutput_4)) {
                    int[] status_tSQLiteOutput_4 = null;
                    int countSum_tSQLiteOutput_4 = 0;
                    try {
                        batchSizeCounter_tSQLiteOutput_4 = 0;
                        status_tSQLiteOutput_4 = pstmt_tSQLiteOutput_4.executeBatch();
                        for(int countEach_tSQLiteOutput_4: status_tSQLiteOutput_4) {
                            countSum_tSQLiteOutput_4 += (countEach_tSQLiteOutput_4 < 0 ? 0 : countEach_tSQLiteOutput_4);
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tSQLiteOutput_4: e.getUpdateCounts()) {
                            countSum_tSQLiteOutput_4 += (countEach_tSQLiteOutput_4 < 0 ? 0 : countEach_tSQLiteOutput_4);
                        }
                        System.err.println(e.getMessage());
                    }
                    try {
                        tmp_batchUpdateCount_tSQLiteOutput_4 = pstmt_tSQLiteOutput_4.getUpdateCount();
                    }catch (java.sql.SQLException e){
                        System.err.println(e.getMessage());
                    }
                    tmp_batchUpdateCount_tSQLiteOutput_4 = tmp_batchUpdateCount_tSQLiteOutput_4 > countSum_tSQLiteOutput_4 ? tmp_batchUpdateCount_tSQLiteOutput_4 : countSum_tSQLiteOutput_4;
                        insertedCount_tSQLiteOutput_4 += tmp_batchUpdateCount_tSQLiteOutput_4;
               }
                commitCounter_tSQLiteOutput_4++;
                if(commitEvery_tSQLiteOutput_4 <= commitCounter_tSQLiteOutput_4) {
                try {
                    if (batchSizeCounter_tSQLiteOutput_4 > 0) {
	                    int countSum_tSQLiteOutput_4 = 0;
	                    
	                    for(int countEach_tSQLiteOutput_4: pstmt_tSQLiteOutput_4.executeBatch()) {
	                        countSum_tSQLiteOutput_4 += (countEach_tSQLiteOutput_4 < 0 ? 0 : countEach_tSQLiteOutput_4);
	                    }
	                    
	                    
	                        insertedCount_tSQLiteOutput_4 += countSum_tSQLiteOutput_4;
	                    
	                    batchSizeCounter_tSQLiteOutput_4 = 0;
                    }
                }catch (java.sql.BatchUpdateException e){
                        int countSum_tSQLiteOutput_4 = 0;
                        for(int countEach_tSQLiteOutput_4: e.getUpdateCounts()) {
                            countSum_tSQLiteOutput_4 += (countEach_tSQLiteOutput_4 < 0 ? 0 : countEach_tSQLiteOutput_4);
                        }
                            insertedCount_tSQLiteOutput_4 += countSum_tSQLiteOutput_4;
                        System.err.println(e.getMessage());
                }
                
                conn_tSQLiteOutput_4.commit();
                commitCounter_tSQLiteOutput_4=0;
            }

 


	tos_count_tSQLiteOutput_4++;

/**
 * [tSQLiteOutput_4 main ] stop
 */




} // End of branch "row50"




	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	



            }
            }finally{
                if(!((Object)(System.getProperty("java.io.tmpdir") + context.resolveFilename) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_2!=null){
                		fid_tFileInputDelimited_2.close();
                	}
                }
                if(fid_tFileInputDelimited_2!=null){
                	globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tLogRow_3 end ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	


//////
//////
globalMap.put("tLogRow_3_NB_LINE",nb_line_tLogRow_3);

///////////////////////    			

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row50"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tLogRow_3", true);
end_Hash.put("tLogRow_3", System.currentTimeMillis());




/**
 * [tLogRow_3 end ] stop
 */

	
	/**
	 * [tSQLiteOutput_4 end ] start
	 */

	

	
	
	currentComponent="tSQLiteOutput_4";

	




                    int[] status_tSQLiteOutput_4 = null;
                    int countSum_tSQLiteOutput_4 = 0;
                    try {
                        if(pstmt_tSQLiteOutput_4!=null && batchSizeCounter_tSQLiteOutput_4 > 0 ){
                            status_tSQLiteOutput_4 = pstmt_tSQLiteOutput_4.executeBatch();
                            for(int countEach_tSQLiteOutput_4: status_tSQLiteOutput_4) {
                                countSum_tSQLiteOutput_4 += (countEach_tSQLiteOutput_4 < 0 ? 0 : countEach_tSQLiteOutput_4);
                            }
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tSQLiteOutput_4: e.getUpdateCounts()) {
                            countSum_tSQLiteOutput_4 += (countEach_tSQLiteOutput_4 < 0 ? 0 : countEach_tSQLiteOutput_4);
                        }
                        System.err.println(e.getMessage());
                    }
                    if(pstmt_tSQLiteOutput_4!=null && batchSizeCounter_tSQLiteOutput_4 > 0 ){
                        try {
                            tmp_batchUpdateCount_tSQLiteOutput_4 = pstmt_tSQLiteOutput_4.getUpdateCount();
                        }catch (java.sql.SQLException e){

                        }
                        tmp_batchUpdateCount_tSQLiteOutput_4 = tmp_batchUpdateCount_tSQLiteOutput_4 > countSum_tSQLiteOutput_4 ? tmp_batchUpdateCount_tSQLiteOutput_4 : countSum_tSQLiteOutput_4;
                            insertedCount_tSQLiteOutput_4 += tmp_batchUpdateCount_tSQLiteOutput_4;
                    }
                    if(pstmt_tSQLiteOutput_4 != null) {
                        pstmt_tSQLiteOutput_4.close();
                    }

        if (commitCounter_tSQLiteOutput_4 > 0) {
            conn_tSQLiteOutput_4.commit();
        }
        conn_tSQLiteOutput_4 .close();
		resourceMap.put("finish_tSQLiteOutput_4", true);

	int rejectedCount_tSQLiteOutput_4 = 0;
	nb_line_deleted_tSQLiteOutput_4=nb_line_deleted_tSQLiteOutput_4+ deletedCount_tSQLiteOutput_4;
	nb_line_update_tSQLiteOutput_4=nb_line_update_tSQLiteOutput_4 + updatedCount_tSQLiteOutput_4;
	nb_line_inserted_tSQLiteOutput_4=nb_line_inserted_tSQLiteOutput_4 + insertedCount_tSQLiteOutput_4;
	nb_line_rejected_tSQLiteOutput_4=nb_line_rejected_tSQLiteOutput_4 + rejectedCount_tSQLiteOutput_4;
	
        globalMap.put("tSQLiteOutput_4_NB_LINE",nb_line_tSQLiteOutput_4);
        globalMap.put("tSQLiteOutput_4_NB_LINE_UPDATED",nb_line_update_tSQLiteOutput_4);
        globalMap.put("tSQLiteOutput_4_NB_LINE_INSERTED",nb_line_inserted_tSQLiteOutput_4);
        globalMap.put("tSQLiteOutput_4_NB_LINE_DELETED",nb_line_deleted_tSQLiteOutput_4);
        globalMap.put("tSQLiteOutput_4_NB_LINE_REJECTED", nb_line_rejected_tSQLiteOutput_4);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row47"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tSQLiteOutput_4", true);
end_Hash.put("tSQLiteOutput_4", System.currentTimeMillis());




/**
 * [tSQLiteOutput_4 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tSQLiteInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tLogRow_3 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_3";

	

 



/**
 * [tLogRow_3 finally ] stop
 */

	
	/**
	 * [tSQLiteOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteOutput_4";

	



	
		if(resourceMap.get("finish_tSQLiteOutput_4")==null){
			if(resourceMap.get("conn_tSQLiteOutput_4")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tSQLiteOutput_4")).close();
					
				} catch (java.sql.SQLException sqlEx_tSQLiteOutput_4) {
					String errorMessage_tSQLiteOutput_4 = "failed to close the connection in tSQLiteOutput_4 :" + sqlEx_tSQLiteOutput_4.getMessage();
					
					System.err.println(errorMessage_tSQLiteOutput_4);
				}
			}
		}
	

 



/**
 * [tSQLiteOutput_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	


public static class row52Struct implements routines.system.IPersistableRow<row52Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String dataset_id;

				public String getDataset_id () {
					return this.dataset_id;
				}
				
			    public String datestamp;

				public String getDatestamp () {
					return this.datestamp;
				}
				
			    public String crs;

				public String getCrs () {
					return this.crs;
				}
				
			    public String title;

				public String getTitle () {
					return this.title;
				}
				
			    public String edition;

				public String getEdition () {
					return this.edition;
				}
				
			    public String abstracts;

				public String getAbstracts () {
					return this.abstracts;
				}
				
			    public String custodian;

				public String getCustodian () {
					return this.custodian;
				}
				
			    public String inspire_themes;

				public String getInspire_themes () {
					return this.inspire_themes;
				}
				
			    public String gemet_concepts;

				public String getGemet_concepts () {
					return this.gemet_concepts;
				}
				
			    public String wlon;

				public String getWlon () {
					return this.wlon;
				}
				
			    public String elon;

				public String getElon () {
					return this.elon;
				}
				
			    public String slat;

				public String getSlat () {
					return this.slat;
				}
				
			    public String nlat;

				public String getNlat () {
					return this.nlat;
				}
				
			    public String stype;

				public String getStype () {
					return this.stype;
				}
				
			    public String scaleres;

				public String getScaleres () {
					return this.scaleres;
				}
				
			    public String tbegin;

				public String getTbegin () {
					return this.tbegin;
				}
				
			    public String tend;

				public String getTend () {
					return this.tend;
				}
				
			    public String protocols;

				public String getProtocols () {
					return this.protocols;
				}
				
			    public String links;

				public String getLinks () {
					return this.links;
				}
				
			    public String lineage;

				public String getLineage () {
					return this.lineage;
				}
				
			    public String data_src;

				public String getData_src () {
					return this.data_src;
				}
				
			    public String published;

				public String getPublished () {
					return this.published;
				}
				
			    public String sdiurl;

				public String getSdiurl () {
					return this.sdiurl;
				}
				
			    public String distributionFormat;

				public String getDistributionFormat () {
					return this.distributionFormat;
				}
				
			    public String place;

				public String getPlace () {
					return this.place;
				}
				
			    public String useLimitation;

				public String getUseLimitation () {
					return this.useLimitation;
				}
				
			    public String browseGraphic;

				public String getBrowseGraphic () {
					return this.browseGraphic;
				}
				
			    public String shortname;

				public String getShortname () {
					return this.shortname;
				}
				
			    public String referenceFlag;

				public String getReferenceFlag () {
					return this.referenceFlag;
				}
				
			    public String wms;

				public String getWms () {
					return this.wms;
				}
				
			    public String idpTopics;

				public String getIdpTopics () {
					return this.idpTopics;
				}
				
			    public String restApi;

				public String getRestApi () {
					return this.restApi;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.dataset_id = readString(dis);
					
					this.datestamp = readString(dis);
					
					this.crs = readString(dis);
					
					this.title = readString(dis);
					
					this.edition = readString(dis);
					
					this.abstracts = readString(dis);
					
					this.custodian = readString(dis);
					
					this.inspire_themes = readString(dis);
					
					this.gemet_concepts = readString(dis);
					
					this.wlon = readString(dis);
					
					this.elon = readString(dis);
					
					this.slat = readString(dis);
					
					this.nlat = readString(dis);
					
					this.stype = readString(dis);
					
					this.scaleres = readString(dis);
					
					this.tbegin = readString(dis);
					
					this.tend = readString(dis);
					
					this.protocols = readString(dis);
					
					this.links = readString(dis);
					
					this.lineage = readString(dis);
					
					this.data_src = readString(dis);
					
					this.published = readString(dis);
					
					this.sdiurl = readString(dis);
					
					this.distributionFormat = readString(dis);
					
					this.place = readString(dis);
					
					this.useLimitation = readString(dis);
					
					this.browseGraphic = readString(dis);
					
					this.shortname = readString(dis);
					
					this.referenceFlag = readString(dis);
					
					this.wms = readString(dis);
					
					this.idpTopics = readString(dis);
					
					this.restApi = readString(dis);
					
					this.status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.dataset_id,dos);
					
					// String
				
						writeString(this.datestamp,dos);
					
					// String
				
						writeString(this.crs,dos);
					
					// String
				
						writeString(this.title,dos);
					
					// String
				
						writeString(this.edition,dos);
					
					// String
				
						writeString(this.abstracts,dos);
					
					// String
				
						writeString(this.custodian,dos);
					
					// String
				
						writeString(this.inspire_themes,dos);
					
					// String
				
						writeString(this.gemet_concepts,dos);
					
					// String
				
						writeString(this.wlon,dos);
					
					// String
				
						writeString(this.elon,dos);
					
					// String
				
						writeString(this.slat,dos);
					
					// String
				
						writeString(this.nlat,dos);
					
					// String
				
						writeString(this.stype,dos);
					
					// String
				
						writeString(this.scaleres,dos);
					
					// String
				
						writeString(this.tbegin,dos);
					
					// String
				
						writeString(this.tend,dos);
					
					// String
				
						writeString(this.protocols,dos);
					
					// String
				
						writeString(this.links,dos);
					
					// String
				
						writeString(this.lineage,dos);
					
					// String
				
						writeString(this.data_src,dos);
					
					// String
				
						writeString(this.published,dos);
					
					// String
				
						writeString(this.sdiurl,dos);
					
					// String
				
						writeString(this.distributionFormat,dos);
					
					// String
				
						writeString(this.place,dos);
					
					// String
				
						writeString(this.useLimitation,dos);
					
					// String
				
						writeString(this.browseGraphic,dos);
					
					// String
				
						writeString(this.shortname,dos);
					
					// String
				
						writeString(this.referenceFlag,dos);
					
					// String
				
						writeString(this.wms,dos);
					
					// String
				
						writeString(this.idpTopics,dos);
					
					// String
				
						writeString(this.restApi,dos);
					
					// String
				
						writeString(this.status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",dataset_id="+dataset_id);
		sb.append(",datestamp="+datestamp);
		sb.append(",crs="+crs);
		sb.append(",title="+title);
		sb.append(",edition="+edition);
		sb.append(",abstracts="+abstracts);
		sb.append(",custodian="+custodian);
		sb.append(",inspire_themes="+inspire_themes);
		sb.append(",gemet_concepts="+gemet_concepts);
		sb.append(",wlon="+wlon);
		sb.append(",elon="+elon);
		sb.append(",slat="+slat);
		sb.append(",nlat="+nlat);
		sb.append(",stype="+stype);
		sb.append(",scaleres="+scaleres);
		sb.append(",tbegin="+tbegin);
		sb.append(",tend="+tend);
		sb.append(",protocols="+protocols);
		sb.append(",links="+links);
		sb.append(",lineage="+lineage);
		sb.append(",data_src="+data_src);
		sb.append(",published="+published);
		sb.append(",sdiurl="+sdiurl);
		sb.append(",distributionFormat="+distributionFormat);
		sb.append(",place="+place);
		sb.append(",useLimitation="+useLimitation);
		sb.append(",browseGraphic="+browseGraphic);
		sb.append(",shortname="+shortname);
		sb.append(",referenceFlag="+referenceFlag);
		sb.append(",wms="+wms);
		sb.append(",idpTopics="+idpTopics);
		sb.append(",restApi="+restApi);
		sb.append(",status="+status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row52Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row51Struct implements routines.system.IPersistableRow<row51Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String dataset_id;

				public String getDataset_id () {
					return this.dataset_id;
				}
				
			    public String datestamp;

				public String getDatestamp () {
					return this.datestamp;
				}
				
			    public String crs;

				public String getCrs () {
					return this.crs;
				}
				
			    public String title;

				public String getTitle () {
					return this.title;
				}
				
			    public String edition;

				public String getEdition () {
					return this.edition;
				}
				
			    public String abstracts;

				public String getAbstracts () {
					return this.abstracts;
				}
				
			    public String custodian;

				public String getCustodian () {
					return this.custodian;
				}
				
			    public String inspire_themes;

				public String getInspire_themes () {
					return this.inspire_themes;
				}
				
			    public String gemet_concepts;

				public String getGemet_concepts () {
					return this.gemet_concepts;
				}
				
			    public String wlon;

				public String getWlon () {
					return this.wlon;
				}
				
			    public String elon;

				public String getElon () {
					return this.elon;
				}
				
			    public String slat;

				public String getSlat () {
					return this.slat;
				}
				
			    public String nlat;

				public String getNlat () {
					return this.nlat;
				}
				
			    public String stype;

				public String getStype () {
					return this.stype;
				}
				
			    public String scaleres;

				public String getScaleres () {
					return this.scaleres;
				}
				
			    public String tbegin;

				public String getTbegin () {
					return this.tbegin;
				}
				
			    public String tend;

				public String getTend () {
					return this.tend;
				}
				
			    public String protocols;

				public String getProtocols () {
					return this.protocols;
				}
				
			    public String links;

				public String getLinks () {
					return this.links;
				}
				
			    public String lineage;

				public String getLineage () {
					return this.lineage;
				}
				
			    public String data_src;

				public String getData_src () {
					return this.data_src;
				}
				
			    public String published;

				public String getPublished () {
					return this.published;
				}
				
			    public String sdiurl;

				public String getSdiurl () {
					return this.sdiurl;
				}
				
			    public String distributionFormat;

				public String getDistributionFormat () {
					return this.distributionFormat;
				}
				
			    public String place;

				public String getPlace () {
					return this.place;
				}
				
			    public String useLimitation;

				public String getUseLimitation () {
					return this.useLimitation;
				}
				
			    public String browseGraphic;

				public String getBrowseGraphic () {
					return this.browseGraphic;
				}
				
			    public String shortname;

				public String getShortname () {
					return this.shortname;
				}
				
			    public String referenceFlag;

				public String getReferenceFlag () {
					return this.referenceFlag;
				}
				
			    public String wms;

				public String getWms () {
					return this.wms;
				}
				
			    public String idpTopics;

				public String getIdpTopics () {
					return this.idpTopics;
				}
				
			    public String restApi;

				public String getRestApi () {
					return this.restApi;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.dataset_id = readString(dis);
					
					this.datestamp = readString(dis);
					
					this.crs = readString(dis);
					
					this.title = readString(dis);
					
					this.edition = readString(dis);
					
					this.abstracts = readString(dis);
					
					this.custodian = readString(dis);
					
					this.inspire_themes = readString(dis);
					
					this.gemet_concepts = readString(dis);
					
					this.wlon = readString(dis);
					
					this.elon = readString(dis);
					
					this.slat = readString(dis);
					
					this.nlat = readString(dis);
					
					this.stype = readString(dis);
					
					this.scaleres = readString(dis);
					
					this.tbegin = readString(dis);
					
					this.tend = readString(dis);
					
					this.protocols = readString(dis);
					
					this.links = readString(dis);
					
					this.lineage = readString(dis);
					
					this.data_src = readString(dis);
					
					this.published = readString(dis);
					
					this.sdiurl = readString(dis);
					
					this.distributionFormat = readString(dis);
					
					this.place = readString(dis);
					
					this.useLimitation = readString(dis);
					
					this.browseGraphic = readString(dis);
					
					this.shortname = readString(dis);
					
					this.referenceFlag = readString(dis);
					
					this.wms = readString(dis);
					
					this.idpTopics = readString(dis);
					
					this.restApi = readString(dis);
					
					this.status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.dataset_id,dos);
					
					// String
				
						writeString(this.datestamp,dos);
					
					// String
				
						writeString(this.crs,dos);
					
					// String
				
						writeString(this.title,dos);
					
					// String
				
						writeString(this.edition,dos);
					
					// String
				
						writeString(this.abstracts,dos);
					
					// String
				
						writeString(this.custodian,dos);
					
					// String
				
						writeString(this.inspire_themes,dos);
					
					// String
				
						writeString(this.gemet_concepts,dos);
					
					// String
				
						writeString(this.wlon,dos);
					
					// String
				
						writeString(this.elon,dos);
					
					// String
				
						writeString(this.slat,dos);
					
					// String
				
						writeString(this.nlat,dos);
					
					// String
				
						writeString(this.stype,dos);
					
					// String
				
						writeString(this.scaleres,dos);
					
					// String
				
						writeString(this.tbegin,dos);
					
					// String
				
						writeString(this.tend,dos);
					
					// String
				
						writeString(this.protocols,dos);
					
					// String
				
						writeString(this.links,dos);
					
					// String
				
						writeString(this.lineage,dos);
					
					// String
				
						writeString(this.data_src,dos);
					
					// String
				
						writeString(this.published,dos);
					
					// String
				
						writeString(this.sdiurl,dos);
					
					// String
				
						writeString(this.distributionFormat,dos);
					
					// String
				
						writeString(this.place,dos);
					
					// String
				
						writeString(this.useLimitation,dos);
					
					// String
				
						writeString(this.browseGraphic,dos);
					
					// String
				
						writeString(this.shortname,dos);
					
					// String
				
						writeString(this.referenceFlag,dos);
					
					// String
				
						writeString(this.wms,dos);
					
					// String
				
						writeString(this.idpTopics,dos);
					
					// String
				
						writeString(this.restApi,dos);
					
					// String
				
						writeString(this.status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",dataset_id="+dataset_id);
		sb.append(",datestamp="+datestamp);
		sb.append(",crs="+crs);
		sb.append(",title="+title);
		sb.append(",edition="+edition);
		sb.append(",abstracts="+abstracts);
		sb.append(",custodian="+custodian);
		sb.append(",inspire_themes="+inspire_themes);
		sb.append(",gemet_concepts="+gemet_concepts);
		sb.append(",wlon="+wlon);
		sb.append(",elon="+elon);
		sb.append(",slat="+slat);
		sb.append(",nlat="+nlat);
		sb.append(",stype="+stype);
		sb.append(",scaleres="+scaleres);
		sb.append(",tbegin="+tbegin);
		sb.append(",tend="+tend);
		sb.append(",protocols="+protocols);
		sb.append(",links="+links);
		sb.append(",lineage="+lineage);
		sb.append(",data_src="+data_src);
		sb.append(",published="+published);
		sb.append(",sdiurl="+sdiurl);
		sb.append(",distributionFormat="+distributionFormat);
		sb.append(",place="+place);
		sb.append(",useLimitation="+useLimitation);
		sb.append(",browseGraphic="+browseGraphic);
		sb.append(",shortname="+shortname);
		sb.append(",referenceFlag="+referenceFlag);
		sb.append(",wms="+wms);
		sb.append(",idpTopics="+idpTopics);
		sb.append(",restApi="+restApi);
		sb.append(",status="+status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row51Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row54Struct implements routines.system.IPersistableRow<row54Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String dataset_id;

				public String getDataset_id () {
					return this.dataset_id;
				}
				
			    public String datestamp;

				public String getDatestamp () {
					return this.datestamp;
				}
				
			    public String crs;

				public String getCrs () {
					return this.crs;
				}
				
			    public String title;

				public String getTitle () {
					return this.title;
				}
				
			    public String edition;

				public String getEdition () {
					return this.edition;
				}
				
			    public String abstracts;

				public String getAbstracts () {
					return this.abstracts;
				}
				
			    public String custodian;

				public String getCustodian () {
					return this.custodian;
				}
				
			    public String inspire_themes;

				public String getInspire_themes () {
					return this.inspire_themes;
				}
				
			    public String gemet_concepts;

				public String getGemet_concepts () {
					return this.gemet_concepts;
				}
				
			    public String wlon;

				public String getWlon () {
					return this.wlon;
				}
				
			    public String elon;

				public String getElon () {
					return this.elon;
				}
				
			    public String slat;

				public String getSlat () {
					return this.slat;
				}
				
			    public String nlat;

				public String getNlat () {
					return this.nlat;
				}
				
			    public String stype;

				public String getStype () {
					return this.stype;
				}
				
			    public String scaleres;

				public String getScaleres () {
					return this.scaleres;
				}
				
			    public String tbegin;

				public String getTbegin () {
					return this.tbegin;
				}
				
			    public String tend;

				public String getTend () {
					return this.tend;
				}
				
			    public String protocols;

				public String getProtocols () {
					return this.protocols;
				}
				
			    public String links;

				public String getLinks () {
					return this.links;
				}
				
			    public String lineage;

				public String getLineage () {
					return this.lineage;
				}
				
			    public String data_src;

				public String getData_src () {
					return this.data_src;
				}
				
			    public String published;

				public String getPublished () {
					return this.published;
				}
				
			    public String sdiurl;

				public String getSdiurl () {
					return this.sdiurl;
				}
				
			    public String distributionFormat;

				public String getDistributionFormat () {
					return this.distributionFormat;
				}
				
			    public String place;

				public String getPlace () {
					return this.place;
				}
				
			    public String useLimitation;

				public String getUseLimitation () {
					return this.useLimitation;
				}
				
			    public String browseGraphic;

				public String getBrowseGraphic () {
					return this.browseGraphic;
				}
				
			    public String shortname;

				public String getShortname () {
					return this.shortname;
				}
				
			    public String referenceFlag;

				public String getReferenceFlag () {
					return this.referenceFlag;
				}
				
			    public String wms;

				public String getWms () {
					return this.wms;
				}
				
			    public String idpTopics;

				public String getIdpTopics () {
					return this.idpTopics;
				}
				
			    public String restApi;

				public String getRestApi () {
					return this.restApi;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.dataset_id = readString(dis);
					
					this.datestamp = readString(dis);
					
					this.crs = readString(dis);
					
					this.title = readString(dis);
					
					this.edition = readString(dis);
					
					this.abstracts = readString(dis);
					
					this.custodian = readString(dis);
					
					this.inspire_themes = readString(dis);
					
					this.gemet_concepts = readString(dis);
					
					this.wlon = readString(dis);
					
					this.elon = readString(dis);
					
					this.slat = readString(dis);
					
					this.nlat = readString(dis);
					
					this.stype = readString(dis);
					
					this.scaleres = readString(dis);
					
					this.tbegin = readString(dis);
					
					this.tend = readString(dis);
					
					this.protocols = readString(dis);
					
					this.links = readString(dis);
					
					this.lineage = readString(dis);
					
					this.data_src = readString(dis);
					
					this.published = readString(dis);
					
					this.sdiurl = readString(dis);
					
					this.distributionFormat = readString(dis);
					
					this.place = readString(dis);
					
					this.useLimitation = readString(dis);
					
					this.browseGraphic = readString(dis);
					
					this.shortname = readString(dis);
					
					this.referenceFlag = readString(dis);
					
					this.wms = readString(dis);
					
					this.idpTopics = readString(dis);
					
					this.restApi = readString(dis);
					
					this.status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.dataset_id,dos);
					
					// String
				
						writeString(this.datestamp,dos);
					
					// String
				
						writeString(this.crs,dos);
					
					// String
				
						writeString(this.title,dos);
					
					// String
				
						writeString(this.edition,dos);
					
					// String
				
						writeString(this.abstracts,dos);
					
					// String
				
						writeString(this.custodian,dos);
					
					// String
				
						writeString(this.inspire_themes,dos);
					
					// String
				
						writeString(this.gemet_concepts,dos);
					
					// String
				
						writeString(this.wlon,dos);
					
					// String
				
						writeString(this.elon,dos);
					
					// String
				
						writeString(this.slat,dos);
					
					// String
				
						writeString(this.nlat,dos);
					
					// String
				
						writeString(this.stype,dos);
					
					// String
				
						writeString(this.scaleres,dos);
					
					// String
				
						writeString(this.tbegin,dos);
					
					// String
				
						writeString(this.tend,dos);
					
					// String
				
						writeString(this.protocols,dos);
					
					// String
				
						writeString(this.links,dos);
					
					// String
				
						writeString(this.lineage,dos);
					
					// String
				
						writeString(this.data_src,dos);
					
					// String
				
						writeString(this.published,dos);
					
					// String
				
						writeString(this.sdiurl,dos);
					
					// String
				
						writeString(this.distributionFormat,dos);
					
					// String
				
						writeString(this.place,dos);
					
					// String
				
						writeString(this.useLimitation,dos);
					
					// String
				
						writeString(this.browseGraphic,dos);
					
					// String
				
						writeString(this.shortname,dos);
					
					// String
				
						writeString(this.referenceFlag,dos);
					
					// String
				
						writeString(this.wms,dos);
					
					// String
				
						writeString(this.idpTopics,dos);
					
					// String
				
						writeString(this.restApi,dos);
					
					// String
				
						writeString(this.status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",dataset_id="+dataset_id);
		sb.append(",datestamp="+datestamp);
		sb.append(",crs="+crs);
		sb.append(",title="+title);
		sb.append(",edition="+edition);
		sb.append(",abstracts="+abstracts);
		sb.append(",custodian="+custodian);
		sb.append(",inspire_themes="+inspire_themes);
		sb.append(",gemet_concepts="+gemet_concepts);
		sb.append(",wlon="+wlon);
		sb.append(",elon="+elon);
		sb.append(",slat="+slat);
		sb.append(",nlat="+nlat);
		sb.append(",stype="+stype);
		sb.append(",scaleres="+scaleres);
		sb.append(",tbegin="+tbegin);
		sb.append(",tend="+tend);
		sb.append(",protocols="+protocols);
		sb.append(",links="+links);
		sb.append(",lineage="+lineage);
		sb.append(",data_src="+data_src);
		sb.append(",published="+published);
		sb.append(",sdiurl="+sdiurl);
		sb.append(",distributionFormat="+distributionFormat);
		sb.append(",place="+place);
		sb.append(",useLimitation="+useLimitation);
		sb.append(",browseGraphic="+browseGraphic);
		sb.append(",shortname="+shortname);
		sb.append(",referenceFlag="+referenceFlag);
		sb.append(",wms="+wms);
		sb.append(",idpTopics="+idpTopics);
		sb.append(",restApi="+restApi);
		sb.append(",status="+status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row54Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class mappedStruct implements routines.system.IPersistableRow<mappedStruct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String dataset_id;

				public String getDataset_id () {
					return this.dataset_id;
				}
				
			    public String datestamp;

				public String getDatestamp () {
					return this.datestamp;
				}
				
			    public String crs;

				public String getCrs () {
					return this.crs;
				}
				
			    public String title;

				public String getTitle () {
					return this.title;
				}
				
			    public String edition;

				public String getEdition () {
					return this.edition;
				}
				
			    public String abstracts;

				public String getAbstracts () {
					return this.abstracts;
				}
				
			    public String custodian;

				public String getCustodian () {
					return this.custodian;
				}
				
			    public String inspire_themes;

				public String getInspire_themes () {
					return this.inspire_themes;
				}
				
			    public String gemet_concepts;

				public String getGemet_concepts () {
					return this.gemet_concepts;
				}
				
			    public String wlon;

				public String getWlon () {
					return this.wlon;
				}
				
			    public String elon;

				public String getElon () {
					return this.elon;
				}
				
			    public String slat;

				public String getSlat () {
					return this.slat;
				}
				
			    public String nlat;

				public String getNlat () {
					return this.nlat;
				}
				
			    public String stype;

				public String getStype () {
					return this.stype;
				}
				
			    public String scaleres;

				public String getScaleres () {
					return this.scaleres;
				}
				
			    public String tbegin;

				public String getTbegin () {
					return this.tbegin;
				}
				
			    public String tend;

				public String getTend () {
					return this.tend;
				}
				
			    public String protocols;

				public String getProtocols () {
					return this.protocols;
				}
				
			    public String links;

				public String getLinks () {
					return this.links;
				}
				
			    public String lineage;

				public String getLineage () {
					return this.lineage;
				}
				
			    public String data_src;

				public String getData_src () {
					return this.data_src;
				}
				
			    public String published;

				public String getPublished () {
					return this.published;
				}
				
			    public String sdiurl;

				public String getSdiurl () {
					return this.sdiurl;
				}
				
			    public String distributionFormat;

				public String getDistributionFormat () {
					return this.distributionFormat;
				}
				
			    public String place;

				public String getPlace () {
					return this.place;
				}
				
			    public String useLimitation;

				public String getUseLimitation () {
					return this.useLimitation;
				}
				
			    public String browseGraphic;

				public String getBrowseGraphic () {
					return this.browseGraphic;
				}
				
			    public String shortname;

				public String getShortname () {
					return this.shortname;
				}
				
			    public String referenceFlag;

				public String getReferenceFlag () {
					return this.referenceFlag;
				}
				
			    public String wms;

				public String getWms () {
					return this.wms;
				}
				
			    public String idpTopics;

				public String getIdpTopics () {
					return this.idpTopics;
				}
				
			    public String restApi;

				public String getRestApi () {
					return this.restApi;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.dataset_id = readString(dis);
					
					this.datestamp = readString(dis);
					
					this.crs = readString(dis);
					
					this.title = readString(dis);
					
					this.edition = readString(dis);
					
					this.abstracts = readString(dis);
					
					this.custodian = readString(dis);
					
					this.inspire_themes = readString(dis);
					
					this.gemet_concepts = readString(dis);
					
					this.wlon = readString(dis);
					
					this.elon = readString(dis);
					
					this.slat = readString(dis);
					
					this.nlat = readString(dis);
					
					this.stype = readString(dis);
					
					this.scaleres = readString(dis);
					
					this.tbegin = readString(dis);
					
					this.tend = readString(dis);
					
					this.protocols = readString(dis);
					
					this.links = readString(dis);
					
					this.lineage = readString(dis);
					
					this.data_src = readString(dis);
					
					this.published = readString(dis);
					
					this.sdiurl = readString(dis);
					
					this.distributionFormat = readString(dis);
					
					this.place = readString(dis);
					
					this.useLimitation = readString(dis);
					
					this.browseGraphic = readString(dis);
					
					this.shortname = readString(dis);
					
					this.referenceFlag = readString(dis);
					
					this.wms = readString(dis);
					
					this.idpTopics = readString(dis);
					
					this.restApi = readString(dis);
					
					this.status = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.dataset_id,dos);
					
					// String
				
						writeString(this.datestamp,dos);
					
					// String
				
						writeString(this.crs,dos);
					
					// String
				
						writeString(this.title,dos);
					
					// String
				
						writeString(this.edition,dos);
					
					// String
				
						writeString(this.abstracts,dos);
					
					// String
				
						writeString(this.custodian,dos);
					
					// String
				
						writeString(this.inspire_themes,dos);
					
					// String
				
						writeString(this.gemet_concepts,dos);
					
					// String
				
						writeString(this.wlon,dos);
					
					// String
				
						writeString(this.elon,dos);
					
					// String
				
						writeString(this.slat,dos);
					
					// String
				
						writeString(this.nlat,dos);
					
					// String
				
						writeString(this.stype,dos);
					
					// String
				
						writeString(this.scaleres,dos);
					
					// String
				
						writeString(this.tbegin,dos);
					
					// String
				
						writeString(this.tend,dos);
					
					// String
				
						writeString(this.protocols,dos);
					
					// String
				
						writeString(this.links,dos);
					
					// String
				
						writeString(this.lineage,dos);
					
					// String
				
						writeString(this.data_src,dos);
					
					// String
				
						writeString(this.published,dos);
					
					// String
				
						writeString(this.sdiurl,dos);
					
					// String
				
						writeString(this.distributionFormat,dos);
					
					// String
				
						writeString(this.place,dos);
					
					// String
				
						writeString(this.useLimitation,dos);
					
					// String
				
						writeString(this.browseGraphic,dos);
					
					// String
				
						writeString(this.shortname,dos);
					
					// String
				
						writeString(this.referenceFlag,dos);
					
					// String
				
						writeString(this.wms,dos);
					
					// String
				
						writeString(this.idpTopics,dos);
					
					// String
				
						writeString(this.restApi,dos);
					
					// String
				
						writeString(this.status,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",dataset_id="+dataset_id);
		sb.append(",datestamp="+datestamp);
		sb.append(",crs="+crs);
		sb.append(",title="+title);
		sb.append(",edition="+edition);
		sb.append(",abstracts="+abstracts);
		sb.append(",custodian="+custodian);
		sb.append(",inspire_themes="+inspire_themes);
		sb.append(",gemet_concepts="+gemet_concepts);
		sb.append(",wlon="+wlon);
		sb.append(",elon="+elon);
		sb.append(",slat="+slat);
		sb.append(",nlat="+nlat);
		sb.append(",stype="+stype);
		sb.append(",scaleres="+scaleres);
		sb.append(",tbegin="+tbegin);
		sb.append(",tend="+tend);
		sb.append(",protocols="+protocols);
		sb.append(",links="+links);
		sb.append(",lineage="+lineage);
		sb.append(",data_src="+data_src);
		sb.append(",published="+published);
		sb.append(",sdiurl="+sdiurl);
		sb.append(",distributionFormat="+distributionFormat);
		sb.append(",place="+place);
		sb.append(",useLimitation="+useLimitation);
		sb.append(",browseGraphic="+browseGraphic);
		sb.append(",shortname="+shortname);
		sb.append(",referenceFlag="+referenceFlag);
		sb.append(",wms="+wms);
		sb.append(",idpTopics="+idpTopics);
		sb.append(",restApi="+restApi);
		sb.append(",status="+status);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(mappedStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.obsValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.obsValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tSQLiteInput_1Struct implements routines.system.IPersistableRow<after_tSQLiteInput_1Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.obsValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.obsValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tSQLiteInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;


		tSQLiteInput_2Process(globalMap);
		tSQLiteInput_3Process(globalMap);
		tSQLiteInput_4Process(globalMap);
		tSQLiteInput_5Process(globalMap);
		tSQLiteInput_6Process(globalMap);
		tSQLiteInput_7Process(globalMap);
		tSQLiteInput_8Process(globalMap);
		tSQLiteInput_9Process(globalMap);
		tSQLiteInput_10Process(globalMap);
		tSQLiteInput_11Process(globalMap);
		tSQLiteInput_12Process(globalMap);
		tSQLiteInput_13Process(globalMap);
		tSQLiteInput_14Process(globalMap);
		tSQLiteInput_15Process(globalMap);
		tSQLiteInput_16Process(globalMap);
		tSQLiteInput_17Process(globalMap);
		tSQLiteInput_18Process(globalMap);
		tSQLiteInput_19Process(globalMap);
		tSQLiteInput_25Process(globalMap);
		tSQLiteInput_26Process(globalMap);
		tSQLiteInput_20Process(globalMap);
		tSQLiteInput_24Process(globalMap);
		tSQLiteInput_27Process(globalMap);
		tSQLiteInput_28Process(globalMap);
		tSQLiteInput_21Process(globalMap);
		tSQLiteInput_22Process(globalMap);
		tSQLiteInput_23Process(globalMap);
		tSQLiteInput_29Process(globalMap);
		tSQLiteInput_31Process(globalMap);
		tSQLiteInput_30Process(globalMap);
		tSQLiteInput_32Process(globalMap);
		tSQLiteInput_33Process(globalMap);
		tSQLiteInput_35Process(globalMap);
		tSQLiteInput_36Process(globalMap);

		row13Struct row13 = new row13Struct();
mappedStruct mapped = new mappedStruct();
row52Struct row52 = new row52Struct();
row51Struct row51 = new row51Struct();
row54Struct row54 = new row54Struct();






	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row52" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputDelimited_2 = 0;
		
    	class BytesLimit65535_tFileOutputDelimited_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputDelimited_2().limitLog4jByte();

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.outputDir + "/sdi-internal.tsv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
                String[] headColutFileOutputDelimited_2=new String[34];
            class CSVBasicSet_tFileOutputDelimited_2{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_2[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_2 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_2[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator("\t");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_2[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_2 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_2[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_2[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_2 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_2[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_2 = 0;
            int splitEvery_tFileOutputDelimited_2 = 1000;
            int splitedFileNo_tFileOutputDelimited_2 =0;
            int currentRow_tFileOutputDelimited_2 = 0;


            CSVBasicSet_tFileOutputDelimited_2 csvSettings_tFileOutputDelimited_2 = new CSVBasicSet_tFileOutputDelimited_2();
            csvSettings_tFileOutputDelimited_2.setFieldSeparator("\t");
            csvSettings_tFileOutputDelimited_2.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_2.setEscapeAndTextEnclosure("\"","\"");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_2 = null;

                            java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                            if(fileToDelete_tFileOutputDelimited_2.exists()) {
                                fileToDelete_tFileOutputDelimited_2.delete();
                            }
                            CsvWritertFileOutputDelimited_2 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false), "UTF-8")));
                            CsvWritertFileOutputDelimited_2.setSeparator(csvSettings_tFileOutputDelimited_2.getFieldDelim());
                    if(!csvSettings_tFileOutputDelimited_2.isUseCRLFRecordDelimiter() && csvSettings_tFileOutputDelimited_2.getRowDelim()!='\r' && csvSettings_tFileOutputDelimited_2.getRowDelim()!='\n') {
                        CsvWritertFileOutputDelimited_2.setLineEnd(""+csvSettings_tFileOutputDelimited_2.getRowDelim());
                    }
                        if(filetFileOutputDelimited_2.length()==0){
                                    headColutFileOutputDelimited_2[0]="uuid";
                                    headColutFileOutputDelimited_2[1]="dataset_id";
                                    headColutFileOutputDelimited_2[2]="datestamp";
                                    headColutFileOutputDelimited_2[3]="crs";
                                    headColutFileOutputDelimited_2[4]="title";
                                    headColutFileOutputDelimited_2[5]="edition";
                                    headColutFileOutputDelimited_2[6]="abstracts";
                                    headColutFileOutputDelimited_2[7]="custodian";
                                    headColutFileOutputDelimited_2[8]="inspire_themes";
                                    headColutFileOutputDelimited_2[9]="gemet_concepts";
                                    headColutFileOutputDelimited_2[10]="wlon";
                                    headColutFileOutputDelimited_2[11]="elon";
                                    headColutFileOutputDelimited_2[12]="slat";
                                    headColutFileOutputDelimited_2[13]="nlat";
                                    headColutFileOutputDelimited_2[14]="stype";
                                    headColutFileOutputDelimited_2[15]="scaleres";
                                    headColutFileOutputDelimited_2[16]="tbegin";
                                    headColutFileOutputDelimited_2[17]="tend";
                                    headColutFileOutputDelimited_2[18]="protocols";
                                    headColutFileOutputDelimited_2[19]="links";
                                    headColutFileOutputDelimited_2[20]="lineage";
                                    headColutFileOutputDelimited_2[21]="data_src";
                                    headColutFileOutputDelimited_2[22]="published";
                                    headColutFileOutputDelimited_2[23]="sdiurl";
                                    headColutFileOutputDelimited_2[24]="distributionFormat";
                                    headColutFileOutputDelimited_2[25]="place";
                                    headColutFileOutputDelimited_2[26]="useLimitation";
                                    headColutFileOutputDelimited_2[27]="browseGraphic";
                                    headColutFileOutputDelimited_2[28]="shortname";
                                    headColutFileOutputDelimited_2[29]="referenceFlag";
                                    headColutFileOutputDelimited_2[30]="wms";
                                    headColutFileOutputDelimited_2[31]="idpTopics";
                                    headColutFileOutputDelimited_2[32]="restApi";
                                    headColutFileOutputDelimited_2[33]="status";
                            CsvWritertFileOutputDelimited_2.writeNext(headColutFileOutputDelimited_2);
                            CsvWritertFileOutputDelimited_2.flush();
                        }
                CsvWritertFileOutputDelimited_2.setEscapeChar(csvSettings_tFileOutputDelimited_2.getEscapeChar());
                CsvWritertFileOutputDelimited_2.setQuoteChar(csvSettings_tFileOutputDelimited_2.getTextEnclosure());
                CsvWritertFileOutputDelimited_2.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_2", CsvWritertFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */




	
	/**
	 * [tFileOutputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_1", false);
		start_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row51" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFileOutputExcel_1 = 0;
		
    	class BytesLimit65535_tFileOutputExcel_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFileOutputExcel_1().limitLog4jByte();


		int columnIndex_tFileOutputExcel_1 = 0;
		
		String fileName_tFileOutputExcel_1=context.outputDir + "/sdi-internal.xlsx";
		int nb_line_tFileOutputExcel_1 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_1 = new org.talend.ExcelTool();
		xlsxTool_tFileOutputExcel_1.setSheet("cdi");
		xlsxTool_tFileOutputExcel_1.setAppend(false,false);
		xlsxTool_tFileOutputExcel_1.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_1.setXY(false,0,0,false);
		
		xlsxTool_tFileOutputExcel_1.prepareXlsxFile(fileName_tFileOutputExcel_1);
		
		xlsxTool_tFileOutputExcel_1.setFont("");
		
		if (xlsxTool_tFileOutputExcel_1.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_1.addRow();
		
		xlsxTool_tFileOutputExcel_1.addCellValue("uuid");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("dataset_id");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("datestamp");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("crs");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("title");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("edition");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("abstracts");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("custodian");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("inspire_themes");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("gemet_concepts");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("wlon");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("elon");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("slat");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("nlat");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("stype");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("scaleres");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("tbegin");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("tend");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("protocols");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("links");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("lineage");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("data_src");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("published");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("sdiurl");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("distributionFormat");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("place");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("useLimitation");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("browseGraphic");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("shortname");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("referenceFlag");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("wms");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("idpTopics");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("restApi");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("status");
		
		nb_line_tFileOutputExcel_1++; 
		
	}
		

 



/**
 * [tFileOutputExcel_1 begin ] stop
 */




	
	/**
	 * [tSQLiteOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteOutput_5", false);
		start_Hash.put("tSQLiteOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteOutput_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row54" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tSQLiteOutput_5 = 0;
		
    	class BytesLimit65535_tSQLiteOutput_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteOutput_5().limitLog4jByte();
	




int nb_line_tSQLiteOutput_5 = 0;
int nb_line_update_tSQLiteOutput_5 = 0;
int nb_line_inserted_tSQLiteOutput_5 = 0;
int nb_line_deleted_tSQLiteOutput_5 = 0;
int nb_line_rejected_tSQLiteOutput_5 = 0;

int deletedCount_tSQLiteOutput_5=0;
int updatedCount_tSQLiteOutput_5=0;
int insertedCount_tSQLiteOutput_5=0;

String tableName_tSQLiteOutput_5 = "sdi-internal";
boolean whetherReject_tSQLiteOutput_5 = false;

       int batchSize_tSQLiteOutput_5 = 10000;
       int batchSizeCounter_tSQLiteOutput_5=0;
       int tmp_batchUpdateCount_tSQLiteOutput_5 = 0;


java.sql.Connection conn_tSQLiteOutput_5 = null;
    	
    java.lang.Class.forName("org.sqlite.JDBC");
    String url_tSQLiteOutput_5 = "jdbc:sqlite:"+ "/" + context.outputDir + "/sdi-internal.sqlite";
    	
    conn_tSQLiteOutput_5 = java.sql.DriverManager.getConnection(url_tSQLiteOutput_5);
	resourceMap.put("conn_tSQLiteOutput_5", conn_tSQLiteOutput_5);
        conn_tSQLiteOutput_5.setAutoCommit(false);
        int commitEvery_tSQLiteOutput_5 = 10000;
        int commitCounter_tSQLiteOutput_5 = 0;

            java.sql.DatabaseMetaData dbMetaData_tSQLiteOutput_5 = conn_tSQLiteOutput_5.getMetaData();
            java.sql.ResultSet rsTable_tSQLiteOutput_5 = dbMetaData_tSQLiteOutput_5.getTables(null, null, null, new String[]{"TABLE"});
            boolean whetherExist_tSQLiteOutput_5 = false;
            while(rsTable_tSQLiteOutput_5.next()) {
                String table_tSQLiteOutput_5 = rsTable_tSQLiteOutput_5.getString("TABLE_NAME");
                if(table_tSQLiteOutput_5.equalsIgnoreCase("sdi-internal")) {
                    whetherExist_tSQLiteOutput_5 = true;
                    break;
                }
            }
            rsTable_tSQLiteOutput_5.close();
                if(whetherExist_tSQLiteOutput_5) {
                    java.sql.Statement stmtDrop_tSQLiteOutput_5 = conn_tSQLiteOutput_5.createStatement();
                    	
                    stmtDrop_tSQLiteOutput_5.execute("DROP TABLE \"" + tableName_tSQLiteOutput_5 + "\"");
                    	
                }
                java.sql.Statement stmtCreate_tSQLiteOutput_5 = conn_tSQLiteOutput_5.createStatement();
                	
                stmtCreate_tSQLiteOutput_5.execute("CREATE TABLE \"" + tableName_tSQLiteOutput_5 + "\"(\"uuid\" VARCHAR(0)  ,\"dataset_id\" VARCHAR(0)  ,\"datestamp\" VARCHAR(0)  ,\"crs\" VARCHAR(0)  ,\"title\" VARCHAR(0)  ,\"edition\" VARCHAR(0)  ,\"abstracts\" VARCHAR(0)  ,\"custodian\" VARCHAR(0)  ,\"inspire_themes\" VARCHAR(0)  ,\"gemet_concepts\" VARCHAR(0)  ,\"wlon\" VARCHAR(0)  ,\"elon\" VARCHAR(0)  ,\"slat\" VARCHAR(0)  ,\"nlat\" VARCHAR(0)  ,\"stype\" VARCHAR(0)  ,\"scaleres\" VARCHAR(0)  ,\"tbegin\" VARCHAR(0)  ,\"tend\" VARCHAR(0)  ,\"protocols\" VARCHAR(0)  ,\"links\" VARCHAR(0)  ,\"lineage\" VARCHAR(0)  ,\"data_src\" VARCHAR(0)  ,\"published\" VARCHAR(0)  ,\"sdiurl\" VARCHAR(0)  ,\"distributionFormat\" VARCHAR(0)  ,\"place\" VARCHAR(0)  ,\"useLimitation\" VARCHAR(0)  ,\"browseGraphic\" VARCHAR(0)  ,\"shortname\" VARCHAR(0)  ,\"referenceFlag\" VARCHAR(0)  ,\"wms\" VARCHAR(0)  ,\"idpTopics\" VARCHAR(0)  ,\"restApi\" VARCHAR(0)  ,\"status\" VARCHAR(0)  )");
                	
	    String insert_tSQLiteOutput_5 = "INSERT INTO \"" + "sdi-internal" + "\" (\"uuid\",\"dataset_id\",\"datestamp\",\"crs\",\"title\",\"edition\",\"abstracts\",\"custodian\",\"inspire_themes\",\"gemet_concepts\",\"wlon\",\"elon\",\"slat\",\"nlat\",\"stype\",\"scaleres\",\"tbegin\",\"tend\",\"protocols\",\"links\",\"lineage\",\"data_src\",\"published\",\"sdiurl\",\"distributionFormat\",\"place\",\"useLimitation\",\"browseGraphic\",\"shortname\",\"referenceFlag\",\"wms\",\"idpTopics\",\"restApi\",\"status\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	    java.sql.PreparedStatement pstmt_tSQLiteOutput_5 = conn_tSQLiteOutput_5.prepareStatement(insert_tSQLiteOutput_5);
	    

 



/**
 * [tSQLiteOutput_5 begin ] stop
 */



	
	/**
	 * [tReplicate_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplicate_2", false);
		start_Hash.put("tReplicate_2", System.currentTimeMillis());
		
	
	currentComponent="tReplicate_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("mapped" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tReplicate_2 = 0;
		
    	class BytesLimit65535_tReplicate_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tReplicate_2().limitLog4jByte();

 



/**
 * [tReplicate_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row13" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) 
					globalMap.get( "tHash_Lookup_row14" ))
					;					
					
	

row14Struct row14HashKey = new row14Struct();
row14Struct row14Default = new row14Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) 
					globalMap.get( "tHash_Lookup_row15" ))
					;					
					
	

row15Struct row15HashKey = new row15Struct();
row15Struct row15Default = new row15Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) 
					globalMap.get( "tHash_Lookup_row16" ))
					;					
					
	

row16Struct row16HashKey = new row16Struct();
row16Struct row16Default = new row16Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) 
					globalMap.get( "tHash_Lookup_row17" ))
					;					
					
	

row17Struct row17HashKey = new row17Struct();
row17Struct row17Default = new row17Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) 
					globalMap.get( "tHash_Lookup_row18" ))
					;					
					
	

row18Struct row18HashKey = new row18Struct();
row18Struct row18Default = new row18Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) 
					globalMap.get( "tHash_Lookup_row19" ))
					;					
					
	

row19Struct row19HashKey = new row19Struct();
row19Struct row19Default = new row19Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct> tHash_Lookup_row20 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct>) 
					globalMap.get( "tHash_Lookup_row20" ))
					;					
					
	

row20Struct row20HashKey = new row20Struct();
row20Struct row20Default = new row20Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) 
					globalMap.get( "tHash_Lookup_row21" ))
					;					
					
	

row21Struct row21HashKey = new row21Struct();
row21Struct row21Default = new row21Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) 
					globalMap.get( "tHash_Lookup_row22" ))
					;					
					
	

row22Struct row22HashKey = new row22Struct();
row22Struct row22Default = new row22Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct> tHash_Lookup_row23 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct>) 
					globalMap.get( "tHash_Lookup_row23" ))
					;					
					
	

row23Struct row23HashKey = new row23Struct();
row23Struct row23Default = new row23Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct> tHash_Lookup_row24 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct>) 
					globalMap.get( "tHash_Lookup_row24" ))
					;					
					
	

row24Struct row24HashKey = new row24Struct();
row24Struct row24Default = new row24Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct> tHash_Lookup_row25 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct>) 
					globalMap.get( "tHash_Lookup_row25" ))
					;					
					
	

row25Struct row25HashKey = new row25Struct();
row25Struct row25Default = new row25Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct> tHash_Lookup_row26 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct>) 
					globalMap.get( "tHash_Lookup_row26" ))
					;					
					
	

row26Struct row26HashKey = new row26Struct();
row26Struct row26Default = new row26Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct> tHash_Lookup_row27 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct>) 
					globalMap.get( "tHash_Lookup_row27" ))
					;					
					
	

row27Struct row27HashKey = new row27Struct();
row27Struct row27Default = new row27Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct> tHash_Lookup_row28 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct>) 
					globalMap.get( "tHash_Lookup_row28" ))
					;					
					
	

row28Struct row28HashKey = new row28Struct();
row28Struct row28Default = new row28Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct> tHash_Lookup_row29 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct>) 
					globalMap.get( "tHash_Lookup_row29" ))
					;					
					
	

row29Struct row29HashKey = new row29Struct();
row29Struct row29Default = new row29Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct> tHash_Lookup_row30 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct>) 
					globalMap.get( "tHash_Lookup_row30" ))
					;					
					
	

row30Struct row30HashKey = new row30Struct();
row30Struct row30Default = new row30Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct> tHash_Lookup_row31 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct>) 
					globalMap.get( "tHash_Lookup_row31" ))
					;					
					
	

row31Struct row31HashKey = new row31Struct();
row31Struct row31Default = new row31Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct> tHash_Lookup_row32 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct>) 
					globalMap.get( "tHash_Lookup_row32" ))
					;					
					
	

row32Struct row32HashKey = new row32Struct();
row32Struct row32Default = new row32Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct> tHash_Lookup_row33 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct>) 
					globalMap.get( "tHash_Lookup_row33" ))
					;					
					
	

row33Struct row33HashKey = new row33Struct();
row33Struct row33Default = new row33Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct> tHash_Lookup_row34 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct>) 
					globalMap.get( "tHash_Lookup_row34" ))
					;					
					
	

row34Struct row34HashKey = new row34Struct();
row34Struct row34Default = new row34Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct> tHash_Lookup_row35 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct>) 
					globalMap.get( "tHash_Lookup_row35" ))
					;					
					
	

row35Struct row35HashKey = new row35Struct();
row35Struct row35Default = new row35Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row36Struct> tHash_Lookup_row36 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row36Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row36Struct>) 
					globalMap.get( "tHash_Lookup_row36" ))
					;					
					
	

row36Struct row36HashKey = new row36Struct();
row36Struct row36Default = new row36Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row37Struct> tHash_Lookup_row37 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row37Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row37Struct>) 
					globalMap.get( "tHash_Lookup_row37" ))
					;					
					
	

row37Struct row37HashKey = new row37Struct();
row37Struct row37Default = new row37Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct> tHash_Lookup_row38 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct>) 
					globalMap.get( "tHash_Lookup_row38" ))
					;					
					
	

row38Struct row38HashKey = new row38Struct();
row38Struct row38Default = new row38Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row39Struct> tHash_Lookup_row39 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row39Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row39Struct>) 
					globalMap.get( "tHash_Lookup_row39" ))
					;					
					
	

row39Struct row39HashKey = new row39Struct();
row39Struct row39Default = new row39Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct> tHash_Lookup_row40 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct>) 
					globalMap.get( "tHash_Lookup_row40" ))
					;					
					
	

row40Struct row40HashKey = new row40Struct();
row40Struct row40Default = new row40Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row41Struct> tHash_Lookup_row41 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row41Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row41Struct>) 
					globalMap.get( "tHash_Lookup_row41" ))
					;					
					
	

row41Struct row41HashKey = new row41Struct();
row41Struct row41Default = new row41Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct> tHash_Lookup_row42 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct>) 
					globalMap.get( "tHash_Lookup_row42" ))
					;					
					
	

row42Struct row42HashKey = new row42Struct();
row42Struct row42Default = new row42Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row43Struct> tHash_Lookup_row43 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row43Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row43Struct>) 
					globalMap.get( "tHash_Lookup_row43" ))
					;					
					
	

row43Struct row43HashKey = new row43Struct();
row43Struct row43Default = new row43Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row44Struct> tHash_Lookup_row44 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row44Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row44Struct>) 
					globalMap.get( "tHash_Lookup_row44" ))
					;					
					
	

row44Struct row44HashKey = new row44Struct();
row44Struct row44Default = new row44Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row45Struct> tHash_Lookup_row45 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row45Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row45Struct>) 
					globalMap.get( "tHash_Lookup_row45" ))
					;					
					
	

row45Struct row45HashKey = new row45Struct();
row45Struct row45Default = new row45Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row49Struct> tHash_Lookup_row49 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row49Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row49Struct>) 
					globalMap.get( "tHash_Lookup_row49" ))
					;					
					
	

row49Struct row49HashKey = new row49Struct();
row49Struct row49Default = new row49Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row53Struct> tHash_Lookup_row53 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row53Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row53Struct>) 
					globalMap.get( "tHash_Lookup_row53" ))
					;					
					
	

row53Struct row53HashKey = new row53Struct();
row53Struct row53Default = new row53Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
mappedStruct mapped_tmp = new mappedStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_1", false);
		start_Hash.put("tSQLiteInput_1", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_1";

	
		int tos_count_tSQLiteInput_1 = 0;
		
    	class BytesLimit65535_tSQLiteInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_1().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_1 = 0;
		    java.sql.Connection conn_tSQLiteInput_1 = null;
			    String driverClass_tSQLiteInput_1 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_1);
				
			String url_tSQLiteInput_1 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_1 = java.sql.DriverManager.getConnection(url_tSQLiteInput_1);
		    
			java.sql.Statement stmt_tSQLiteInput_1 = conn_tSQLiteInput_1.createStatement();

		    String dbquery_tSQLiteInput_1 = "SELECT uuid,\n		obsValue\nFROM	DATASET_ID";
			

                       globalMap.put("tSQLiteInput_1_QUERY",dbquery_tSQLiteInput_1);

		    java.sql.ResultSet rs_tSQLiteInput_1 = null;
		try{
		    rs_tSQLiteInput_1 = stmt_tSQLiteInput_1.executeQuery(dbquery_tSQLiteInput_1);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_1 = rs_tSQLiteInput_1.getMetaData();
		    int colQtyInRs_tSQLiteInput_1 = rsmd_tSQLiteInput_1.getColumnCount();

		    String tmpContent_tSQLiteInput_1 = null;
		    
		    
		    while (rs_tSQLiteInput_1.next()) {
		        nb_line_tSQLiteInput_1++;
		        
							if(colQtyInRs_tSQLiteInput_1 < 1) {
								row13.uuid = null;
							} else {
	                         		
        	row13.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_1, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_1 < 2) {
								row13.obsValue = null;
							} else {
	                         		
        	row13.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_1, 2, false);
		                    }
					



 



/**
 * [tSQLiteInput_1 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_1 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_1";

	

 


	tos_count_tSQLiteInput_1++;

/**
 * [tSQLiteInput_1 main ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row13
			//row13


			
				if(execStat){
					runStat.updateStatOnConnection("row13"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row14" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow14 = false;
       		  	    	
       		  	    	
 							row14Struct row14ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row14HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row14HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row14.lookup( row14HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row14 != null && tHash_Lookup_row14.getCount(row14HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row14' and it contains more one result from keys :  row14.uuid = '" + row14HashKey.uuid + "'");
								} // G 071
							

							row14Struct row14 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row14Struct fromLookup_row14 = null;
							row14 = row14Default;
										 
							
								 
							
							
								if (tHash_Lookup_row14 !=null && tHash_Lookup_row14.hasNext()) { // G 099
								
							
								
								fromLookup_row14 = tHash_Lookup_row14.next();

							
							
								} // G 099
							
							

							if(fromLookup_row14 != null) {
								row14 = fromLookup_row14;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row15" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow15 = false;
       		  	    	
       		  	    	
 							row15Struct row15ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row15HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row15HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row15.lookup( row15HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row15 != null && tHash_Lookup_row15.getCount(row15HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row15' and it contains more one result from keys :  row15.uuid = '" + row15HashKey.uuid + "'");
								} // G 071
							

							row15Struct row15 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row15Struct fromLookup_row15 = null;
							row15 = row15Default;
										 
							
								 
							
							
								if (tHash_Lookup_row15 !=null && tHash_Lookup_row15.hasNext()) { // G 099
								
							
								
								fromLookup_row15 = tHash_Lookup_row15.next();

							
							
								} // G 099
							
							

							if(fromLookup_row15 != null) {
								row15 = fromLookup_row15;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row16" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow16 = false;
       		  	    	
       		  	    	
 							row16Struct row16ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row16HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row16HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row16.lookup( row16HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row16 != null && tHash_Lookup_row16.getCount(row16HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row16' and it contains more one result from keys :  row16.uuid = '" + row16HashKey.uuid + "'");
								} // G 071
							

							row16Struct row16 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row16Struct fromLookup_row16 = null;
							row16 = row16Default;
										 
							
								 
							
							
								if (tHash_Lookup_row16 !=null && tHash_Lookup_row16.hasNext()) { // G 099
								
							
								
								fromLookup_row16 = tHash_Lookup_row16.next();

							
							
								} // G 099
							
							

							if(fromLookup_row16 != null) {
								row16 = fromLookup_row16;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row17" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow17 = false;
       		  	    	
       		  	    	
 							row17Struct row17ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row17HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row17HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row17.lookup( row17HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row17 != null && tHash_Lookup_row17.getCount(row17HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row17' and it contains more one result from keys :  row17.uuid = '" + row17HashKey.uuid + "'");
								} // G 071
							

							row17Struct row17 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row17Struct fromLookup_row17 = null;
							row17 = row17Default;
										 
							
								 
							
							
								if (tHash_Lookup_row17 !=null && tHash_Lookup_row17.hasNext()) { // G 099
								
							
								
								fromLookup_row17 = tHash_Lookup_row17.next();

							
							
								} // G 099
							
							

							if(fromLookup_row17 != null) {
								row17 = fromLookup_row17;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row18" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow18 = false;
       		  	    	
       		  	    	
 							row18Struct row18ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row18HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row18HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row18.lookup( row18HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row18 != null && tHash_Lookup_row18.getCount(row18HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row18' and it contains more one result from keys :  row18.uuid = '" + row18HashKey.uuid + "'");
								} // G 071
							

							row18Struct row18 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row18Struct fromLookup_row18 = null;
							row18 = row18Default;
										 
							
								 
							
							
								if (tHash_Lookup_row18 !=null && tHash_Lookup_row18.hasNext()) { // G 099
								
							
								
								fromLookup_row18 = tHash_Lookup_row18.next();

							
							
								} // G 099
							
							

							if(fromLookup_row18 != null) {
								row18 = fromLookup_row18;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row19" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow19 = false;
       		  	    	
       		  	    	
 							row19Struct row19ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row19HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row19HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row19.lookup( row19HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row19 != null && tHash_Lookup_row19.getCount(row19HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row19' and it contains more one result from keys :  row19.uuid = '" + row19HashKey.uuid + "'");
								} // G 071
							

							row19Struct row19 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row19Struct fromLookup_row19 = null;
							row19 = row19Default;
										 
							
								 
							
							
								if (tHash_Lookup_row19 !=null && tHash_Lookup_row19.hasNext()) { // G 099
								
							
								
								fromLookup_row19 = tHash_Lookup_row19.next();

							
							
								} // G 099
							
							

							if(fromLookup_row19 != null) {
								row19 = fromLookup_row19;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row20" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow20 = false;
       		  	    	
       		  	    	
 							row20Struct row20ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row20HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row20HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row20.lookup( row20HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row20 != null && tHash_Lookup_row20.getCount(row20HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row20' and it contains more one result from keys :  row20.uuid = '" + row20HashKey.uuid + "'");
								} // G 071
							

							row20Struct row20 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row20Struct fromLookup_row20 = null;
							row20 = row20Default;
										 
							
								 
							
							
								if (tHash_Lookup_row20 !=null && tHash_Lookup_row20.hasNext()) { // G 099
								
							
								
								fromLookup_row20 = tHash_Lookup_row20.next();

							
							
								} // G 099
							
							

							if(fromLookup_row20 != null) {
								row20 = fromLookup_row20;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row21" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow21 = false;
       		  	    	
       		  	    	
 							row21Struct row21ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row21HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row21HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row21.lookup( row21HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row21 != null && tHash_Lookup_row21.getCount(row21HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row21' and it contains more one result from keys :  row21.uuid = '" + row21HashKey.uuid + "'");
								} // G 071
							

							row21Struct row21 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row21Struct fromLookup_row21 = null;
							row21 = row21Default;
										 
							
								 
							
							
								if (tHash_Lookup_row21 !=null && tHash_Lookup_row21.hasNext()) { // G 099
								
							
								
								fromLookup_row21 = tHash_Lookup_row21.next();

							
							
								} // G 099
							
							

							if(fromLookup_row21 != null) {
								row21 = fromLookup_row21;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row22" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow22 = false;
       		  	    	
       		  	    	
 							row22Struct row22ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row22HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row22HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row22.lookup( row22HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row22 != null && tHash_Lookup_row22.getCount(row22HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row22' and it contains more one result from keys :  row22.uuid = '" + row22HashKey.uuid + "'");
								} // G 071
							

							row22Struct row22 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row22Struct fromLookup_row22 = null;
							row22 = row22Default;
										 
							
								 
							
							
								if (tHash_Lookup_row22 !=null && tHash_Lookup_row22.hasNext()) { // G 099
								
							
								
								fromLookup_row22 = tHash_Lookup_row22.next();

							
							
								} // G 099
							
							

							if(fromLookup_row22 != null) {
								row22 = fromLookup_row22;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row23" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow23 = false;
       		  	    	
       		  	    	
 							row23Struct row23ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row23HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row23HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row23.lookup( row23HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row23 != null && tHash_Lookup_row23.getCount(row23HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row23' and it contains more one result from keys :  row23.uuid = '" + row23HashKey.uuid + "'");
								} // G 071
							

							row23Struct row23 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row23Struct fromLookup_row23 = null;
							row23 = row23Default;
										 
							
								 
							
							
								if (tHash_Lookup_row23 !=null && tHash_Lookup_row23.hasNext()) { // G 099
								
							
								
								fromLookup_row23 = tHash_Lookup_row23.next();

							
							
								} // G 099
							
							

							if(fromLookup_row23 != null) {
								row23 = fromLookup_row23;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row24" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow24 = false;
       		  	    	
       		  	    	
 							row24Struct row24ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row24HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row24HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row24.lookup( row24HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row24 != null && tHash_Lookup_row24.getCount(row24HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row24' and it contains more one result from keys :  row24.uuid = '" + row24HashKey.uuid + "'");
								} // G 071
							

							row24Struct row24 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row24Struct fromLookup_row24 = null;
							row24 = row24Default;
										 
							
								 
							
							
								if (tHash_Lookup_row24 !=null && tHash_Lookup_row24.hasNext()) { // G 099
								
							
								
								fromLookup_row24 = tHash_Lookup_row24.next();

							
							
								} // G 099
							
							

							if(fromLookup_row24 != null) {
								row24 = fromLookup_row24;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row25" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow25 = false;
       		  	    	
       		  	    	
 							row25Struct row25ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row25HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row25HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row25.lookup( row25HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row25 != null && tHash_Lookup_row25.getCount(row25HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row25' and it contains more one result from keys :  row25.uuid = '" + row25HashKey.uuid + "'");
								} // G 071
							

							row25Struct row25 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row25Struct fromLookup_row25 = null;
							row25 = row25Default;
										 
							
								 
							
							
								if (tHash_Lookup_row25 !=null && tHash_Lookup_row25.hasNext()) { // G 099
								
							
								
								fromLookup_row25 = tHash_Lookup_row25.next();

							
							
								} // G 099
							
							

							if(fromLookup_row25 != null) {
								row25 = fromLookup_row25;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row26" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow26 = false;
       		  	    	
       		  	    	
 							row26Struct row26ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row26HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row26HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row26.lookup( row26HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row26 != null && tHash_Lookup_row26.getCount(row26HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row26' and it contains more one result from keys :  row26.uuid = '" + row26HashKey.uuid + "'");
								} // G 071
							

							row26Struct row26 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row26Struct fromLookup_row26 = null;
							row26 = row26Default;
										 
							
								 
							
							
								if (tHash_Lookup_row26 !=null && tHash_Lookup_row26.hasNext()) { // G 099
								
							
								
								fromLookup_row26 = tHash_Lookup_row26.next();

							
							
								} // G 099
							
							

							if(fromLookup_row26 != null) {
								row26 = fromLookup_row26;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row27" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow27 = false;
       		  	    	
       		  	    	
 							row27Struct row27ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row27HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row27HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row27.lookup( row27HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row27 != null && tHash_Lookup_row27.getCount(row27HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row27' and it contains more one result from keys :  row27.uuid = '" + row27HashKey.uuid + "'");
								} // G 071
							

							row27Struct row27 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row27Struct fromLookup_row27 = null;
							row27 = row27Default;
										 
							
								 
							
							
								if (tHash_Lookup_row27 !=null && tHash_Lookup_row27.hasNext()) { // G 099
								
							
								
								fromLookup_row27 = tHash_Lookup_row27.next();

							
							
								} // G 099
							
							

							if(fromLookup_row27 != null) {
								row27 = fromLookup_row27;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row28" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow28 = false;
       		  	    	
       		  	    	
 							row28Struct row28ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row28HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row28HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row28.lookup( row28HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row28 != null && tHash_Lookup_row28.getCount(row28HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row28' and it contains more one result from keys :  row28.uuid = '" + row28HashKey.uuid + "'");
								} // G 071
							

							row28Struct row28 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row28Struct fromLookup_row28 = null;
							row28 = row28Default;
										 
							
								 
							
							
								if (tHash_Lookup_row28 !=null && tHash_Lookup_row28.hasNext()) { // G 099
								
							
								
								fromLookup_row28 = tHash_Lookup_row28.next();

							
							
								} // G 099
							
							

							if(fromLookup_row28 != null) {
								row28 = fromLookup_row28;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row29" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow29 = false;
       		  	    	
       		  	    	
 							row29Struct row29ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row29HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row29HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row29.lookup( row29HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row29 != null && tHash_Lookup_row29.getCount(row29HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row29' and it contains more one result from keys :  row29.uuid = '" + row29HashKey.uuid + "'");
								} // G 071
							

							row29Struct row29 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row29Struct fromLookup_row29 = null;
							row29 = row29Default;
										 
							
								 
							
							
								if (tHash_Lookup_row29 !=null && tHash_Lookup_row29.hasNext()) { // G 099
								
							
								
								fromLookup_row29 = tHash_Lookup_row29.next();

							
							
								} // G 099
							
							

							if(fromLookup_row29 != null) {
								row29 = fromLookup_row29;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row30" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow30 = false;
       		  	    	
       		  	    	
 							row30Struct row30ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row30HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row30HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row30.lookup( row30HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row30 != null && tHash_Lookup_row30.getCount(row30HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row30' and it contains more one result from keys :  row30.uuid = '" + row30HashKey.uuid + "'");
								} // G 071
							

							row30Struct row30 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row30Struct fromLookup_row30 = null;
							row30 = row30Default;
										 
							
								 
							
							
								if (tHash_Lookup_row30 !=null && tHash_Lookup_row30.hasNext()) { // G 099
								
							
								
								fromLookup_row30 = tHash_Lookup_row30.next();

							
							
								} // G 099
							
							

							if(fromLookup_row30 != null) {
								row30 = fromLookup_row30;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row31" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow31 = false;
       		  	    	
       		  	    	
 							row31Struct row31ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row31HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row31HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row31.lookup( row31HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row31 != null && tHash_Lookup_row31.getCount(row31HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row31' and it contains more one result from keys :  row31.uuid = '" + row31HashKey.uuid + "'");
								} // G 071
							

							row31Struct row31 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row31Struct fromLookup_row31 = null;
							row31 = row31Default;
										 
							
								 
							
							
								if (tHash_Lookup_row31 !=null && tHash_Lookup_row31.hasNext()) { // G 099
								
							
								
								fromLookup_row31 = tHash_Lookup_row31.next();

							
							
								} // G 099
							
							

							if(fromLookup_row31 != null) {
								row31 = fromLookup_row31;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row32" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow32 = false;
       		  	    	
       		  	    	
 							row32Struct row32ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row32HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row32HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row32.lookup( row32HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row32 != null && tHash_Lookup_row32.getCount(row32HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row32' and it contains more one result from keys :  row32.uuid = '" + row32HashKey.uuid + "'");
								} // G 071
							

							row32Struct row32 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row32Struct fromLookup_row32 = null;
							row32 = row32Default;
										 
							
								 
							
							
								if (tHash_Lookup_row32 !=null && tHash_Lookup_row32.hasNext()) { // G 099
								
							
								
								fromLookup_row32 = tHash_Lookup_row32.next();

							
							
								} // G 099
							
							

							if(fromLookup_row32 != null) {
								row32 = fromLookup_row32;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row33" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow33 = false;
       		  	    	
       		  	    	
 							row33Struct row33ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row33HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row33HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row33.lookup( row33HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row33 != null && tHash_Lookup_row33.getCount(row33HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row33' and it contains more one result from keys :  row33.uuid = '" + row33HashKey.uuid + "'");
								} // G 071
							

							row33Struct row33 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row33Struct fromLookup_row33 = null;
							row33 = row33Default;
										 
							
								 
							
							
								if (tHash_Lookup_row33 !=null && tHash_Lookup_row33.hasNext()) { // G 099
								
							
								
								fromLookup_row33 = tHash_Lookup_row33.next();

							
							
								} // G 099
							
							

							if(fromLookup_row33 != null) {
								row33 = fromLookup_row33;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row34" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow34 = false;
       		  	    	
       		  	    	
 							row34Struct row34ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row34HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row34HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row34.lookup( row34HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row34 != null && tHash_Lookup_row34.getCount(row34HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row34' and it contains more one result from keys :  row34.uuid = '" + row34HashKey.uuid + "'");
								} // G 071
							

							row34Struct row34 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row34Struct fromLookup_row34 = null;
							row34 = row34Default;
										 
							
								 
							
							
								if (tHash_Lookup_row34 !=null && tHash_Lookup_row34.hasNext()) { // G 099
								
							
								
								fromLookup_row34 = tHash_Lookup_row34.next();

							
							
								} // G 099
							
							

							if(fromLookup_row34 != null) {
								row34 = fromLookup_row34;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row35" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow35 = false;
       		  	    	
       		  	    	
 							row35Struct row35ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row35HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row35HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row35.lookup( row35HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row35 != null && tHash_Lookup_row35.getCount(row35HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row35' and it contains more one result from keys :  row35.uuid = '" + row35HashKey.uuid + "'");
								} // G 071
							

							row35Struct row35 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row35Struct fromLookup_row35 = null;
							row35 = row35Default;
										 
							
								 
							
							
								if (tHash_Lookup_row35 !=null && tHash_Lookup_row35.hasNext()) { // G 099
								
							
								
								fromLookup_row35 = tHash_Lookup_row35.next();

							
							
								} // G 099
							
							

							if(fromLookup_row35 != null) {
								row35 = fromLookup_row35;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row36" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow36 = false;
       		  	    	
       		  	    	
 							row36Struct row36ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row36HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row36HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row36.lookup( row36HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row36 != null && tHash_Lookup_row36.getCount(row36HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row36' and it contains more one result from keys :  row36.uuid = '" + row36HashKey.uuid + "'");
								} // G 071
							

							row36Struct row36 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row36Struct fromLookup_row36 = null;
							row36 = row36Default;
										 
							
								 
							
							
								if (tHash_Lookup_row36 !=null && tHash_Lookup_row36.hasNext()) { // G 099
								
							
								
								fromLookup_row36 = tHash_Lookup_row36.next();

							
							
								} // G 099
							
							

							if(fromLookup_row36 != null) {
								row36 = fromLookup_row36;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row37" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow37 = false;
       		  	    	
       		  	    	
 							row37Struct row37ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row37HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row37HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row37.lookup( row37HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row37 != null && tHash_Lookup_row37.getCount(row37HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row37' and it contains more one result from keys :  row37.uuid = '" + row37HashKey.uuid + "'");
								} // G 071
							

							row37Struct row37 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row37Struct fromLookup_row37 = null;
							row37 = row37Default;
										 
							
								 
							
							
								if (tHash_Lookup_row37 !=null && tHash_Lookup_row37.hasNext()) { // G 099
								
							
								
								fromLookup_row37 = tHash_Lookup_row37.next();

							
							
								} // G 099
							
							

							if(fromLookup_row37 != null) {
								row37 = fromLookup_row37;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row38" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow38 = false;
       		  	    	
       		  	    	
 							row38Struct row38ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row38HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row38HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row38.lookup( row38HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row38 != null && tHash_Lookup_row38.getCount(row38HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row38' and it contains more one result from keys :  row38.uuid = '" + row38HashKey.uuid + "'");
								} // G 071
							

							row38Struct row38 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row38Struct fromLookup_row38 = null;
							row38 = row38Default;
										 
							
								 
							
							
								if (tHash_Lookup_row38 !=null && tHash_Lookup_row38.hasNext()) { // G 099
								
							
								
								fromLookup_row38 = tHash_Lookup_row38.next();

							
							
								} // G 099
							
							

							if(fromLookup_row38 != null) {
								row38 = fromLookup_row38;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row39" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow39 = false;
       		  	    	
       		  	    	
 							row39Struct row39ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row39HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row39HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row39.lookup( row39HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row39 != null && tHash_Lookup_row39.getCount(row39HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row39' and it contains more one result from keys :  row39.uuid = '" + row39HashKey.uuid + "'");
								} // G 071
							

							row39Struct row39 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row39Struct fromLookup_row39 = null;
							row39 = row39Default;
										 
							
								 
							
							
								if (tHash_Lookup_row39 !=null && tHash_Lookup_row39.hasNext()) { // G 099
								
							
								
								fromLookup_row39 = tHash_Lookup_row39.next();

							
							
								} // G 099
							
							

							if(fromLookup_row39 != null) {
								row39 = fromLookup_row39;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row40" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow40 = false;
       		  	    	
       		  	    	
 							row40Struct row40ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row40HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row40HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row40.lookup( row40HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row40 != null && tHash_Lookup_row40.getCount(row40HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row40' and it contains more one result from keys :  row40.uuid = '" + row40HashKey.uuid + "'");
								} // G 071
							

							row40Struct row40 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row40Struct fromLookup_row40 = null;
							row40 = row40Default;
										 
							
								 
							
							
								if (tHash_Lookup_row40 !=null && tHash_Lookup_row40.hasNext()) { // G 099
								
							
								
								fromLookup_row40 = tHash_Lookup_row40.next();

							
							
								} // G 099
							
							

							if(fromLookup_row40 != null) {
								row40 = fromLookup_row40;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row41" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow41 = false;
       		  	    	
       		  	    	
 							row41Struct row41ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row41HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row41HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row41.lookup( row41HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row41 != null && tHash_Lookup_row41.getCount(row41HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row41' and it contains more one result from keys :  row41.uuid = '" + row41HashKey.uuid + "'");
								} // G 071
							

							row41Struct row41 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row41Struct fromLookup_row41 = null;
							row41 = row41Default;
										 
							
								 
							
							
								if (tHash_Lookup_row41 !=null && tHash_Lookup_row41.hasNext()) { // G 099
								
							
								
								fromLookup_row41 = tHash_Lookup_row41.next();

							
							
								} // G 099
							
							

							if(fromLookup_row41 != null) {
								row41 = fromLookup_row41;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row42" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow42 = false;
       		  	    	
       		  	    	
 							row42Struct row42ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row42HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row42HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row42.lookup( row42HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row42 != null && tHash_Lookup_row42.getCount(row42HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row42' and it contains more one result from keys :  row42.uuid = '" + row42HashKey.uuid + "'");
								} // G 071
							

							row42Struct row42 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row42Struct fromLookup_row42 = null;
							row42 = row42Default;
										 
							
								 
							
							
								if (tHash_Lookup_row42 !=null && tHash_Lookup_row42.hasNext()) { // G 099
								
							
								
								fromLookup_row42 = tHash_Lookup_row42.next();

							
							
								} // G 099
							
							

							if(fromLookup_row42 != null) {
								row42 = fromLookup_row42;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row43" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow43 = false;
       		  	    	
       		  	    	
 							row43Struct row43ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row43HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row43HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row43.lookup( row43HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row43 != null && tHash_Lookup_row43.getCount(row43HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row43' and it contains more one result from keys :  row43.uuid = '" + row43HashKey.uuid + "'");
								} // G 071
							

							row43Struct row43 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row43Struct fromLookup_row43 = null;
							row43 = row43Default;
										 
							
								 
							
							
								if (tHash_Lookup_row43 !=null && tHash_Lookup_row43.hasNext()) { // G 099
								
							
								
								fromLookup_row43 = tHash_Lookup_row43.next();

							
							
								} // G 099
							
							

							if(fromLookup_row43 != null) {
								row43 = fromLookup_row43;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row44" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow44 = false;
       		  	    	
       		  	    	
 							row44Struct row44ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row44HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row44HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row44.lookup( row44HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row44 != null && tHash_Lookup_row44.getCount(row44HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row44' and it contains more one result from keys :  row44.uuid = '" + row44HashKey.uuid + "'");
								} // G 071
							

							row44Struct row44 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row44Struct fromLookup_row44 = null;
							row44 = row44Default;
										 
							
								 
							
							
								if (tHash_Lookup_row44 !=null && tHash_Lookup_row44.hasNext()) { // G 099
								
							
								
								fromLookup_row44 = tHash_Lookup_row44.next();

							
							
								} // G 099
							
							

							if(fromLookup_row44 != null) {
								row44 = fromLookup_row44;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row45" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow45 = false;
       		  	    	
       		  	    	
 							row45Struct row45ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row45HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row45HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row45.lookup( row45HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row45 != null && tHash_Lookup_row45.getCount(row45HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row45' and it contains more one result from keys :  row45.uuid = '" + row45HashKey.uuid + "'");
								} // G 071
							

							row45Struct row45 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row45Struct fromLookup_row45 = null;
							row45 = row45Default;
										 
							
								 
							
							
								if (tHash_Lookup_row45 !=null && tHash_Lookup_row45.hasNext()) { // G 099
								
							
								
								fromLookup_row45 = tHash_Lookup_row45.next();

							
							
								} // G 099
							
							

							if(fromLookup_row45 != null) {
								row45 = fromLookup_row45;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row49" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow49 = false;
       		  	    	
       		  	    	
 							row49Struct row49ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row49HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row49HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row49.lookup( row49HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row49 != null && tHash_Lookup_row49.getCount(row49HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row49' and it contains more one result from keys :  row49.uuid = '" + row49HashKey.uuid + "'");
								} // G 071
							

							row49Struct row49 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row49Struct fromLookup_row49 = null;
							row49 = row49Default;
										 
							
								 
							
							
								if (tHash_Lookup_row49 !=null && tHash_Lookup_row49.hasNext()) { // G 099
								
							
								
								fromLookup_row49 = tHash_Lookup_row49.next();

							
							
								} // G 099
							
							

							if(fromLookup_row49 != null) {
								row49 = fromLookup_row49;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row53" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow53 = false;
       		  	    	
       		  	    	
 							row53Struct row53ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		row53HashKey.uuid = row13.uuid ;
                        		    		

								
		                        	row53HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row53.lookup( row53HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row53 != null && tHash_Lookup_row53.getCount(row53HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row53' and it contains more one result from keys :  row53.uuid = '" + row53HashKey.uuid + "'");
								} // G 071
							

							row53Struct row53 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row53Struct fromLookup_row53 = null;
							row53 = row53Default;
										 
							
								 
							
							
								if (tHash_Lookup_row53 !=null && tHash_Lookup_row53.hasNext()) { // G 099
								
							
								
								fromLookup_row53 = tHash_Lookup_row53.next();

							
							
								} // G 099
							
							

							if(fromLookup_row53 != null) {
								row53 = fromLookup_row53;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

mapped = null;


// # Output table : 'mapped'
mapped_tmp.uuid = row13.uuid ;
mapped_tmp.dataset_id = row13.obsValue ;
mapped_tmp.datestamp = row53.obsValue ;
mapped_tmp.crs = row14.obsValue ;
mapped_tmp.title = row15.obsValue ;
mapped_tmp.edition = row16.obsValue ;
mapped_tmp.abstracts = row17.obsValue ;
mapped_tmp.custodian = row18.obsValue ;
mapped_tmp.inspire_themes = row33.obsValue ;
mapped_tmp.gemet_concepts = row32.obsValue ;
mapped_tmp.wlon = row20.obsValue ;
mapped_tmp.elon = row21.obsValue ;
mapped_tmp.slat = row22.obsValue ;
mapped_tmp.nlat = row23.obsValue ;
mapped_tmp.stype = row24.obsValue ;
mapped_tmp.scaleres = StringHandling.LEN(row26.obsValue) == -1 ? (StringHandling.LEN(row25.obsValue) != -1 ? "1:" + row25.obsValue : "") : (row26.obsValue + 

(row31.obsValue.indexOf("#") == -1 ? row31.obsValue : StringHandling.RIGHT(row31.obsValue,StringHandling.LEN(row31.obsValue) - StringHandling.INDEX(row31.obsValue,"#") - 1)  )

) ;
mapped_tmp.tbegin = StringHandling.LEFT(StringHandling.LEN(row27.obsValue) != -1 ? row27.obsValue : row28.obsValue, 10) ;
mapped_tmp.tend = StringHandling.LEFT(StringHandling.LEN(row29.obsValue) != -1 ? row29.obsValue : row30.obsValue , 10) ;
mapped_tmp.protocols = row34.obsValue ;
mapped_tmp.links = null;
mapped_tmp.lineage = row44.obsValue ;
mapped_tmp.data_src = null;
mapped_tmp.published = row45.obsValue.contains("publication") ? "TRUE" : "FALSE" ;
mapped_tmp.sdiurl = row49.realURL ;
mapped_tmp.distributionFormat = row42.obsValue ;
mapped_tmp.place = row35.obsValue ;
mapped_tmp.useLimitation = row43.obsValue ;
mapped_tmp.browseGraphic = row19.obsValue ;
mapped_tmp.shortname = row38.obsValue ;
mapped_tmp.referenceFlag = row45.obsValue.contains("Y") ? "TRUE" : "FALSE" ;
mapped_tmp.wms = row37.obsValue ;
mapped_tmp.idpTopics = row40.obsValue ;
mapped_tmp.restApi = row36.obsValue ;
mapped_tmp.status = row41.obsValue ;
mapped = mapped_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
// Start of branch "mapped"
if(mapped != null) { 



	
	/**
	 * [tReplicate_2 main ] start
	 */

	

	
	
	currentComponent="tReplicate_2";

	

			//mapped
			//mapped


			
				if(execStat){
					runStat.updateStatOnConnection("mapped"+iterateId,1, 1);
				} 
			

		


	row52 = new row52Struct();
						
	row52.uuid = mapped.uuid;								
	row52.dataset_id = mapped.dataset_id;								
	row52.datestamp = mapped.datestamp;								
	row52.crs = mapped.crs;								
	row52.title = mapped.title;								
	row52.edition = mapped.edition;								
	row52.abstracts = mapped.abstracts;								
	row52.custodian = mapped.custodian;								
	row52.inspire_themes = mapped.inspire_themes;								
	row52.gemet_concepts = mapped.gemet_concepts;								
	row52.wlon = mapped.wlon;								
	row52.elon = mapped.elon;								
	row52.slat = mapped.slat;								
	row52.nlat = mapped.nlat;								
	row52.stype = mapped.stype;								
	row52.scaleres = mapped.scaleres;								
	row52.tbegin = mapped.tbegin;								
	row52.tend = mapped.tend;								
	row52.protocols = mapped.protocols;								
	row52.links = mapped.links;								
	row52.lineage = mapped.lineage;								
	row52.data_src = mapped.data_src;								
	row52.published = mapped.published;								
	row52.sdiurl = mapped.sdiurl;								
	row52.distributionFormat = mapped.distributionFormat;								
	row52.place = mapped.place;								
	row52.useLimitation = mapped.useLimitation;								
	row52.browseGraphic = mapped.browseGraphic;								
	row52.shortname = mapped.shortname;								
	row52.referenceFlag = mapped.referenceFlag;								
	row52.wms = mapped.wms;								
	row52.idpTopics = mapped.idpTopics;								
	row52.restApi = mapped.restApi;								
	row52.status = mapped.status;			
	row51 = new row51Struct();
						
	row51.uuid = mapped.uuid;								
	row51.dataset_id = mapped.dataset_id;								
	row51.datestamp = mapped.datestamp;								
	row51.crs = mapped.crs;								
	row51.title = mapped.title;								
	row51.edition = mapped.edition;								
	row51.abstracts = mapped.abstracts;								
	row51.custodian = mapped.custodian;								
	row51.inspire_themes = mapped.inspire_themes;								
	row51.gemet_concepts = mapped.gemet_concepts;								
	row51.wlon = mapped.wlon;								
	row51.elon = mapped.elon;								
	row51.slat = mapped.slat;								
	row51.nlat = mapped.nlat;								
	row51.stype = mapped.stype;								
	row51.scaleres = mapped.scaleres;								
	row51.tbegin = mapped.tbegin;								
	row51.tend = mapped.tend;								
	row51.protocols = mapped.protocols;								
	row51.links = mapped.links;								
	row51.lineage = mapped.lineage;								
	row51.data_src = mapped.data_src;								
	row51.published = mapped.published;								
	row51.sdiurl = mapped.sdiurl;								
	row51.distributionFormat = mapped.distributionFormat;								
	row51.place = mapped.place;								
	row51.useLimitation = mapped.useLimitation;								
	row51.browseGraphic = mapped.browseGraphic;								
	row51.shortname = mapped.shortname;								
	row51.referenceFlag = mapped.referenceFlag;								
	row51.wms = mapped.wms;								
	row51.idpTopics = mapped.idpTopics;								
	row51.restApi = mapped.restApi;								
	row51.status = mapped.status;			
	row54 = new row54Struct();
						
	row54.uuid = mapped.uuid;								
	row54.dataset_id = mapped.dataset_id;								
	row54.datestamp = mapped.datestamp;								
	row54.crs = mapped.crs;								
	row54.title = mapped.title;								
	row54.edition = mapped.edition;								
	row54.abstracts = mapped.abstracts;								
	row54.custodian = mapped.custodian;								
	row54.inspire_themes = mapped.inspire_themes;								
	row54.gemet_concepts = mapped.gemet_concepts;								
	row54.wlon = mapped.wlon;								
	row54.elon = mapped.elon;								
	row54.slat = mapped.slat;								
	row54.nlat = mapped.nlat;								
	row54.stype = mapped.stype;								
	row54.scaleres = mapped.scaleres;								
	row54.tbegin = mapped.tbegin;								
	row54.tend = mapped.tend;								
	row54.protocols = mapped.protocols;								
	row54.links = mapped.links;								
	row54.lineage = mapped.lineage;								
	row54.data_src = mapped.data_src;								
	row54.published = mapped.published;								
	row54.sdiurl = mapped.sdiurl;								
	row54.distributionFormat = mapped.distributionFormat;								
	row54.place = mapped.place;								
	row54.useLimitation = mapped.useLimitation;								
	row54.browseGraphic = mapped.browseGraphic;								
	row54.shortname = mapped.shortname;								
	row54.referenceFlag = mapped.referenceFlag;								
	row54.wms = mapped.wms;								
	row54.idpTopics = mapped.idpTopics;								
	row54.restApi = mapped.restApi;								
	row54.status = mapped.status;			


 


	tos_count_tReplicate_2++;

/**
 * [tReplicate_2 main ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

			//row52
			//row52


			
				if(execStat){
					runStat.updateStatOnConnection("row52"+iterateId,1, 1);
				} 
			

		


                        String[] rowtFileOutputDelimited_2=new String[34];
                            rowtFileOutputDelimited_2[0]=row52.uuid == null ? null : row52.uuid;
                            rowtFileOutputDelimited_2[1]=row52.dataset_id == null ? null : row52.dataset_id;
                            rowtFileOutputDelimited_2[2]=row52.datestamp == null ? null : row52.datestamp;
                            rowtFileOutputDelimited_2[3]=row52.crs == null ? null : row52.crs;
                            rowtFileOutputDelimited_2[4]=row52.title == null ? null : row52.title;
                            rowtFileOutputDelimited_2[5]=row52.edition == null ? null : row52.edition;
                            rowtFileOutputDelimited_2[6]=row52.abstracts == null ? null : row52.abstracts;
                            rowtFileOutputDelimited_2[7]=row52.custodian == null ? null : row52.custodian;
                            rowtFileOutputDelimited_2[8]=row52.inspire_themes == null ? null : row52.inspire_themes;
                            rowtFileOutputDelimited_2[9]=row52.gemet_concepts == null ? null : row52.gemet_concepts;
                            rowtFileOutputDelimited_2[10]=row52.wlon == null ? null : row52.wlon;
                            rowtFileOutputDelimited_2[11]=row52.elon == null ? null : row52.elon;
                            rowtFileOutputDelimited_2[12]=row52.slat == null ? null : row52.slat;
                            rowtFileOutputDelimited_2[13]=row52.nlat == null ? null : row52.nlat;
                            rowtFileOutputDelimited_2[14]=row52.stype == null ? null : row52.stype;
                            rowtFileOutputDelimited_2[15]=row52.scaleres == null ? null : row52.scaleres;
                            rowtFileOutputDelimited_2[16]=row52.tbegin == null ? null : row52.tbegin;
                            rowtFileOutputDelimited_2[17]=row52.tend == null ? null : row52.tend;
                            rowtFileOutputDelimited_2[18]=row52.protocols == null ? null : row52.protocols;
                            rowtFileOutputDelimited_2[19]=row52.links == null ? null : row52.links;
                            rowtFileOutputDelimited_2[20]=row52.lineage == null ? null : row52.lineage;
                            rowtFileOutputDelimited_2[21]=row52.data_src == null ? null : row52.data_src;
                            rowtFileOutputDelimited_2[22]=row52.published == null ? null : row52.published;
                            rowtFileOutputDelimited_2[23]=row52.sdiurl == null ? null : row52.sdiurl;
                            rowtFileOutputDelimited_2[24]=row52.distributionFormat == null ? null : row52.distributionFormat;
                            rowtFileOutputDelimited_2[25]=row52.place == null ? null : row52.place;
                            rowtFileOutputDelimited_2[26]=row52.useLimitation == null ? null : row52.useLimitation;
                            rowtFileOutputDelimited_2[27]=row52.browseGraphic == null ? null : row52.browseGraphic;
                            rowtFileOutputDelimited_2[28]=row52.shortname == null ? null : row52.shortname;
                            rowtFileOutputDelimited_2[29]=row52.referenceFlag == null ? null : row52.referenceFlag;
                            rowtFileOutputDelimited_2[30]=row52.wms == null ? null : row52.wms;
                            rowtFileOutputDelimited_2[31]=row52.idpTopics == null ? null : row52.idpTopics;
                            rowtFileOutputDelimited_2[32]=row52.restApi == null ? null : row52.restApi;
                            rowtFileOutputDelimited_2[33]=row52.status == null ? null : row52.status;
                nb_line_tFileOutputDelimited_2++;
                resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);
                                       CsvWritertFileOutputDelimited_2.writeNext(rowtFileOutputDelimited_2);




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */




	
	/**
	 * [tFileOutputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

			//row51
			//row51


			
				if(execStat){
					runStat.updateStatOnConnection("row51"+iterateId,1, 1);
				} 
			

		

				xlsxTool_tFileOutputExcel_1.addRow();
									   				
	    				if(row51.uuid != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.uuid));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.dataset_id != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.dataset_id));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.datestamp != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.datestamp));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.crs != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.crs));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.title != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.title));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.edition != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.edition));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.abstracts != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.abstracts));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.custodian != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.custodian));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.inspire_themes != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.inspire_themes));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.gemet_concepts != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.gemet_concepts));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.wlon != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.wlon));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.elon != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.elon));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.slat != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.slat));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.nlat != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.nlat));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.stype != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.stype));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.scaleres != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.scaleres));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.tbegin != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.tbegin));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.tend != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.tend));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.protocols != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.protocols));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.links != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.links));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.lineage != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.lineage));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.data_src != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.data_src));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.published != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.published));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.sdiurl != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.sdiurl));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.distributionFormat != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.distributionFormat));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.place != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.place));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.useLimitation != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.useLimitation));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.browseGraphic != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.browseGraphic));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.shortname != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.shortname));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.referenceFlag != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.referenceFlag));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.wms != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.wms));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.idpTopics != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.idpTopics));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.restApi != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.restApi));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row51.status != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row51.status));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_1++;
				
 


	tos_count_tFileOutputExcel_1++;

/**
 * [tFileOutputExcel_1 main ] stop
 */




	
	/**
	 * [tSQLiteOutput_5 main ] start
	 */

	

	
	
	currentComponent="tSQLiteOutput_5";

	

			//row54
			//row54


			
				if(execStat){
					runStat.updateStatOnConnection("row54"+iterateId,1, 1);
				} 
			

		
	



        whetherReject_tSQLiteOutput_5 = false;
                    if(row54.uuid == null) {
pstmt_tSQLiteOutput_5.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(1, row54.uuid);
}

                    if(row54.dataset_id == null) {
pstmt_tSQLiteOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(2, row54.dataset_id);
}

                    if(row54.datestamp == null) {
pstmt_tSQLiteOutput_5.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(3, row54.datestamp);
}

                    if(row54.crs == null) {
pstmt_tSQLiteOutput_5.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(4, row54.crs);
}

                    if(row54.title == null) {
pstmt_tSQLiteOutput_5.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(5, row54.title);
}

                    if(row54.edition == null) {
pstmt_tSQLiteOutput_5.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(6, row54.edition);
}

                    if(row54.abstracts == null) {
pstmt_tSQLiteOutput_5.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(7, row54.abstracts);
}

                    if(row54.custodian == null) {
pstmt_tSQLiteOutput_5.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(8, row54.custodian);
}

                    if(row54.inspire_themes == null) {
pstmt_tSQLiteOutput_5.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(9, row54.inspire_themes);
}

                    if(row54.gemet_concepts == null) {
pstmt_tSQLiteOutput_5.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(10, row54.gemet_concepts);
}

                    if(row54.wlon == null) {
pstmt_tSQLiteOutput_5.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(11, row54.wlon);
}

                    if(row54.elon == null) {
pstmt_tSQLiteOutput_5.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(12, row54.elon);
}

                    if(row54.slat == null) {
pstmt_tSQLiteOutput_5.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(13, row54.slat);
}

                    if(row54.nlat == null) {
pstmt_tSQLiteOutput_5.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(14, row54.nlat);
}

                    if(row54.stype == null) {
pstmt_tSQLiteOutput_5.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(15, row54.stype);
}

                    if(row54.scaleres == null) {
pstmt_tSQLiteOutput_5.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(16, row54.scaleres);
}

                    if(row54.tbegin == null) {
pstmt_tSQLiteOutput_5.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(17, row54.tbegin);
}

                    if(row54.tend == null) {
pstmt_tSQLiteOutput_5.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(18, row54.tend);
}

                    if(row54.protocols == null) {
pstmt_tSQLiteOutput_5.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(19, row54.protocols);
}

                    if(row54.links == null) {
pstmt_tSQLiteOutput_5.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(20, row54.links);
}

                    if(row54.lineage == null) {
pstmt_tSQLiteOutput_5.setNull(21, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(21, row54.lineage);
}

                    if(row54.data_src == null) {
pstmt_tSQLiteOutput_5.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(22, row54.data_src);
}

                    if(row54.published == null) {
pstmt_tSQLiteOutput_5.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(23, row54.published);
}

                    if(row54.sdiurl == null) {
pstmt_tSQLiteOutput_5.setNull(24, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(24, row54.sdiurl);
}

                    if(row54.distributionFormat == null) {
pstmt_tSQLiteOutput_5.setNull(25, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(25, row54.distributionFormat);
}

                    if(row54.place == null) {
pstmt_tSQLiteOutput_5.setNull(26, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(26, row54.place);
}

                    if(row54.useLimitation == null) {
pstmt_tSQLiteOutput_5.setNull(27, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(27, row54.useLimitation);
}

                    if(row54.browseGraphic == null) {
pstmt_tSQLiteOutput_5.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(28, row54.browseGraphic);
}

                    if(row54.shortname == null) {
pstmt_tSQLiteOutput_5.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(29, row54.shortname);
}

                    if(row54.referenceFlag == null) {
pstmt_tSQLiteOutput_5.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(30, row54.referenceFlag);
}

                    if(row54.wms == null) {
pstmt_tSQLiteOutput_5.setNull(31, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(31, row54.wms);
}

                    if(row54.idpTopics == null) {
pstmt_tSQLiteOutput_5.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(32, row54.idpTopics);
}

                    if(row54.restApi == null) {
pstmt_tSQLiteOutput_5.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(33, row54.restApi);
}

                    if(row54.status == null) {
pstmt_tSQLiteOutput_5.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_5.setString(34, row54.status);
}


                       pstmt_tSQLiteOutput_5.addBatch();
                       batchSizeCounter_tSQLiteOutput_5++;
                       nb_line_tSQLiteOutput_5++;
                if ((batchSize_tSQLiteOutput_5 > 0) && (batchSize_tSQLiteOutput_5 <= batchSizeCounter_tSQLiteOutput_5)) {
                    int[] status_tSQLiteOutput_5 = null;
                    int countSum_tSQLiteOutput_5 = 0;
                    try {
                        batchSizeCounter_tSQLiteOutput_5 = 0;
                        status_tSQLiteOutput_5 = pstmt_tSQLiteOutput_5.executeBatch();
                        for(int countEach_tSQLiteOutput_5: status_tSQLiteOutput_5) {
                            countSum_tSQLiteOutput_5 += (countEach_tSQLiteOutput_5 < 0 ? 0 : countEach_tSQLiteOutput_5);
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tSQLiteOutput_5: e.getUpdateCounts()) {
                            countSum_tSQLiteOutput_5 += (countEach_tSQLiteOutput_5 < 0 ? 0 : countEach_tSQLiteOutput_5);
                        }
                        System.err.println(e.getMessage());
                    }
                    try {
                        tmp_batchUpdateCount_tSQLiteOutput_5 = pstmt_tSQLiteOutput_5.getUpdateCount();
                    }catch (java.sql.SQLException e){
                        System.err.println(e.getMessage());
                    }
                    tmp_batchUpdateCount_tSQLiteOutput_5 = tmp_batchUpdateCount_tSQLiteOutput_5 > countSum_tSQLiteOutput_5 ? tmp_batchUpdateCount_tSQLiteOutput_5 : countSum_tSQLiteOutput_5;
                        insertedCount_tSQLiteOutput_5 += tmp_batchUpdateCount_tSQLiteOutput_5;
               }
                commitCounter_tSQLiteOutput_5++;
                if(commitEvery_tSQLiteOutput_5 <= commitCounter_tSQLiteOutput_5) {
                try {
                    if (batchSizeCounter_tSQLiteOutput_5 > 0) {
	                    int countSum_tSQLiteOutput_5 = 0;
	                    
	                    for(int countEach_tSQLiteOutput_5: pstmt_tSQLiteOutput_5.executeBatch()) {
	                        countSum_tSQLiteOutput_5 += (countEach_tSQLiteOutput_5 < 0 ? 0 : countEach_tSQLiteOutput_5);
	                    }
	                    
	                    
	                        insertedCount_tSQLiteOutput_5 += countSum_tSQLiteOutput_5;
	                    
	                    batchSizeCounter_tSQLiteOutput_5 = 0;
                    }
                }catch (java.sql.BatchUpdateException e){
                        int countSum_tSQLiteOutput_5 = 0;
                        for(int countEach_tSQLiteOutput_5: e.getUpdateCounts()) {
                            countSum_tSQLiteOutput_5 += (countEach_tSQLiteOutput_5 < 0 ? 0 : countEach_tSQLiteOutput_5);
                        }
                            insertedCount_tSQLiteOutput_5 += countSum_tSQLiteOutput_5;
                        System.err.println(e.getMessage());
                }
                
                conn_tSQLiteOutput_5.commit();
                commitCounter_tSQLiteOutput_5=0;
            }

 


	tos_count_tSQLiteOutput_5++;

/**
 * [tSQLiteOutput_5 main ] stop
 */




} // End of branch "mapped"







	
	/**
	 * [tSQLiteInput_1 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_1";

	

	}
}finally{
	stmt_tSQLiteInput_1.close();

		if(conn_tSQLiteInput_1 != null && !conn_tSQLiteInput_1.isClosed()) {
			
			conn_tSQLiteInput_1.close();
			
		}
}
globalMap.put("tSQLiteInput_1_NB_LINE",nb_line_tSQLiteInput_1);

 

ok_Hash.put("tSQLiteInput_1", true);
end_Hash.put("tSQLiteInput_1", System.currentTimeMillis());




/**
 * [tSQLiteInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row14 != null) {
						tHash_Lookup_row14.endGet();
					}
					globalMap.remove( "tHash_Lookup_row14" );

					
					
				
					if(tHash_Lookup_row15 != null) {
						tHash_Lookup_row15.endGet();
					}
					globalMap.remove( "tHash_Lookup_row15" );

					
					
				
					if(tHash_Lookup_row16 != null) {
						tHash_Lookup_row16.endGet();
					}
					globalMap.remove( "tHash_Lookup_row16" );

					
					
				
					if(tHash_Lookup_row17 != null) {
						tHash_Lookup_row17.endGet();
					}
					globalMap.remove( "tHash_Lookup_row17" );

					
					
				
					if(tHash_Lookup_row18 != null) {
						tHash_Lookup_row18.endGet();
					}
					globalMap.remove( "tHash_Lookup_row18" );

					
					
				
					if(tHash_Lookup_row19 != null) {
						tHash_Lookup_row19.endGet();
					}
					globalMap.remove( "tHash_Lookup_row19" );

					
					
				
					if(tHash_Lookup_row20 != null) {
						tHash_Lookup_row20.endGet();
					}
					globalMap.remove( "tHash_Lookup_row20" );

					
					
				
					if(tHash_Lookup_row21 != null) {
						tHash_Lookup_row21.endGet();
					}
					globalMap.remove( "tHash_Lookup_row21" );

					
					
				
					if(tHash_Lookup_row22 != null) {
						tHash_Lookup_row22.endGet();
					}
					globalMap.remove( "tHash_Lookup_row22" );

					
					
				
					if(tHash_Lookup_row23 != null) {
						tHash_Lookup_row23.endGet();
					}
					globalMap.remove( "tHash_Lookup_row23" );

					
					
				
					if(tHash_Lookup_row24 != null) {
						tHash_Lookup_row24.endGet();
					}
					globalMap.remove( "tHash_Lookup_row24" );

					
					
				
					if(tHash_Lookup_row25 != null) {
						tHash_Lookup_row25.endGet();
					}
					globalMap.remove( "tHash_Lookup_row25" );

					
					
				
					if(tHash_Lookup_row26 != null) {
						tHash_Lookup_row26.endGet();
					}
					globalMap.remove( "tHash_Lookup_row26" );

					
					
				
					if(tHash_Lookup_row27 != null) {
						tHash_Lookup_row27.endGet();
					}
					globalMap.remove( "tHash_Lookup_row27" );

					
					
				
					if(tHash_Lookup_row28 != null) {
						tHash_Lookup_row28.endGet();
					}
					globalMap.remove( "tHash_Lookup_row28" );

					
					
				
					if(tHash_Lookup_row29 != null) {
						tHash_Lookup_row29.endGet();
					}
					globalMap.remove( "tHash_Lookup_row29" );

					
					
				
					if(tHash_Lookup_row30 != null) {
						tHash_Lookup_row30.endGet();
					}
					globalMap.remove( "tHash_Lookup_row30" );

					
					
				
					if(tHash_Lookup_row31 != null) {
						tHash_Lookup_row31.endGet();
					}
					globalMap.remove( "tHash_Lookup_row31" );

					
					
				
					if(tHash_Lookup_row32 != null) {
						tHash_Lookup_row32.endGet();
					}
					globalMap.remove( "tHash_Lookup_row32" );

					
					
				
					if(tHash_Lookup_row33 != null) {
						tHash_Lookup_row33.endGet();
					}
					globalMap.remove( "tHash_Lookup_row33" );

					
					
				
					if(tHash_Lookup_row34 != null) {
						tHash_Lookup_row34.endGet();
					}
					globalMap.remove( "tHash_Lookup_row34" );

					
					
				
					if(tHash_Lookup_row35 != null) {
						tHash_Lookup_row35.endGet();
					}
					globalMap.remove( "tHash_Lookup_row35" );

					
					
				
					if(tHash_Lookup_row36 != null) {
						tHash_Lookup_row36.endGet();
					}
					globalMap.remove( "tHash_Lookup_row36" );

					
					
				
					if(tHash_Lookup_row37 != null) {
						tHash_Lookup_row37.endGet();
					}
					globalMap.remove( "tHash_Lookup_row37" );

					
					
				
					if(tHash_Lookup_row38 != null) {
						tHash_Lookup_row38.endGet();
					}
					globalMap.remove( "tHash_Lookup_row38" );

					
					
				
					if(tHash_Lookup_row39 != null) {
						tHash_Lookup_row39.endGet();
					}
					globalMap.remove( "tHash_Lookup_row39" );

					
					
				
					if(tHash_Lookup_row40 != null) {
						tHash_Lookup_row40.endGet();
					}
					globalMap.remove( "tHash_Lookup_row40" );

					
					
				
					if(tHash_Lookup_row41 != null) {
						tHash_Lookup_row41.endGet();
					}
					globalMap.remove( "tHash_Lookup_row41" );

					
					
				
					if(tHash_Lookup_row42 != null) {
						tHash_Lookup_row42.endGet();
					}
					globalMap.remove( "tHash_Lookup_row42" );

					
					
				
					if(tHash_Lookup_row43 != null) {
						tHash_Lookup_row43.endGet();
					}
					globalMap.remove( "tHash_Lookup_row43" );

					
					
				
					if(tHash_Lookup_row44 != null) {
						tHash_Lookup_row44.endGet();
					}
					globalMap.remove( "tHash_Lookup_row44" );

					
					
				
					if(tHash_Lookup_row45 != null) {
						tHash_Lookup_row45.endGet();
					}
					globalMap.remove( "tHash_Lookup_row45" );

					
					
				
					if(tHash_Lookup_row49 != null) {
						tHash_Lookup_row49.endGet();
					}
					globalMap.remove( "tHash_Lookup_row49" );

					
					
				
					if(tHash_Lookup_row53 != null) {
						tHash_Lookup_row53.endGet();
					}
					globalMap.remove( "tHash_Lookup_row53" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row13"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tReplicate_2 end ] start
	 */

	

	
	
	currentComponent="tReplicate_2";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("mapped"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tReplicate_2", true);
end_Hash.put("tReplicate_2", System.currentTimeMillis());




/**
 * [tReplicate_2 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_2!=null) {
				    	CsvWritertFileOutputDelimited_2.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row52"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */




	
	/**
	 * [tFileOutputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

	
	
	
			xlsxTool_tFileOutputExcel_1.writeExcel(fileName_tFileOutputExcel_1,true);
	
		
			nb_line_tFileOutputExcel_1 = nb_line_tFileOutputExcel_1 -1;
		
		globalMap.put("tFileOutputExcel_1_NB_LINE",nb_line_tFileOutputExcel_1);
		
		

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row51"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFileOutputExcel_1", true);
end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());




/**
 * [tFileOutputExcel_1 end ] stop
 */




	
	/**
	 * [tSQLiteOutput_5 end ] start
	 */

	

	
	
	currentComponent="tSQLiteOutput_5";

	




                    int[] status_tSQLiteOutput_5 = null;
                    int countSum_tSQLiteOutput_5 = 0;
                    try {
                        if(pstmt_tSQLiteOutput_5!=null && batchSizeCounter_tSQLiteOutput_5 > 0 ){
                            status_tSQLiteOutput_5 = pstmt_tSQLiteOutput_5.executeBatch();
                            for(int countEach_tSQLiteOutput_5: status_tSQLiteOutput_5) {
                                countSum_tSQLiteOutput_5 += (countEach_tSQLiteOutput_5 < 0 ? 0 : countEach_tSQLiteOutput_5);
                            }
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tSQLiteOutput_5: e.getUpdateCounts()) {
                            countSum_tSQLiteOutput_5 += (countEach_tSQLiteOutput_5 < 0 ? 0 : countEach_tSQLiteOutput_5);
                        }
                        System.err.println(e.getMessage());
                    }
                    if(pstmt_tSQLiteOutput_5!=null && batchSizeCounter_tSQLiteOutput_5 > 0 ){
                        try {
                            tmp_batchUpdateCount_tSQLiteOutput_5 = pstmt_tSQLiteOutput_5.getUpdateCount();
                        }catch (java.sql.SQLException e){

                        }
                        tmp_batchUpdateCount_tSQLiteOutput_5 = tmp_batchUpdateCount_tSQLiteOutput_5 > countSum_tSQLiteOutput_5 ? tmp_batchUpdateCount_tSQLiteOutput_5 : countSum_tSQLiteOutput_5;
                            insertedCount_tSQLiteOutput_5 += tmp_batchUpdateCount_tSQLiteOutput_5;
                    }
                    if(pstmt_tSQLiteOutput_5 != null) {
                        pstmt_tSQLiteOutput_5.close();
                    }

        if (commitCounter_tSQLiteOutput_5 > 0) {
            conn_tSQLiteOutput_5.commit();
        }
        conn_tSQLiteOutput_5 .close();
		resourceMap.put("finish_tSQLiteOutput_5", true);

	int rejectedCount_tSQLiteOutput_5 = 0;
	nb_line_deleted_tSQLiteOutput_5=nb_line_deleted_tSQLiteOutput_5+ deletedCount_tSQLiteOutput_5;
	nb_line_update_tSQLiteOutput_5=nb_line_update_tSQLiteOutput_5 + updatedCount_tSQLiteOutput_5;
	nb_line_inserted_tSQLiteOutput_5=nb_line_inserted_tSQLiteOutput_5 + insertedCount_tSQLiteOutput_5;
	nb_line_rejected_tSQLiteOutput_5=nb_line_rejected_tSQLiteOutput_5 + rejectedCount_tSQLiteOutput_5;
	
        globalMap.put("tSQLiteOutput_5_NB_LINE",nb_line_tSQLiteOutput_5);
        globalMap.put("tSQLiteOutput_5_NB_LINE_UPDATED",nb_line_update_tSQLiteOutput_5);
        globalMap.put("tSQLiteOutput_5_NB_LINE_INSERTED",nb_line_inserted_tSQLiteOutput_5);
        globalMap.put("tSQLiteOutput_5_NB_LINE_DELETED",nb_line_deleted_tSQLiteOutput_5);
        globalMap.put("tSQLiteOutput_5_NB_LINE_REJECTED", nb_line_rejected_tSQLiteOutput_5);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row54"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tSQLiteOutput_5", true);
end_Hash.put("tSQLiteOutput_5", System.currentTimeMillis());




/**
 * [tSQLiteOutput_5 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row14"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row15"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row16"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row17"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row18"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row19"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row20"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row21"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row22"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row23"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row24"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row25"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row26"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row27"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row28"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row29"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row30"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row31"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row32"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row33"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row34"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row35"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row36"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row37"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row38"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row39"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row40"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row41"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row42"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row43"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row44"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row45"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row49"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row53"); 
				     			
				try{
					
	
	/**
	 * [tSQLiteInput_1 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_1";

	

 



/**
 * [tSQLiteInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tReplicate_2 finally ] start
	 */

	

	
	
	currentComponent="tReplicate_2";

	

 



/**
 * [tReplicate_2 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_2 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_2");
					
						if(CsvWritertFileOutputDelimited_2!=null) {
					    	CsvWritertFileOutputDelimited_2.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */




	
	/**
	 * [tFileOutputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 finally ] stop
 */




	
	/**
	 * [tSQLiteOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteOutput_5";

	



	
		if(resourceMap.get("finish_tSQLiteOutput_5")==null){
			if(resourceMap.get("conn_tSQLiteOutput_5")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tSQLiteOutput_5")).close();
					
				} catch (java.sql.SQLException sqlEx_tSQLiteOutput_5) {
					String errorMessage_tSQLiteOutput_5 = "failed to close the connection in tSQLiteOutput_5 :" + sqlEx_tSQLiteOutput_5.getMessage();
					
					System.err.println(errorMessage_tSQLiteOutput_5);
				}
			}
		}
	

 



/**
 * [tSQLiteOutput_5 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row14Struct implements routines.system.IPersistableComparableLookupRow<row14Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row14Struct other = (row14Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row14Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            
	}

	public void copyKeysDataTo(row14Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row14Struct row14 = new row14Struct();




	
	/**
	 * [tAdvancedHash_row14 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row14", false);
		start_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row14";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row14" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row14 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row14{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row14().limitLog4jByte();

			   		// connection name:row14
			   		// source node:tSQLiteInput_2 - inputs:(after_tSQLiteInput_1) outputs:(row14,row14) | target node:tAdvancedHash_row14 - inputs:(row14) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row14 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row14Struct>getLookup(matchingModeEnum_row14);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row14", tHash_Lookup_row14);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row14 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_2", false);
		start_Hash.put("tSQLiteInput_2", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_2";

	
		int tos_count_tSQLiteInput_2 = 0;
		
    	class BytesLimit65535_tSQLiteInput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_2().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_2 = 0;
		    java.sql.Connection conn_tSQLiteInput_2 = null;
			    String driverClass_tSQLiteInput_2 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_2);
				
			String url_tSQLiteInput_2 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_2 = java.sql.DriverManager.getConnection(url_tSQLiteInput_2);
		    
			java.sql.Statement stmt_tSQLiteInput_2 = conn_tSQLiteInput_2.createStatement();

		    String dbquery_tSQLiteInput_2 = "SELECT CRS.uuid,\n		CRS.obsValue\nFROM	CRS";
			

                       globalMap.put("tSQLiteInput_2_QUERY",dbquery_tSQLiteInput_2);

		    java.sql.ResultSet rs_tSQLiteInput_2 = null;
		try{
		    rs_tSQLiteInput_2 = stmt_tSQLiteInput_2.executeQuery(dbquery_tSQLiteInput_2);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_2 = rs_tSQLiteInput_2.getMetaData();
		    int colQtyInRs_tSQLiteInput_2 = rsmd_tSQLiteInput_2.getColumnCount();

		    String tmpContent_tSQLiteInput_2 = null;
		    
		    
		    while (rs_tSQLiteInput_2.next()) {
		        nb_line_tSQLiteInput_2++;
		        
							if(colQtyInRs_tSQLiteInput_2 < 1) {
								row14.uuid = null;
							} else {
	                         		
        	row14.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_2, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_2 < 2) {
								row14.obsValue = null;
							} else {
	                         		
        	row14.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_2, 2, false);
		                    }
					



 



/**
 * [tSQLiteInput_2 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_2 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_2";

	

 


	tos_count_tSQLiteInput_2++;

/**
 * [tSQLiteInput_2 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";

	

			//row14
			//row14


			
				if(execStat){
					runStat.updateStatOnConnection("row14"+iterateId,1, 1);
				} 
			

		


			   
			   

					row14Struct row14_HashRow = new row14Struct();
		   	   	   
				
				row14_HashRow.uuid = row14.uuid;
				
				row14_HashRow.obsValue = row14.obsValue;
				
			tHash_Lookup_row14.put(row14_HashRow);
			
            




 


	tos_count_tAdvancedHash_row14++;

/**
 * [tAdvancedHash_row14 main ] stop
 */



	
	/**
	 * [tSQLiteInput_2 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_2";

	

	}
}finally{
	stmt_tSQLiteInput_2.close();

		if(conn_tSQLiteInput_2 != null && !conn_tSQLiteInput_2.isClosed()) {
			
			conn_tSQLiteInput_2.close();
			
		}
}
globalMap.put("tSQLiteInput_2_NB_LINE",nb_line_tSQLiteInput_2);

 

ok_Hash.put("tSQLiteInput_2", true);
end_Hash.put("tSQLiteInput_2", System.currentTimeMillis());




/**
 * [tSQLiteInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";

	

tHash_Lookup_row14.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row14"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row14", true);
end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());




/**
 * [tAdvancedHash_row14 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_2 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_2";

	

 



/**
 * [tSQLiteInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";

	

 



/**
 * [tAdvancedHash_row14 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row15Struct implements routines.system.IPersistableComparableLookupRow<row15Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row15Struct other = (row15Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row15Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            
	}

	public void copyKeysDataTo(row15Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row15Struct row15 = new row15Struct();




	
	/**
	 * [tAdvancedHash_row15 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row15", false);
		start_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row15";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row15" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row15 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row15{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row15().limitLog4jByte();

			   		// connection name:row15
			   		// source node:tSQLiteInput_3 - inputs:(after_tSQLiteInput_1) outputs:(row15,row15) | target node:tAdvancedHash_row15 - inputs:(row15) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row15 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row15Struct>getLookup(matchingModeEnum_row15);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row15", tHash_Lookup_row15);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row15 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_3", false);
		start_Hash.put("tSQLiteInput_3", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_3";

	
		int tos_count_tSQLiteInput_3 = 0;
		
    	class BytesLimit65535_tSQLiteInput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_3().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_3 = 0;
		    java.sql.Connection conn_tSQLiteInput_3 = null;
			    String driverClass_tSQLiteInput_3 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_3);
				
			String url_tSQLiteInput_3 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_3 = java.sql.DriverManager.getConnection(url_tSQLiteInput_3);
		    
			java.sql.Statement stmt_tSQLiteInput_3 = conn_tSQLiteInput_3.createStatement();

		    String dbquery_tSQLiteInput_3 = "SELECT TITLE.uuid,\n		TITLE.obsValue\nFROM	TITLE";
			

                       globalMap.put("tSQLiteInput_3_QUERY",dbquery_tSQLiteInput_3);

		    java.sql.ResultSet rs_tSQLiteInput_3 = null;
		try{
		    rs_tSQLiteInput_3 = stmt_tSQLiteInput_3.executeQuery(dbquery_tSQLiteInput_3);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_3 = rs_tSQLiteInput_3.getMetaData();
		    int colQtyInRs_tSQLiteInput_3 = rsmd_tSQLiteInput_3.getColumnCount();

		    String tmpContent_tSQLiteInput_3 = null;
		    
		    
		    while (rs_tSQLiteInput_3.next()) {
		        nb_line_tSQLiteInput_3++;
		        
							if(colQtyInRs_tSQLiteInput_3 < 1) {
								row15.uuid = null;
							} else {
	                         		
        	row15.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_3, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_3 < 2) {
								row15.obsValue = null;
							} else {
	                         		
        	row15.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_3, 2, false);
		                    }
					



 



/**
 * [tSQLiteInput_3 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_3 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_3";

	

 


	tos_count_tSQLiteInput_3++;

/**
 * [tSQLiteInput_3 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";

	

			//row15
			//row15


			
				if(execStat){
					runStat.updateStatOnConnection("row15"+iterateId,1, 1);
				} 
			

		


			   
			   

					row15Struct row15_HashRow = new row15Struct();
		   	   	   
				
				row15_HashRow.uuid = row15.uuid;
				
				row15_HashRow.obsValue = row15.obsValue;
				
			tHash_Lookup_row15.put(row15_HashRow);
			
            




 


	tos_count_tAdvancedHash_row15++;

/**
 * [tAdvancedHash_row15 main ] stop
 */



	
	/**
	 * [tSQLiteInput_3 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_3";

	

	}
}finally{
	stmt_tSQLiteInput_3.close();

		if(conn_tSQLiteInput_3 != null && !conn_tSQLiteInput_3.isClosed()) {
			
			conn_tSQLiteInput_3.close();
			
		}
}
globalMap.put("tSQLiteInput_3_NB_LINE",nb_line_tSQLiteInput_3);

 

ok_Hash.put("tSQLiteInput_3", true);
end_Hash.put("tSQLiteInput_3", System.currentTimeMillis());




/**
 * [tSQLiteInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";

	

tHash_Lookup_row15.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row15"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row15", true);
end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());




/**
 * [tAdvancedHash_row15 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_3 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_3";

	

 



/**
 * [tSQLiteInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";

	

 



/**
 * [tAdvancedHash_row15 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableComparableLookupRow<row16Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row16Struct other = (row16Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row16Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            
	}

	public void copyKeysDataTo(row16Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();




	
	/**
	 * [tAdvancedHash_row16 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row16", false);
		start_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row16";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row16" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row16 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row16{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row16().limitLog4jByte();

			   		// connection name:row16
			   		// source node:tSQLiteInput_4 - inputs:(after_tSQLiteInput_1) outputs:(row16,row16) | target node:tAdvancedHash_row16 - inputs:(row16) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row16 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row16Struct>getLookup(matchingModeEnum_row16);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row16", tHash_Lookup_row16);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row16 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_4", false);
		start_Hash.put("tSQLiteInput_4", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_4";

	
		int tos_count_tSQLiteInput_4 = 0;
		
    	class BytesLimit65535_tSQLiteInput_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_4().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_4 = 0;
		    java.sql.Connection conn_tSQLiteInput_4 = null;
			    String driverClass_tSQLiteInput_4 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_4);
				
			String url_tSQLiteInput_4 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_4 = java.sql.DriverManager.getConnection(url_tSQLiteInput_4);
		    
			java.sql.Statement stmt_tSQLiteInput_4 = conn_tSQLiteInput_4.createStatement();

		    String dbquery_tSQLiteInput_4 = "SELECT EDITION.uuid,\n		EDITION.obsValue\nFROM	EDITION";
			

                       globalMap.put("tSQLiteInput_4_QUERY",dbquery_tSQLiteInput_4);

		    java.sql.ResultSet rs_tSQLiteInput_4 = null;
		try{
		    rs_tSQLiteInput_4 = stmt_tSQLiteInput_4.executeQuery(dbquery_tSQLiteInput_4);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_4 = rs_tSQLiteInput_4.getMetaData();
		    int colQtyInRs_tSQLiteInput_4 = rsmd_tSQLiteInput_4.getColumnCount();

		    String tmpContent_tSQLiteInput_4 = null;
		    
		    
		    while (rs_tSQLiteInput_4.next()) {
		        nb_line_tSQLiteInput_4++;
		        
							if(colQtyInRs_tSQLiteInput_4 < 1) {
								row16.uuid = null;
							} else {
	                         		
        	row16.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_4, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_4 < 2) {
								row16.obsValue = null;
							} else {
	                         		
        	row16.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_4, 2, false);
		                    }
					



 



/**
 * [tSQLiteInput_4 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_4 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_4";

	

 


	tos_count_tSQLiteInput_4++;

/**
 * [tSQLiteInput_4 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

			//row16
			//row16


			
				if(execStat){
					runStat.updateStatOnConnection("row16"+iterateId,1, 1);
				} 
			

		


			   
			   

					row16Struct row16_HashRow = new row16Struct();
		   	   	   
				
				row16_HashRow.uuid = row16.uuid;
				
				row16_HashRow.obsValue = row16.obsValue;
				
			tHash_Lookup_row16.put(row16_HashRow);
			
            




 


	tos_count_tAdvancedHash_row16++;

/**
 * [tAdvancedHash_row16 main ] stop
 */



	
	/**
	 * [tSQLiteInput_4 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_4";

	

	}
}finally{
	stmt_tSQLiteInput_4.close();

		if(conn_tSQLiteInput_4 != null && !conn_tSQLiteInput_4.isClosed()) {
			
			conn_tSQLiteInput_4.close();
			
		}
}
globalMap.put("tSQLiteInput_4_NB_LINE",nb_line_tSQLiteInput_4);

 

ok_Hash.put("tSQLiteInput_4", true);
end_Hash.put("tSQLiteInput_4", System.currentTimeMillis());




/**
 * [tSQLiteInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

tHash_Lookup_row16.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row16"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row16", true);
end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());




/**
 * [tAdvancedHash_row16 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_4 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_4";

	

 



/**
 * [tSQLiteInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

 



/**
 * [tAdvancedHash_row16 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row17Struct implements routines.system.IPersistableComparableLookupRow<row17Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row17Struct other = (row17Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row17Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            
	}

	public void copyKeysDataTo(row17Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row17Struct row17 = new row17Struct();




	
	/**
	 * [tAdvancedHash_row17 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row17", false);
		start_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row17";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row17" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row17 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row17{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row17().limitLog4jByte();

			   		// connection name:row17
			   		// source node:tSQLiteInput_5 - inputs:(after_tSQLiteInput_1) outputs:(row17,row17) | target node:tAdvancedHash_row17 - inputs:(row17) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row17 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row17Struct>getLookup(matchingModeEnum_row17);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row17", tHash_Lookup_row17);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row17 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_5", false);
		start_Hash.put("tSQLiteInput_5", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_5";

	
		int tos_count_tSQLiteInput_5 = 0;
		
    	class BytesLimit65535_tSQLiteInput_5{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_5().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_5 = 0;
		    java.sql.Connection conn_tSQLiteInput_5 = null;
			    String driverClass_tSQLiteInput_5 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_5);
				
			String url_tSQLiteInput_5 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_5 = java.sql.DriverManager.getConnection(url_tSQLiteInput_5);
		    
			java.sql.Statement stmt_tSQLiteInput_5 = conn_tSQLiteInput_5.createStatement();

		    String dbquery_tSQLiteInput_5 = "SELECT ABSTRACT.uuid,\n		ABSTRACT.obsValue\nFROM	ABSTRACT";
			

                       globalMap.put("tSQLiteInput_5_QUERY",dbquery_tSQLiteInput_5);

		    java.sql.ResultSet rs_tSQLiteInput_5 = null;
		try{
		    rs_tSQLiteInput_5 = stmt_tSQLiteInput_5.executeQuery(dbquery_tSQLiteInput_5);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_5 = rs_tSQLiteInput_5.getMetaData();
		    int colQtyInRs_tSQLiteInput_5 = rsmd_tSQLiteInput_5.getColumnCount();

		    String tmpContent_tSQLiteInput_5 = null;
		    
		    
		    while (rs_tSQLiteInput_5.next()) {
		        nb_line_tSQLiteInput_5++;
		        
							if(colQtyInRs_tSQLiteInput_5 < 1) {
								row17.uuid = null;
							} else {
	                         		
        	row17.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_5, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_5 < 2) {
								row17.obsValue = null;
							} else {
	                         		
        	row17.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_5, 2, false);
		                    }
					



 



/**
 * [tSQLiteInput_5 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_5 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_5";

	

 


	tos_count_tSQLiteInput_5++;

/**
 * [tSQLiteInput_5 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row17 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";

	

			//row17
			//row17


			
				if(execStat){
					runStat.updateStatOnConnection("row17"+iterateId,1, 1);
				} 
			

		


			   
			   

					row17Struct row17_HashRow = new row17Struct();
		   	   	   
				
				row17_HashRow.uuid = row17.uuid;
				
				row17_HashRow.obsValue = row17.obsValue;
				
			tHash_Lookup_row17.put(row17_HashRow);
			
            




 


	tos_count_tAdvancedHash_row17++;

/**
 * [tAdvancedHash_row17 main ] stop
 */



	
	/**
	 * [tSQLiteInput_5 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_5";

	

	}
}finally{
	stmt_tSQLiteInput_5.close();

		if(conn_tSQLiteInput_5 != null && !conn_tSQLiteInput_5.isClosed()) {
			
			conn_tSQLiteInput_5.close();
			
		}
}
globalMap.put("tSQLiteInput_5_NB_LINE",nb_line_tSQLiteInput_5);

 

ok_Hash.put("tSQLiteInput_5", true);
end_Hash.put("tSQLiteInput_5", System.currentTimeMillis());




/**
 * [tSQLiteInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row17 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";

	

tHash_Lookup_row17.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row17"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row17", true);
end_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());




/**
 * [tAdvancedHash_row17 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_5 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_5";

	

 



/**
 * [tSQLiteInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row17 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";

	

 



/**
 * [tAdvancedHash_row17 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row18Struct implements routines.system.IPersistableComparableLookupRow<row18Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row18Struct other = (row18Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row18Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            
	}

	public void copyKeysDataTo(row18Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row18Struct row18 = new row18Struct();




	
	/**
	 * [tAdvancedHash_row18 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row18", false);
		start_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row18";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row18" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row18 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row18{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row18().limitLog4jByte();

			   		// connection name:row18
			   		// source node:tSQLiteInput_6 - inputs:(after_tSQLiteInput_1) outputs:(row18,row18) | target node:tAdvancedHash_row18 - inputs:(row18) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row18 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row18Struct>getLookup(matchingModeEnum_row18);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row18", tHash_Lookup_row18);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row18 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_6", false);
		start_Hash.put("tSQLiteInput_6", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_6";

	
		int tos_count_tSQLiteInput_6 = 0;
		
    	class BytesLimit65535_tSQLiteInput_6{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_6().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_6 = 0;
		    java.sql.Connection conn_tSQLiteInput_6 = null;
			    String driverClass_tSQLiteInput_6 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_6);
				
			String url_tSQLiteInput_6 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_6 = java.sql.DriverManager.getConnection(url_tSQLiteInput_6);
		    
			java.sql.Statement stmt_tSQLiteInput_6 = conn_tSQLiteInput_6.createStatement();

		    String dbquery_tSQLiteInput_6 = "SELECT CUSTODIAN.uuid,\n		CUSTODIAN.obsValue\nFROM	CUSTODIAN";
			

                       globalMap.put("tSQLiteInput_6_QUERY",dbquery_tSQLiteInput_6);

		    java.sql.ResultSet rs_tSQLiteInput_6 = null;
		try{
		    rs_tSQLiteInput_6 = stmt_tSQLiteInput_6.executeQuery(dbquery_tSQLiteInput_6);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_6 = rs_tSQLiteInput_6.getMetaData();
		    int colQtyInRs_tSQLiteInput_6 = rsmd_tSQLiteInput_6.getColumnCount();

		    String tmpContent_tSQLiteInput_6 = null;
		    
		    
		    while (rs_tSQLiteInput_6.next()) {
		        nb_line_tSQLiteInput_6++;
		        
							if(colQtyInRs_tSQLiteInput_6 < 1) {
								row18.uuid = null;
							} else {
	                         		
        	row18.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_6, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_6 < 2) {
								row18.obsValue = null;
							} else {
	                         		
        	row18.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_6, 2, false);
		                    }
					



 



/**
 * [tSQLiteInput_6 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_6 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_6";

	

 


	tos_count_tSQLiteInput_6++;

/**
 * [tSQLiteInput_6 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row18 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";

	

			//row18
			//row18


			
				if(execStat){
					runStat.updateStatOnConnection("row18"+iterateId,1, 1);
				} 
			

		


			   
			   

					row18Struct row18_HashRow = new row18Struct();
		   	   	   
				
				row18_HashRow.uuid = row18.uuid;
				
				row18_HashRow.obsValue = row18.obsValue;
				
			tHash_Lookup_row18.put(row18_HashRow);
			
            




 


	tos_count_tAdvancedHash_row18++;

/**
 * [tAdvancedHash_row18 main ] stop
 */



	
	/**
	 * [tSQLiteInput_6 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_6";

	

	}
}finally{
	stmt_tSQLiteInput_6.close();

		if(conn_tSQLiteInput_6 != null && !conn_tSQLiteInput_6.isClosed()) {
			
			conn_tSQLiteInput_6.close();
			
		}
}
globalMap.put("tSQLiteInput_6_NB_LINE",nb_line_tSQLiteInput_6);

 

ok_Hash.put("tSQLiteInput_6", true);
end_Hash.put("tSQLiteInput_6", System.currentTimeMillis());




/**
 * [tSQLiteInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row18 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";

	

tHash_Lookup_row18.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row18"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row18", true);
end_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());




/**
 * [tAdvancedHash_row18 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_6 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_6";

	

 



/**
 * [tSQLiteInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row18 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";

	

 



/**
 * [tAdvancedHash_row18 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row19Struct implements routines.system.IPersistableComparableLookupRow<row19Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row19Struct other = (row19Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row19Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            
	}

	public void copyKeysDataTo(row19Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row19Struct row19 = new row19Struct();




	
	/**
	 * [tAdvancedHash_row19 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row19", false);
		start_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row19";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row19" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row19 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row19{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row19().limitLog4jByte();

			   		// connection name:row19
			   		// source node:tSQLiteInput_7 - inputs:(after_tSQLiteInput_1) outputs:(row19,row19) | target node:tAdvancedHash_row19 - inputs:(row19) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row19 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row19Struct>getLookup(matchingModeEnum_row19);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row19", tHash_Lookup_row19);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row19 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_7", false);
		start_Hash.put("tSQLiteInput_7", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_7";

	
		int tos_count_tSQLiteInput_7 = 0;
		
    	class BytesLimit65535_tSQLiteInput_7{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_7().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_7 = 0;
		    java.sql.Connection conn_tSQLiteInput_7 = null;
			    String driverClass_tSQLiteInput_7 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_7);
				
			String url_tSQLiteInput_7 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_7 = java.sql.DriverManager.getConnection(url_tSQLiteInput_7);
		    
			java.sql.Statement stmt_tSQLiteInput_7 = conn_tSQLiteInput_7.createStatement();

		    String dbquery_tSQLiteInput_7 = "SELECT BROWSEGRAPHIC.uuid,\n		BROWSEGRAPHIC.obsValue\nFROM	BROWSEGRAPHIC";
			

                       globalMap.put("tSQLiteInput_7_QUERY",dbquery_tSQLiteInput_7);

		    java.sql.ResultSet rs_tSQLiteInput_7 = null;
		try{
		    rs_tSQLiteInput_7 = stmt_tSQLiteInput_7.executeQuery(dbquery_tSQLiteInput_7);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_7 = rs_tSQLiteInput_7.getMetaData();
		    int colQtyInRs_tSQLiteInput_7 = rsmd_tSQLiteInput_7.getColumnCount();

		    String tmpContent_tSQLiteInput_7 = null;
		    
		    
		    while (rs_tSQLiteInput_7.next()) {
		        nb_line_tSQLiteInput_7++;
		        
							if(colQtyInRs_tSQLiteInput_7 < 1) {
								row19.uuid = null;
							} else {
	                         		
        	row19.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_7, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_7 < 2) {
								row19.obsValue = null;
							} else {
	                         		
        	row19.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_7, 2, false);
		                    }
					



 



/**
 * [tSQLiteInput_7 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_7 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_7";

	

 


	tos_count_tSQLiteInput_7++;

/**
 * [tSQLiteInput_7 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row19 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

			//row19
			//row19


			
				if(execStat){
					runStat.updateStatOnConnection("row19"+iterateId,1, 1);
				} 
			

		


			   
			   

					row19Struct row19_HashRow = new row19Struct();
		   	   	   
				
				row19_HashRow.uuid = row19.uuid;
				
				row19_HashRow.obsValue = row19.obsValue;
				
			tHash_Lookup_row19.put(row19_HashRow);
			
            




 


	tos_count_tAdvancedHash_row19++;

/**
 * [tAdvancedHash_row19 main ] stop
 */



	
	/**
	 * [tSQLiteInput_7 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_7";

	

	}
}finally{
	stmt_tSQLiteInput_7.close();

		if(conn_tSQLiteInput_7 != null && !conn_tSQLiteInput_7.isClosed()) {
			
			conn_tSQLiteInput_7.close();
			
		}
}
globalMap.put("tSQLiteInput_7_NB_LINE",nb_line_tSQLiteInput_7);

 

ok_Hash.put("tSQLiteInput_7", true);
end_Hash.put("tSQLiteInput_7", System.currentTimeMillis());




/**
 * [tSQLiteInput_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row19 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

tHash_Lookup_row19.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row19"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row19", true);
end_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());




/**
 * [tAdvancedHash_row19 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_7 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_7";

	

 



/**
 * [tSQLiteInput_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row19 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

 



/**
 * [tAdvancedHash_row19 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row20Struct implements routines.system.IPersistableComparableLookupRow<row20Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row20Struct other = (row20Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row20Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            
	}

	public void copyKeysDataTo(row20Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row20Struct row20 = new row20Struct();




	
	/**
	 * [tAdvancedHash_row20 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row20", false);
		start_Hash.put("tAdvancedHash_row20", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row20";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row20" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row20 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row20{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row20().limitLog4jByte();

			   		// connection name:row20
			   		// source node:tSQLiteInput_8 - inputs:(after_tSQLiteInput_1) outputs:(row20,row20) | target node:tAdvancedHash_row20 - inputs:(row20) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row20 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct> tHash_Lookup_row20 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row20Struct>getLookup(matchingModeEnum_row20);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row20", tHash_Lookup_row20);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row20 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_8", false);
		start_Hash.put("tSQLiteInput_8", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_8";

	
		int tos_count_tSQLiteInput_8 = 0;
		
    	class BytesLimit65535_tSQLiteInput_8{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_8().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_8 = 0;
		    java.sql.Connection conn_tSQLiteInput_8 = null;
			    String driverClass_tSQLiteInput_8 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_8);
				
			String url_tSQLiteInput_8 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_8 = java.sql.DriverManager.getConnection(url_tSQLiteInput_8);
		    
			java.sql.Statement stmt_tSQLiteInput_8 = conn_tSQLiteInput_8.createStatement();

		    String dbquery_tSQLiteInput_8 = "SELECT WLON.uuid,\n		WLON.obsValue\nFROM	WLON";
			

                       globalMap.put("tSQLiteInput_8_QUERY",dbquery_tSQLiteInput_8);

		    java.sql.ResultSet rs_tSQLiteInput_8 = null;
		try{
		    rs_tSQLiteInput_8 = stmt_tSQLiteInput_8.executeQuery(dbquery_tSQLiteInput_8);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_8 = rs_tSQLiteInput_8.getMetaData();
		    int colQtyInRs_tSQLiteInput_8 = rsmd_tSQLiteInput_8.getColumnCount();

		    String tmpContent_tSQLiteInput_8 = null;
		    
		    
		    while (rs_tSQLiteInput_8.next()) {
		        nb_line_tSQLiteInput_8++;
		        
							if(colQtyInRs_tSQLiteInput_8 < 1) {
								row20.uuid = null;
							} else {
	                         		
        	row20.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_8, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_8 < 2) {
								row20.obsValue = null;
							} else {
	                         		
        	row20.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_8, 2, false);
		                    }
					



 



/**
 * [tSQLiteInput_8 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_8 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_8";

	

 


	tos_count_tSQLiteInput_8++;

/**
 * [tSQLiteInput_8 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row20 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row20";

	

			//row20
			//row20


			
				if(execStat){
					runStat.updateStatOnConnection("row20"+iterateId,1, 1);
				} 
			

		


			   
			   

					row20Struct row20_HashRow = new row20Struct();
		   	   	   
				
				row20_HashRow.uuid = row20.uuid;
				
				row20_HashRow.obsValue = row20.obsValue;
				
			tHash_Lookup_row20.put(row20_HashRow);
			
            




 


	tos_count_tAdvancedHash_row20++;

/**
 * [tAdvancedHash_row20 main ] stop
 */



	
	/**
	 * [tSQLiteInput_8 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_8";

	

	}
}finally{
	stmt_tSQLiteInput_8.close();

		if(conn_tSQLiteInput_8 != null && !conn_tSQLiteInput_8.isClosed()) {
			
			conn_tSQLiteInput_8.close();
			
		}
}
globalMap.put("tSQLiteInput_8_NB_LINE",nb_line_tSQLiteInput_8);

 

ok_Hash.put("tSQLiteInput_8", true);
end_Hash.put("tSQLiteInput_8", System.currentTimeMillis());




/**
 * [tSQLiteInput_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row20 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row20";

	

tHash_Lookup_row20.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row20"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row20", true);
end_Hash.put("tAdvancedHash_row20", System.currentTimeMillis());




/**
 * [tAdvancedHash_row20 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_8 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_8";

	

 



/**
 * [tSQLiteInput_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row20 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row20";

	

 



/**
 * [tAdvancedHash_row20 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row21Struct implements routines.system.IPersistableComparableLookupRow<row21Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row21Struct other = (row21Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row21Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            
	}

	public void copyKeysDataTo(row21Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row21Struct row21 = new row21Struct();




	
	/**
	 * [tAdvancedHash_row21 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row21", false);
		start_Hash.put("tAdvancedHash_row21", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row21";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row21" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row21 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row21{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row21().limitLog4jByte();

			   		// connection name:row21
			   		// source node:tSQLiteInput_9 - inputs:(after_tSQLiteInput_1) outputs:(row21,row21) | target node:tAdvancedHash_row21 - inputs:(row21) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row21 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row21Struct>getLookup(matchingModeEnum_row21);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row21", tHash_Lookup_row21);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row21 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_9", false);
		start_Hash.put("tSQLiteInput_9", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_9";

	
		int tos_count_tSQLiteInput_9 = 0;
		
    	class BytesLimit65535_tSQLiteInput_9{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_9().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_9 = 0;
		    java.sql.Connection conn_tSQLiteInput_9 = null;
			    String driverClass_tSQLiteInput_9 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_9);
				
			String url_tSQLiteInput_9 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_9 = java.sql.DriverManager.getConnection(url_tSQLiteInput_9);
		    
			java.sql.Statement stmt_tSQLiteInput_9 = conn_tSQLiteInput_9.createStatement();

		    String dbquery_tSQLiteInput_9 = "SELECT ELON.uuid,\n		ELON.obsValue\nFROM	ELON";
			

                       globalMap.put("tSQLiteInput_9_QUERY",dbquery_tSQLiteInput_9);

		    java.sql.ResultSet rs_tSQLiteInput_9 = null;
		try{
		    rs_tSQLiteInput_9 = stmt_tSQLiteInput_9.executeQuery(dbquery_tSQLiteInput_9);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_9 = rs_tSQLiteInput_9.getMetaData();
		    int colQtyInRs_tSQLiteInput_9 = rsmd_tSQLiteInput_9.getColumnCount();

		    String tmpContent_tSQLiteInput_9 = null;
		    
		    
		    while (rs_tSQLiteInput_9.next()) {
		        nb_line_tSQLiteInput_9++;
		        
							if(colQtyInRs_tSQLiteInput_9 < 1) {
								row21.uuid = null;
							} else {
	                         		
        	row21.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_9, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_9 < 2) {
								row21.obsValue = null;
							} else {
	                         		
        	row21.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_9, 2, false);
		                    }
					



 



/**
 * [tSQLiteInput_9 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_9 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_9";

	

 


	tos_count_tSQLiteInput_9++;

/**
 * [tSQLiteInput_9 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row21 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";

	

			//row21
			//row21


			
				if(execStat){
					runStat.updateStatOnConnection("row21"+iterateId,1, 1);
				} 
			

		


			   
			   

					row21Struct row21_HashRow = new row21Struct();
		   	   	   
				
				row21_HashRow.uuid = row21.uuid;
				
				row21_HashRow.obsValue = row21.obsValue;
				
			tHash_Lookup_row21.put(row21_HashRow);
			
            




 


	tos_count_tAdvancedHash_row21++;

/**
 * [tAdvancedHash_row21 main ] stop
 */



	
	/**
	 * [tSQLiteInput_9 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_9";

	

	}
}finally{
	stmt_tSQLiteInput_9.close();

		if(conn_tSQLiteInput_9 != null && !conn_tSQLiteInput_9.isClosed()) {
			
			conn_tSQLiteInput_9.close();
			
		}
}
globalMap.put("tSQLiteInput_9_NB_LINE",nb_line_tSQLiteInput_9);

 

ok_Hash.put("tSQLiteInput_9", true);
end_Hash.put("tSQLiteInput_9", System.currentTimeMillis());




/**
 * [tSQLiteInput_9 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row21 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";

	

tHash_Lookup_row21.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row21"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row21", true);
end_Hash.put("tAdvancedHash_row21", System.currentTimeMillis());




/**
 * [tAdvancedHash_row21 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_9 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_9";

	

 



/**
 * [tSQLiteInput_9 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row21 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";

	

 



/**
 * [tAdvancedHash_row21 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row22Struct implements routines.system.IPersistableComparableLookupRow<row22Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row22Struct other = (row22Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row22Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            
	}

	public void copyKeysDataTo(row22Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row22Struct row22 = new row22Struct();




	
	/**
	 * [tAdvancedHash_row22 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row22", false);
		start_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row22";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row22" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row22 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row22{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row22().limitLog4jByte();

			   		// connection name:row22
			   		// source node:tSQLiteInput_10 - inputs:(after_tSQLiteInput_1) outputs:(row22,row22) | target node:tAdvancedHash_row22 - inputs:(row22) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row22 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row22Struct>getLookup(matchingModeEnum_row22);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row22", tHash_Lookup_row22);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row22 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_10", false);
		start_Hash.put("tSQLiteInput_10", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_10";

	
		int tos_count_tSQLiteInput_10 = 0;
		
    	class BytesLimit65535_tSQLiteInput_10{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_10().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_10 = 0;
		    java.sql.Connection conn_tSQLiteInput_10 = null;
			    String driverClass_tSQLiteInput_10 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_10);
				
			String url_tSQLiteInput_10 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_10 = java.sql.DriverManager.getConnection(url_tSQLiteInput_10);
		    
			java.sql.Statement stmt_tSQLiteInput_10 = conn_tSQLiteInput_10.createStatement();

		    String dbquery_tSQLiteInput_10 = "SELECT SLAT.uuid,\n		SLAT.obsValue\nFROM	SLAT";
			

                       globalMap.put("tSQLiteInput_10_QUERY",dbquery_tSQLiteInput_10);

		    java.sql.ResultSet rs_tSQLiteInput_10 = null;
		try{
		    rs_tSQLiteInput_10 = stmt_tSQLiteInput_10.executeQuery(dbquery_tSQLiteInput_10);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_10 = rs_tSQLiteInput_10.getMetaData();
		    int colQtyInRs_tSQLiteInput_10 = rsmd_tSQLiteInput_10.getColumnCount();

		    String tmpContent_tSQLiteInput_10 = null;
		    
		    
		    while (rs_tSQLiteInput_10.next()) {
		        nb_line_tSQLiteInput_10++;
		        
							if(colQtyInRs_tSQLiteInput_10 < 1) {
								row22.uuid = null;
							} else {
	                         		
        	row22.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_10, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_10 < 2) {
								row22.obsValue = null;
							} else {
	                         		
        	row22.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_10, 2, false);
		                    }
					



 



/**
 * [tSQLiteInput_10 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_10 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_10";

	

 


	tos_count_tSQLiteInput_10++;

/**
 * [tSQLiteInput_10 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row22 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	

			//row22
			//row22


			
				if(execStat){
					runStat.updateStatOnConnection("row22"+iterateId,1, 1);
				} 
			

		


			   
			   

					row22Struct row22_HashRow = new row22Struct();
		   	   	   
				
				row22_HashRow.uuid = row22.uuid;
				
				row22_HashRow.obsValue = row22.obsValue;
				
			tHash_Lookup_row22.put(row22_HashRow);
			
            




 


	tos_count_tAdvancedHash_row22++;

/**
 * [tAdvancedHash_row22 main ] stop
 */



	
	/**
	 * [tSQLiteInput_10 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_10";

	

	}
}finally{
	stmt_tSQLiteInput_10.close();

		if(conn_tSQLiteInput_10 != null && !conn_tSQLiteInput_10.isClosed()) {
			
			conn_tSQLiteInput_10.close();
			
		}
}
globalMap.put("tSQLiteInput_10_NB_LINE",nb_line_tSQLiteInput_10);

 

ok_Hash.put("tSQLiteInput_10", true);
end_Hash.put("tSQLiteInput_10", System.currentTimeMillis());




/**
 * [tSQLiteInput_10 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row22 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	

tHash_Lookup_row22.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row22"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row22", true);
end_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());




/**
 * [tAdvancedHash_row22 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_10 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_10";

	

 



/**
 * [tSQLiteInput_10 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row22 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	

 



/**
 * [tAdvancedHash_row22 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class row23Struct implements routines.system.IPersistableComparableLookupRow<row23Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row23Struct other = (row23Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row23Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            
	}

	public void copyKeysDataTo(row23Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row23Struct row23 = new row23Struct();




	
	/**
	 * [tAdvancedHash_row23 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row23", false);
		start_Hash.put("tAdvancedHash_row23", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row23";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row23" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row23 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row23{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row23().limitLog4jByte();

			   		// connection name:row23
			   		// source node:tSQLiteInput_11 - inputs:(after_tSQLiteInput_1) outputs:(row23,row23) | target node:tAdvancedHash_row23 - inputs:(row23) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row23 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct> tHash_Lookup_row23 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row23Struct>getLookup(matchingModeEnum_row23);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row23", tHash_Lookup_row23);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row23 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_11", false);
		start_Hash.put("tSQLiteInput_11", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_11";

	
		int tos_count_tSQLiteInput_11 = 0;
		
    	class BytesLimit65535_tSQLiteInput_11{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_11().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_11 = 0;
		    java.sql.Connection conn_tSQLiteInput_11 = null;
			    String driverClass_tSQLiteInput_11 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_11);
				
			String url_tSQLiteInput_11 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_11 = java.sql.DriverManager.getConnection(url_tSQLiteInput_11);
		    
			java.sql.Statement stmt_tSQLiteInput_11 = conn_tSQLiteInput_11.createStatement();

		    String dbquery_tSQLiteInput_11 = "SELECT SLAT.uuid,\n		SLAT.obsValue\nFROM	SLAT";
			

                       globalMap.put("tSQLiteInput_11_QUERY",dbquery_tSQLiteInput_11);

		    java.sql.ResultSet rs_tSQLiteInput_11 = null;
		try{
		    rs_tSQLiteInput_11 = stmt_tSQLiteInput_11.executeQuery(dbquery_tSQLiteInput_11);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_11 = rs_tSQLiteInput_11.getMetaData();
		    int colQtyInRs_tSQLiteInput_11 = rsmd_tSQLiteInput_11.getColumnCount();

		    String tmpContent_tSQLiteInput_11 = null;
		    
		    
		    while (rs_tSQLiteInput_11.next()) {
		        nb_line_tSQLiteInput_11++;
		        
							if(colQtyInRs_tSQLiteInput_11 < 1) {
								row23.uuid = null;
							} else {
	                         		
        	row23.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_11, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_11 < 2) {
								row23.obsValue = null;
							} else {
	                         		
        	row23.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_11, 2, false);
		                    }
					



 



/**
 * [tSQLiteInput_11 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_11 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_11";

	

 


	tos_count_tSQLiteInput_11++;

/**
 * [tSQLiteInput_11 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row23 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

			//row23
			//row23


			
				if(execStat){
					runStat.updateStatOnConnection("row23"+iterateId,1, 1);
				} 
			

		


			   
			   

					row23Struct row23_HashRow = new row23Struct();
		   	   	   
				
				row23_HashRow.uuid = row23.uuid;
				
				row23_HashRow.obsValue = row23.obsValue;
				
			tHash_Lookup_row23.put(row23_HashRow);
			
            




 


	tos_count_tAdvancedHash_row23++;

/**
 * [tAdvancedHash_row23 main ] stop
 */



	
	/**
	 * [tSQLiteInput_11 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_11";

	

	}
}finally{
	stmt_tSQLiteInput_11.close();

		if(conn_tSQLiteInput_11 != null && !conn_tSQLiteInput_11.isClosed()) {
			
			conn_tSQLiteInput_11.close();
			
		}
}
globalMap.put("tSQLiteInput_11_NB_LINE",nb_line_tSQLiteInput_11);

 

ok_Hash.put("tSQLiteInput_11", true);
end_Hash.put("tSQLiteInput_11", System.currentTimeMillis());




/**
 * [tSQLiteInput_11 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row23 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

tHash_Lookup_row23.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row23"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row23", true);
end_Hash.put("tAdvancedHash_row23", System.currentTimeMillis());




/**
 * [tAdvancedHash_row23 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_11 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_11";

	

 



/**
 * [tSQLiteInput_11 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row23 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

 



/**
 * [tAdvancedHash_row23 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class row24Struct implements routines.system.IPersistableComparableLookupRow<row24Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row24Struct other = (row24Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row24Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            
	}

	public void copyKeysDataTo(row24Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row24Struct row24 = new row24Struct();




	
	/**
	 * [tAdvancedHash_row24 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row24", false);
		start_Hash.put("tAdvancedHash_row24", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row24";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row24" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row24 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row24{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row24().limitLog4jByte();

			   		// connection name:row24
			   		// source node:tSQLiteInput_12 - inputs:(after_tSQLiteInput_1) outputs:(row24,row24) | target node:tAdvancedHash_row24 - inputs:(row24) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row24 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct> tHash_Lookup_row24 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row24Struct>getLookup(matchingModeEnum_row24);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row24", tHash_Lookup_row24);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row24 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_12", false);
		start_Hash.put("tSQLiteInput_12", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_12";

	
		int tos_count_tSQLiteInput_12 = 0;
		
    	class BytesLimit65535_tSQLiteInput_12{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_12().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_12 = 0;
		    java.sql.Connection conn_tSQLiteInput_12 = null;
			    String driverClass_tSQLiteInput_12 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_12);
				
			String url_tSQLiteInput_12 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_12 = java.sql.DriverManager.getConnection(url_tSQLiteInput_12);
		    
			java.sql.Statement stmt_tSQLiteInput_12 = conn_tSQLiteInput_12.createStatement();

		    String dbquery_tSQLiteInput_12 = "SELECT STYPE.uuid,\n		STYPE.obsValue\nFROM	STYPE";
			

                       globalMap.put("tSQLiteInput_12_QUERY",dbquery_tSQLiteInput_12);

		    java.sql.ResultSet rs_tSQLiteInput_12 = null;
		try{
		    rs_tSQLiteInput_12 = stmt_tSQLiteInput_12.executeQuery(dbquery_tSQLiteInput_12);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_12 = rs_tSQLiteInput_12.getMetaData();
		    int colQtyInRs_tSQLiteInput_12 = rsmd_tSQLiteInput_12.getColumnCount();

		    String tmpContent_tSQLiteInput_12 = null;
		    
		    
		    while (rs_tSQLiteInput_12.next()) {
		        nb_line_tSQLiteInput_12++;
		        
							if(colQtyInRs_tSQLiteInput_12 < 1) {
								row24.uuid = null;
							} else {
	                         		
        	row24.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_12, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_12 < 2) {
								row24.obsValue = null;
							} else {
	                         		
        	row24.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_12, 2, false);
		                    }
					



 



/**
 * [tSQLiteInput_12 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_12 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_12";

	

 


	tos_count_tSQLiteInput_12++;

/**
 * [tSQLiteInput_12 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row24 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row24";

	

			//row24
			//row24


			
				if(execStat){
					runStat.updateStatOnConnection("row24"+iterateId,1, 1);
				} 
			

		


			   
			   

					row24Struct row24_HashRow = new row24Struct();
		   	   	   
				
				row24_HashRow.uuid = row24.uuid;
				
				row24_HashRow.obsValue = row24.obsValue;
				
			tHash_Lookup_row24.put(row24_HashRow);
			
            




 


	tos_count_tAdvancedHash_row24++;

/**
 * [tAdvancedHash_row24 main ] stop
 */



	
	/**
	 * [tSQLiteInput_12 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_12";

	

	}
}finally{
	stmt_tSQLiteInput_12.close();

		if(conn_tSQLiteInput_12 != null && !conn_tSQLiteInput_12.isClosed()) {
			
			conn_tSQLiteInput_12.close();
			
		}
}
globalMap.put("tSQLiteInput_12_NB_LINE",nb_line_tSQLiteInput_12);

 

ok_Hash.put("tSQLiteInput_12", true);
end_Hash.put("tSQLiteInput_12", System.currentTimeMillis());




/**
 * [tSQLiteInput_12 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row24 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row24";

	

tHash_Lookup_row24.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row24"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row24", true);
end_Hash.put("tAdvancedHash_row24", System.currentTimeMillis());




/**
 * [tAdvancedHash_row24 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_12 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_12";

	

 



/**
 * [tSQLiteInput_12 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row24 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row24";

	

 



/**
 * [tAdvancedHash_row24 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class row25Struct implements routines.system.IPersistableComparableLookupRow<row25Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row25Struct other = (row25Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row25Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            
	}

	public void copyKeysDataTo(row25Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row25Struct row25 = new row25Struct();




	
	/**
	 * [tAdvancedHash_row25 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row25", false);
		start_Hash.put("tAdvancedHash_row25", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row25";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row25" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row25 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row25{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row25().limitLog4jByte();

			   		// connection name:row25
			   		// source node:tSQLiteInput_13 - inputs:(after_tSQLiteInput_1) outputs:(row25,row25) | target node:tAdvancedHash_row25 - inputs:(row25) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row25 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct> tHash_Lookup_row25 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row25Struct>getLookup(matchingModeEnum_row25);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row25", tHash_Lookup_row25);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row25 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_13", false);
		start_Hash.put("tSQLiteInput_13", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_13";

	
		int tos_count_tSQLiteInput_13 = 0;
		
    	class BytesLimit65535_tSQLiteInput_13{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_13().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_13 = 0;
		    java.sql.Connection conn_tSQLiteInput_13 = null;
			    String driverClass_tSQLiteInput_13 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_13);
				
			String url_tSQLiteInput_13 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_13 = java.sql.DriverManager.getConnection(url_tSQLiteInput_13);
		    
			java.sql.Statement stmt_tSQLiteInput_13 = conn_tSQLiteInput_13.createStatement();

		    String dbquery_tSQLiteInput_13 = "SELECT SCALARES.uuid,\n		SCALARES.obsValue\nFROM	SCALARES";
			

                       globalMap.put("tSQLiteInput_13_QUERY",dbquery_tSQLiteInput_13);

		    java.sql.ResultSet rs_tSQLiteInput_13 = null;
		try{
		    rs_tSQLiteInput_13 = stmt_tSQLiteInput_13.executeQuery(dbquery_tSQLiteInput_13);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_13 = rs_tSQLiteInput_13.getMetaData();
		    int colQtyInRs_tSQLiteInput_13 = rsmd_tSQLiteInput_13.getColumnCount();

		    String tmpContent_tSQLiteInput_13 = null;
		    
		    
		    while (rs_tSQLiteInput_13.next()) {
		        nb_line_tSQLiteInput_13++;
		        
							if(colQtyInRs_tSQLiteInput_13 < 1) {
								row25.uuid = null;
							} else {
	                         		
        	row25.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_13, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_13 < 2) {
								row25.obsValue = null;
							} else {
	                         		
        	row25.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_13, 2, false);
		                    }
					



 



/**
 * [tSQLiteInput_13 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_13 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_13";

	

 


	tos_count_tSQLiteInput_13++;

/**
 * [tSQLiteInput_13 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row25 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";

	

			//row25
			//row25


			
				if(execStat){
					runStat.updateStatOnConnection("row25"+iterateId,1, 1);
				} 
			

		


			   
			   

					row25Struct row25_HashRow = new row25Struct();
		   	   	   
				
				row25_HashRow.uuid = row25.uuid;
				
				row25_HashRow.obsValue = row25.obsValue;
				
			tHash_Lookup_row25.put(row25_HashRow);
			
            




 


	tos_count_tAdvancedHash_row25++;

/**
 * [tAdvancedHash_row25 main ] stop
 */



	
	/**
	 * [tSQLiteInput_13 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_13";

	

	}
}finally{
	stmt_tSQLiteInput_13.close();

		if(conn_tSQLiteInput_13 != null && !conn_tSQLiteInput_13.isClosed()) {
			
			conn_tSQLiteInput_13.close();
			
		}
}
globalMap.put("tSQLiteInput_13_NB_LINE",nb_line_tSQLiteInput_13);

 

ok_Hash.put("tSQLiteInput_13", true);
end_Hash.put("tSQLiteInput_13", System.currentTimeMillis());




/**
 * [tSQLiteInput_13 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row25 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";

	

tHash_Lookup_row25.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row25"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row25", true);
end_Hash.put("tAdvancedHash_row25", System.currentTimeMillis());




/**
 * [tAdvancedHash_row25 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_13 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_13";

	

 



/**
 * [tSQLiteInput_13 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row25 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";

	

 



/**
 * [tAdvancedHash_row25 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class row26Struct implements routines.system.IPersistableComparableLookupRow<row26Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row26Struct other = (row26Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row26Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            
	}

	public void copyKeysDataTo(row26Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row26Struct row26 = new row26Struct();




	
	/**
	 * [tAdvancedHash_row26 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row26", false);
		start_Hash.put("tAdvancedHash_row26", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row26";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row26" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row26 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row26{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row26().limitLog4jByte();

			   		// connection name:row26
			   		// source node:tSQLiteInput_14 - inputs:(after_tSQLiteInput_1) outputs:(row26,row26) | target node:tAdvancedHash_row26 - inputs:(row26) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row26 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct> tHash_Lookup_row26 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row26Struct>getLookup(matchingModeEnum_row26);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row26", tHash_Lookup_row26);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row26 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_14", false);
		start_Hash.put("tSQLiteInput_14", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_14";

	
		int tos_count_tSQLiteInput_14 = 0;
		
    	class BytesLimit65535_tSQLiteInput_14{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_14().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_14 = 0;
		    java.sql.Connection conn_tSQLiteInput_14 = null;
			    String driverClass_tSQLiteInput_14 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_14);
				
			String url_tSQLiteInput_14 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_14 = java.sql.DriverManager.getConnection(url_tSQLiteInput_14);
		    
			java.sql.Statement stmt_tSQLiteInput_14 = conn_tSQLiteInput_14.createStatement();

		    String dbquery_tSQLiteInput_14 = "SELECT SCALARES2.uuid,\n		SCALARES2.obsValue\nFROM	SCALARES2";
			

                       globalMap.put("tSQLiteInput_14_QUERY",dbquery_tSQLiteInput_14);

		    java.sql.ResultSet rs_tSQLiteInput_14 = null;
		try{
		    rs_tSQLiteInput_14 = stmt_tSQLiteInput_14.executeQuery(dbquery_tSQLiteInput_14);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_14 = rs_tSQLiteInput_14.getMetaData();
		    int colQtyInRs_tSQLiteInput_14 = rsmd_tSQLiteInput_14.getColumnCount();

		    String tmpContent_tSQLiteInput_14 = null;
		    
		    
		    while (rs_tSQLiteInput_14.next()) {
		        nb_line_tSQLiteInput_14++;
		        
							if(colQtyInRs_tSQLiteInput_14 < 1) {
								row26.uuid = null;
							} else {
	                         		
        	row26.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_14, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_14 < 2) {
								row26.obsValue = null;
							} else {
	                         		
        	row26.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_14, 2, false);
		                    }
					



 



/**
 * [tSQLiteInput_14 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_14 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_14";

	

 


	tos_count_tSQLiteInput_14++;

/**
 * [tSQLiteInput_14 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row26 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row26";

	

			//row26
			//row26


			
				if(execStat){
					runStat.updateStatOnConnection("row26"+iterateId,1, 1);
				} 
			

		


			   
			   

					row26Struct row26_HashRow = new row26Struct();
		   	   	   
				
				row26_HashRow.uuid = row26.uuid;
				
				row26_HashRow.obsValue = row26.obsValue;
				
			tHash_Lookup_row26.put(row26_HashRow);
			
            




 


	tos_count_tAdvancedHash_row26++;

/**
 * [tAdvancedHash_row26 main ] stop
 */



	
	/**
	 * [tSQLiteInput_14 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_14";

	

	}
}finally{
	stmt_tSQLiteInput_14.close();

		if(conn_tSQLiteInput_14 != null && !conn_tSQLiteInput_14.isClosed()) {
			
			conn_tSQLiteInput_14.close();
			
		}
}
globalMap.put("tSQLiteInput_14_NB_LINE",nb_line_tSQLiteInput_14);

 

ok_Hash.put("tSQLiteInput_14", true);
end_Hash.put("tSQLiteInput_14", System.currentTimeMillis());




/**
 * [tSQLiteInput_14 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row26 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row26";

	

tHash_Lookup_row26.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row26"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row26", true);
end_Hash.put("tAdvancedHash_row26", System.currentTimeMillis());




/**
 * [tAdvancedHash_row26 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_14 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_14";

	

 



/**
 * [tSQLiteInput_14 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row26 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row26";

	

 



/**
 * [tAdvancedHash_row26 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_14_SUBPROCESS_STATE", 1);
	}
	


public static class row27Struct implements routines.system.IPersistableComparableLookupRow<row27Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row27Struct other = (row27Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row27Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            
	}

	public void copyKeysDataTo(row27Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row27Struct row27 = new row27Struct();




	
	/**
	 * [tAdvancedHash_row27 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row27", false);
		start_Hash.put("tAdvancedHash_row27", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row27";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row27" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row27 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row27{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row27().limitLog4jByte();

			   		// connection name:row27
			   		// source node:tSQLiteInput_15 - inputs:(after_tSQLiteInput_1) outputs:(row27,row27) | target node:tAdvancedHash_row27 - inputs:(row27) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row27 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct> tHash_Lookup_row27 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row27Struct>getLookup(matchingModeEnum_row27);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row27", tHash_Lookup_row27);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row27 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_15", false);
		start_Hash.put("tSQLiteInput_15", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_15";

	
		int tos_count_tSQLiteInput_15 = 0;
		
    	class BytesLimit65535_tSQLiteInput_15{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_15().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_15 = 0;
		    java.sql.Connection conn_tSQLiteInput_15 = null;
			    String driverClass_tSQLiteInput_15 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_15);
				
			String url_tSQLiteInput_15 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_15 = java.sql.DriverManager.getConnection(url_tSQLiteInput_15);
		    
			java.sql.Statement stmt_tSQLiteInput_15 = conn_tSQLiteInput_15.createStatement();

		    String dbquery_tSQLiteInput_15 = "SELECT uuid,\n		substr(obsValue, 1, 10) as obsValue\nFROM	TBEGIN";
			

                       globalMap.put("tSQLiteInput_15_QUERY",dbquery_tSQLiteInput_15);

		    java.sql.ResultSet rs_tSQLiteInput_15 = null;
		try{
		    rs_tSQLiteInput_15 = stmt_tSQLiteInput_15.executeQuery(dbquery_tSQLiteInput_15);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_15 = rs_tSQLiteInput_15.getMetaData();
		    int colQtyInRs_tSQLiteInput_15 = rsmd_tSQLiteInput_15.getColumnCount();

		    String tmpContent_tSQLiteInput_15 = null;
		    
		    
		    while (rs_tSQLiteInput_15.next()) {
		        nb_line_tSQLiteInput_15++;
		        
							if(colQtyInRs_tSQLiteInput_15 < 1) {
								row27.uuid = null;
							} else {
	                         		
        	row27.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_15, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_15 < 2) {
								row27.obsValue = null;
							} else {
	                         		
        	row27.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_15, 2, false);
		                    }
					



 



/**
 * [tSQLiteInput_15 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_15 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_15";

	

 


	tos_count_tSQLiteInput_15++;

/**
 * [tSQLiteInput_15 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row27 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";

	

			//row27
			//row27


			
				if(execStat){
					runStat.updateStatOnConnection("row27"+iterateId,1, 1);
				} 
			

		


			   
			   

					row27Struct row27_HashRow = new row27Struct();
		   	   	   
				
				row27_HashRow.uuid = row27.uuid;
				
				row27_HashRow.obsValue = row27.obsValue;
				
			tHash_Lookup_row27.put(row27_HashRow);
			
            




 


	tos_count_tAdvancedHash_row27++;

/**
 * [tAdvancedHash_row27 main ] stop
 */



	
	/**
	 * [tSQLiteInput_15 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_15";

	

	}
}finally{
	stmt_tSQLiteInput_15.close();

		if(conn_tSQLiteInput_15 != null && !conn_tSQLiteInput_15.isClosed()) {
			
			conn_tSQLiteInput_15.close();
			
		}
}
globalMap.put("tSQLiteInput_15_NB_LINE",nb_line_tSQLiteInput_15);

 

ok_Hash.put("tSQLiteInput_15", true);
end_Hash.put("tSQLiteInput_15", System.currentTimeMillis());




/**
 * [tSQLiteInput_15 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row27 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";

	

tHash_Lookup_row27.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row27"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row27", true);
end_Hash.put("tAdvancedHash_row27", System.currentTimeMillis());




/**
 * [tAdvancedHash_row27 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_15 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_15";

	

 



/**
 * [tSQLiteInput_15 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row27 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";

	

 



/**
 * [tAdvancedHash_row27 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_15_SUBPROCESS_STATE", 1);
	}
	


public static class row28Struct implements routines.system.IPersistableComparableLookupRow<row28Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row28Struct other = (row28Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row28Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            
	}

	public void copyKeysDataTo(row28Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row28Struct row28 = new row28Struct();




	
	/**
	 * [tAdvancedHash_row28 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row28", false);
		start_Hash.put("tAdvancedHash_row28", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row28";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row28" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row28 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row28{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row28().limitLog4jByte();

			   		// connection name:row28
			   		// source node:tSQLiteInput_16 - inputs:(after_tSQLiteInput_1) outputs:(row28,row28) | target node:tAdvancedHash_row28 - inputs:(row28) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row28 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct> tHash_Lookup_row28 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row28Struct>getLookup(matchingModeEnum_row28);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row28", tHash_Lookup_row28);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row28 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_16", false);
		start_Hash.put("tSQLiteInput_16", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_16";

	
		int tos_count_tSQLiteInput_16 = 0;
		
    	class BytesLimit65535_tSQLiteInput_16{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_16().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_16 = 0;
		    java.sql.Connection conn_tSQLiteInput_16 = null;
			    String driverClass_tSQLiteInput_16 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_16);
				
			String url_tSQLiteInput_16 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_16 = java.sql.DriverManager.getConnection(url_tSQLiteInput_16);
		    
			java.sql.Statement stmt_tSQLiteInput_16 = conn_tSQLiteInput_16.createStatement();

		    String dbquery_tSQLiteInput_16 = "SELECT uuid,\n		substr(obsValue, 1, 10) as obsValue\nFROM	TBEGIN2";
			

                       globalMap.put("tSQLiteInput_16_QUERY",dbquery_tSQLiteInput_16);

		    java.sql.ResultSet rs_tSQLiteInput_16 = null;
		try{
		    rs_tSQLiteInput_16 = stmt_tSQLiteInput_16.executeQuery(dbquery_tSQLiteInput_16);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_16 = rs_tSQLiteInput_16.getMetaData();
		    int colQtyInRs_tSQLiteInput_16 = rsmd_tSQLiteInput_16.getColumnCount();

		    String tmpContent_tSQLiteInput_16 = null;
		    
		    
		    while (rs_tSQLiteInput_16.next()) {
		        nb_line_tSQLiteInput_16++;
		        
							if(colQtyInRs_tSQLiteInput_16 < 1) {
								row28.uuid = null;
							} else {
	                         		
        	row28.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_16, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_16 < 2) {
								row28.obsValue = null;
							} else {
	                         		
        	row28.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_16, 2, false);
		                    }
					



 



/**
 * [tSQLiteInput_16 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_16 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_16";

	

 


	tos_count_tSQLiteInput_16++;

/**
 * [tSQLiteInput_16 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row28 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";

	

			//row28
			//row28


			
				if(execStat){
					runStat.updateStatOnConnection("row28"+iterateId,1, 1);
				} 
			

		


			   
			   

					row28Struct row28_HashRow = new row28Struct();
		   	   	   
				
				row28_HashRow.uuid = row28.uuid;
				
				row28_HashRow.obsValue = row28.obsValue;
				
			tHash_Lookup_row28.put(row28_HashRow);
			
            




 


	tos_count_tAdvancedHash_row28++;

/**
 * [tAdvancedHash_row28 main ] stop
 */



	
	/**
	 * [tSQLiteInput_16 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_16";

	

	}
}finally{
	stmt_tSQLiteInput_16.close();

		if(conn_tSQLiteInput_16 != null && !conn_tSQLiteInput_16.isClosed()) {
			
			conn_tSQLiteInput_16.close();
			
		}
}
globalMap.put("tSQLiteInput_16_NB_LINE",nb_line_tSQLiteInput_16);

 

ok_Hash.put("tSQLiteInput_16", true);
end_Hash.put("tSQLiteInput_16", System.currentTimeMillis());




/**
 * [tSQLiteInput_16 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row28 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";

	

tHash_Lookup_row28.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row28"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row28", true);
end_Hash.put("tAdvancedHash_row28", System.currentTimeMillis());




/**
 * [tAdvancedHash_row28 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_16 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_16";

	

 



/**
 * [tSQLiteInput_16 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row28 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";

	

 



/**
 * [tAdvancedHash_row28 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_16_SUBPROCESS_STATE", 1);
	}
	


public static class row29Struct implements routines.system.IPersistableComparableLookupRow<row29Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row29Struct other = (row29Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row29Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            
	}

	public void copyKeysDataTo(row29Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row29Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row29Struct row29 = new row29Struct();




	
	/**
	 * [tAdvancedHash_row29 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row29", false);
		start_Hash.put("tAdvancedHash_row29", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row29";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row29" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row29 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row29{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row29().limitLog4jByte();

			   		// connection name:row29
			   		// source node:tSQLiteInput_17 - inputs:(after_tSQLiteInput_1) outputs:(row29,row29) | target node:tAdvancedHash_row29 - inputs:(row29) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row29 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct> tHash_Lookup_row29 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row29Struct>getLookup(matchingModeEnum_row29);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row29", tHash_Lookup_row29);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row29 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_17", false);
		start_Hash.put("tSQLiteInput_17", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_17";

	
		int tos_count_tSQLiteInput_17 = 0;
		
    	class BytesLimit65535_tSQLiteInput_17{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_17().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_17 = 0;
		    java.sql.Connection conn_tSQLiteInput_17 = null;
			    String driverClass_tSQLiteInput_17 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_17);
				
			String url_tSQLiteInput_17 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_17 = java.sql.DriverManager.getConnection(url_tSQLiteInput_17);
		    
			java.sql.Statement stmt_tSQLiteInput_17 = conn_tSQLiteInput_17.createStatement();

		    String dbquery_tSQLiteInput_17 = "SELECT uuid,\n		substr(obsValue, 1, 10) as obsValue\nFROM	TEND";
			

                       globalMap.put("tSQLiteInput_17_QUERY",dbquery_tSQLiteInput_17);

		    java.sql.ResultSet rs_tSQLiteInput_17 = null;
		try{
		    rs_tSQLiteInput_17 = stmt_tSQLiteInput_17.executeQuery(dbquery_tSQLiteInput_17);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_17 = rs_tSQLiteInput_17.getMetaData();
		    int colQtyInRs_tSQLiteInput_17 = rsmd_tSQLiteInput_17.getColumnCount();

		    String tmpContent_tSQLiteInput_17 = null;
		    
		    
		    while (rs_tSQLiteInput_17.next()) {
		        nb_line_tSQLiteInput_17++;
		        
							if(colQtyInRs_tSQLiteInput_17 < 1) {
								row29.uuid = null;
							} else {
	                         		
        	row29.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_17, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_17 < 2) {
								row29.obsValue = null;
							} else {
	                         		
        	row29.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_17, 2, false);
		                    }
					



 



/**
 * [tSQLiteInput_17 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_17 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_17";

	

 


	tos_count_tSQLiteInput_17++;

/**
 * [tSQLiteInput_17 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row29 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";

	

			//row29
			//row29


			
				if(execStat){
					runStat.updateStatOnConnection("row29"+iterateId,1, 1);
				} 
			

		


			   
			   

					row29Struct row29_HashRow = new row29Struct();
		   	   	   
				
				row29_HashRow.uuid = row29.uuid;
				
				row29_HashRow.obsValue = row29.obsValue;
				
			tHash_Lookup_row29.put(row29_HashRow);
			
            




 


	tos_count_tAdvancedHash_row29++;

/**
 * [tAdvancedHash_row29 main ] stop
 */



	
	/**
	 * [tSQLiteInput_17 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_17";

	

	}
}finally{
	stmt_tSQLiteInput_17.close();

		if(conn_tSQLiteInput_17 != null && !conn_tSQLiteInput_17.isClosed()) {
			
			conn_tSQLiteInput_17.close();
			
		}
}
globalMap.put("tSQLiteInput_17_NB_LINE",nb_line_tSQLiteInput_17);

 

ok_Hash.put("tSQLiteInput_17", true);
end_Hash.put("tSQLiteInput_17", System.currentTimeMillis());




/**
 * [tSQLiteInput_17 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row29 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";

	

tHash_Lookup_row29.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row29"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row29", true);
end_Hash.put("tAdvancedHash_row29", System.currentTimeMillis());




/**
 * [tAdvancedHash_row29 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_17 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_17";

	

 



/**
 * [tSQLiteInput_17 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row29 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";

	

 



/**
 * [tAdvancedHash_row29 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_17_SUBPROCESS_STATE", 1);
	}
	


public static class row30Struct implements routines.system.IPersistableComparableLookupRow<row30Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row30Struct other = (row30Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row30Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            
	}

	public void copyKeysDataTo(row30Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row30Struct row30 = new row30Struct();




	
	/**
	 * [tAdvancedHash_row30 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row30", false);
		start_Hash.put("tAdvancedHash_row30", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row30";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row30" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row30 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row30{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row30().limitLog4jByte();

			   		// connection name:row30
			   		// source node:tSQLiteInput_18 - inputs:(after_tSQLiteInput_1) outputs:(row30,row30) | target node:tAdvancedHash_row30 - inputs:(row30) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row30 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct> tHash_Lookup_row30 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row30Struct>getLookup(matchingModeEnum_row30);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row30", tHash_Lookup_row30);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row30 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_18", false);
		start_Hash.put("tSQLiteInput_18", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_18";

	
		int tos_count_tSQLiteInput_18 = 0;
		
    	class BytesLimit65535_tSQLiteInput_18{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_18().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_18 = 0;
		    java.sql.Connection conn_tSQLiteInput_18 = null;
			    String driverClass_tSQLiteInput_18 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_18);
				
			String url_tSQLiteInput_18 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_18 = java.sql.DriverManager.getConnection(url_tSQLiteInput_18);
		    
			java.sql.Statement stmt_tSQLiteInput_18 = conn_tSQLiteInput_18.createStatement();

		    String dbquery_tSQLiteInput_18 = "SELECT uuid,\n		substr(obsValue, 1, 10) as obsValue\nFROM	TEND2";
			

                       globalMap.put("tSQLiteInput_18_QUERY",dbquery_tSQLiteInput_18);

		    java.sql.ResultSet rs_tSQLiteInput_18 = null;
		try{
		    rs_tSQLiteInput_18 = stmt_tSQLiteInput_18.executeQuery(dbquery_tSQLiteInput_18);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_18 = rs_tSQLiteInput_18.getMetaData();
		    int colQtyInRs_tSQLiteInput_18 = rsmd_tSQLiteInput_18.getColumnCount();

		    String tmpContent_tSQLiteInput_18 = null;
		    
		    
		    while (rs_tSQLiteInput_18.next()) {
		        nb_line_tSQLiteInput_18++;
		        
							if(colQtyInRs_tSQLiteInput_18 < 1) {
								row30.uuid = null;
							} else {
	                         		
        	row30.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_18, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_18 < 2) {
								row30.obsValue = null;
							} else {
	                         		
        	row30.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_18, 2, false);
		                    }
					



 



/**
 * [tSQLiteInput_18 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_18 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_18";

	

 


	tos_count_tSQLiteInput_18++;

/**
 * [tSQLiteInput_18 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row30 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";

	

			//row30
			//row30


			
				if(execStat){
					runStat.updateStatOnConnection("row30"+iterateId,1, 1);
				} 
			

		


			   
			   

					row30Struct row30_HashRow = new row30Struct();
		   	   	   
				
				row30_HashRow.uuid = row30.uuid;
				
				row30_HashRow.obsValue = row30.obsValue;
				
			tHash_Lookup_row30.put(row30_HashRow);
			
            




 


	tos_count_tAdvancedHash_row30++;

/**
 * [tAdvancedHash_row30 main ] stop
 */



	
	/**
	 * [tSQLiteInput_18 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_18";

	

	}
}finally{
	stmt_tSQLiteInput_18.close();

		if(conn_tSQLiteInput_18 != null && !conn_tSQLiteInput_18.isClosed()) {
			
			conn_tSQLiteInput_18.close();
			
		}
}
globalMap.put("tSQLiteInput_18_NB_LINE",nb_line_tSQLiteInput_18);

 

ok_Hash.put("tSQLiteInput_18", true);
end_Hash.put("tSQLiteInput_18", System.currentTimeMillis());




/**
 * [tSQLiteInput_18 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row30 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";

	

tHash_Lookup_row30.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row30"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row30", true);
end_Hash.put("tAdvancedHash_row30", System.currentTimeMillis());




/**
 * [tAdvancedHash_row30 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_18 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_18";

	

 



/**
 * [tSQLiteInput_18 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row30 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";

	

 



/**
 * [tAdvancedHash_row30 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_18_SUBPROCESS_STATE", 1);
	}
	


public static class row31Struct implements routines.system.IPersistableComparableLookupRow<row31Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row31Struct other = (row31Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row31Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            
	}

	public void copyKeysDataTo(row31Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_19_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row31Struct row31 = new row31Struct();




	
	/**
	 * [tAdvancedHash_row31 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row31", false);
		start_Hash.put("tAdvancedHash_row31", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row31";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row31" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row31 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row31{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row31().limitLog4jByte();

			   		// connection name:row31
			   		// source node:tSQLiteInput_19 - inputs:(after_tSQLiteInput_1) outputs:(row31,row31) | target node:tAdvancedHash_row31 - inputs:(row31) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row31 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct> tHash_Lookup_row31 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row31Struct>getLookup(matchingModeEnum_row31);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row31", tHash_Lookup_row31);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row31 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_19", false);
		start_Hash.put("tSQLiteInput_19", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_19";

	
		int tos_count_tSQLiteInput_19 = 0;
		
    	class BytesLimit65535_tSQLiteInput_19{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_19().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_19 = 0;
		    java.sql.Connection conn_tSQLiteInput_19 = null;
			    String driverClass_tSQLiteInput_19 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_19);
				
			String url_tSQLiteInput_19 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_19 = java.sql.DriverManager.getConnection(url_tSQLiteInput_19);
		    
			java.sql.Statement stmt_tSQLiteInput_19 = conn_tSQLiteInput_19.createStatement();

		    String dbquery_tSQLiteInput_19 = "SELECT SCALARES_UNIT.uuid,\n		SCALARES_UNIT.obsValue\nFROM	SCALARES_UNIT";
			

                       globalMap.put("tSQLiteInput_19_QUERY",dbquery_tSQLiteInput_19);

		    java.sql.ResultSet rs_tSQLiteInput_19 = null;
		try{
		    rs_tSQLiteInput_19 = stmt_tSQLiteInput_19.executeQuery(dbquery_tSQLiteInput_19);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_19 = rs_tSQLiteInput_19.getMetaData();
		    int colQtyInRs_tSQLiteInput_19 = rsmd_tSQLiteInput_19.getColumnCount();

		    String tmpContent_tSQLiteInput_19 = null;
		    
		    
		    while (rs_tSQLiteInput_19.next()) {
		        nb_line_tSQLiteInput_19++;
		        
							if(colQtyInRs_tSQLiteInput_19 < 1) {
								row31.uuid = null;
							} else {
	                         		
        	row31.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_19, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_19 < 2) {
								row31.obsValue = null;
							} else {
	                         		
        	row31.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_19, 2, false);
		                    }
					



 



/**
 * [tSQLiteInput_19 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_19 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_19";

	

 


	tos_count_tSQLiteInput_19++;

/**
 * [tSQLiteInput_19 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row31 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row31";

	

			//row31
			//row31


			
				if(execStat){
					runStat.updateStatOnConnection("row31"+iterateId,1, 1);
				} 
			

		


			   
			   

					row31Struct row31_HashRow = new row31Struct();
		   	   	   
				
				row31_HashRow.uuid = row31.uuid;
				
				row31_HashRow.obsValue = row31.obsValue;
				
			tHash_Lookup_row31.put(row31_HashRow);
			
            




 


	tos_count_tAdvancedHash_row31++;

/**
 * [tAdvancedHash_row31 main ] stop
 */



	
	/**
	 * [tSQLiteInput_19 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_19";

	

	}
}finally{
	stmt_tSQLiteInput_19.close();

		if(conn_tSQLiteInput_19 != null && !conn_tSQLiteInput_19.isClosed()) {
			
			conn_tSQLiteInput_19.close();
			
		}
}
globalMap.put("tSQLiteInput_19_NB_LINE",nb_line_tSQLiteInput_19);

 

ok_Hash.put("tSQLiteInput_19", true);
end_Hash.put("tSQLiteInput_19", System.currentTimeMillis());




/**
 * [tSQLiteInput_19 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row31 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row31";

	

tHash_Lookup_row31.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row31"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row31", true);
end_Hash.put("tAdvancedHash_row31", System.currentTimeMillis());




/**
 * [tAdvancedHash_row31 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_19 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_19";

	

 



/**
 * [tSQLiteInput_19 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row31 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row31";

	

 



/**
 * [tAdvancedHash_row31 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_19_SUBPROCESS_STATE", 1);
	}
	


public static class row32Struct implements routines.system.IPersistableComparableLookupRow<row32Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				
			    public String obsValue2;

				public String getObsValue2 () {
					return this.obsValue2;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row32Struct other = (row32Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row32Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            other.obsValue2 = this.obsValue2;
	            
	}

	public void copyKeysDataTo(row32Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
						this.obsValue2 = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
						writeString(this.obsValue2, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
		sb.append(",obsValue2="+obsValue2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_25Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_25_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row32Struct row32 = new row32Struct();




	
	/**
	 * [tAdvancedHash_row32 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row32", false);
		start_Hash.put("tAdvancedHash_row32", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row32";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row32" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row32 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row32{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row32().limitLog4jByte();

			   		// connection name:row32
			   		// source node:tSQLiteInput_25 - inputs:(after_tSQLiteInput_1) outputs:(row32,row32) | target node:tAdvancedHash_row32 - inputs:(row32) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row32 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct> tHash_Lookup_row32 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row32Struct>getLookup(matchingModeEnum_row32);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row32", tHash_Lookup_row32);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row32 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_25", false);
		start_Hash.put("tSQLiteInput_25", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_25";

	
		int tos_count_tSQLiteInput_25 = 0;
		
    	class BytesLimit65535_tSQLiteInput_25{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_25().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_25 = 0;
		    java.sql.Connection conn_tSQLiteInput_25 = null;
			    String driverClass_tSQLiteInput_25 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_25);
				
			String url_tSQLiteInput_25 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_25 = java.sql.DriverManager.getConnection(url_tSQLiteInput_25);
		    
			java.sql.Statement stmt_tSQLiteInput_25 = conn_tSQLiteInput_25.createStatement();

		    String dbquery_tSQLiteInput_25 = "SELECT DISTINCT uuid, \nGROUP_CONCAT(obsValue2, '|') as obsValue\nFROM (\n  SELECT DISTINCT uuid, obsValue, obsValue2\n  FROM KEYWORDS\n  WHERE (obsValue LIKE '%GEMET%' AND\n      obsValue NOT LIKE '%INSPIRE%')\n)	\nGROUP BY uuid\nCOLLATE NOCASE\n";
			

                       globalMap.put("tSQLiteInput_25_QUERY",dbquery_tSQLiteInput_25);

		    java.sql.ResultSet rs_tSQLiteInput_25 = null;
		try{
		    rs_tSQLiteInput_25 = stmt_tSQLiteInput_25.executeQuery(dbquery_tSQLiteInput_25);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_25 = rs_tSQLiteInput_25.getMetaData();
		    int colQtyInRs_tSQLiteInput_25 = rsmd_tSQLiteInput_25.getColumnCount();

		    String tmpContent_tSQLiteInput_25 = null;
		    
		    
		    while (rs_tSQLiteInput_25.next()) {
		        nb_line_tSQLiteInput_25++;
		        
							if(colQtyInRs_tSQLiteInput_25 < 1) {
								row32.uuid = null;
							} else {
	                         		
        	row32.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_25, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_25 < 2) {
								row32.obsValue = null;
							} else {
	                         		
        	row32.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_25, 2, false);
		                    }
							if(colQtyInRs_tSQLiteInput_25 < 3) {
								row32.obsValue2 = null;
							} else {
	                         		
        	row32.obsValue2 = routines.system.JDBCUtil.getString(rs_tSQLiteInput_25, 3, false);
		                    }
					



 



/**
 * [tSQLiteInput_25 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_25 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_25";

	

 


	tos_count_tSQLiteInput_25++;

/**
 * [tSQLiteInput_25 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row32 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row32";

	

			//row32
			//row32


			
				if(execStat){
					runStat.updateStatOnConnection("row32"+iterateId,1, 1);
				} 
			

		


			   
			   

					row32Struct row32_HashRow = new row32Struct();
		   	   	   
				
				row32_HashRow.uuid = row32.uuid;
				
				row32_HashRow.obsValue = row32.obsValue;
				
				row32_HashRow.obsValue2 = row32.obsValue2;
				
			tHash_Lookup_row32.put(row32_HashRow);
			
            




 


	tos_count_tAdvancedHash_row32++;

/**
 * [tAdvancedHash_row32 main ] stop
 */



	
	/**
	 * [tSQLiteInput_25 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_25";

	

	}
}finally{
	stmt_tSQLiteInput_25.close();

		if(conn_tSQLiteInput_25 != null && !conn_tSQLiteInput_25.isClosed()) {
			
			conn_tSQLiteInput_25.close();
			
		}
}
globalMap.put("tSQLiteInput_25_NB_LINE",nb_line_tSQLiteInput_25);

 

ok_Hash.put("tSQLiteInput_25", true);
end_Hash.put("tSQLiteInput_25", System.currentTimeMillis());




/**
 * [tSQLiteInput_25 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row32 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row32";

	

tHash_Lookup_row32.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row32"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row32", true);
end_Hash.put("tAdvancedHash_row32", System.currentTimeMillis());




/**
 * [tAdvancedHash_row32 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_25 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_25";

	

 



/**
 * [tSQLiteInput_25 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row32 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row32";

	

 



/**
 * [tAdvancedHash_row32 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_25_SUBPROCESS_STATE", 1);
	}
	


public static class row33Struct implements routines.system.IPersistableComparableLookupRow<row33Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				
			    public String obsValue2;

				public String getObsValue2 () {
					return this.obsValue2;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row33Struct other = (row33Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row33Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            other.obsValue2 = this.obsValue2;
	            
	}

	public void copyKeysDataTo(row33Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
						this.obsValue2 = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
						writeString(this.obsValue2, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
		sb.append(",obsValue2="+obsValue2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row33Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_26Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_26_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row33Struct row33 = new row33Struct();




	
	/**
	 * [tAdvancedHash_row33 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row33", false);
		start_Hash.put("tAdvancedHash_row33", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row33";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row33" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row33 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row33{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row33().limitLog4jByte();

			   		// connection name:row33
			   		// source node:tSQLiteInput_26 - inputs:(after_tSQLiteInput_1) outputs:(row33,row33) | target node:tAdvancedHash_row33 - inputs:(row33) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row33 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct> tHash_Lookup_row33 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row33Struct>getLookup(matchingModeEnum_row33);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row33", tHash_Lookup_row33);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row33 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_26", false);
		start_Hash.put("tSQLiteInput_26", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_26";

	
		int tos_count_tSQLiteInput_26 = 0;
		
    	class BytesLimit65535_tSQLiteInput_26{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_26().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_26 = 0;
		    java.sql.Connection conn_tSQLiteInput_26 = null;
			    String driverClass_tSQLiteInput_26 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_26);
				
			String url_tSQLiteInput_26 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_26 = java.sql.DriverManager.getConnection(url_tSQLiteInput_26);
		    
			java.sql.Statement stmt_tSQLiteInput_26 = conn_tSQLiteInput_26.createStatement();

		    String dbquery_tSQLiteInput_26 = "SELECT DISTINCT uuid, \nGROUP_CONCAT(obsValue2, '|') as obsValue\nFROM (\n  SELECT DISTINCT uuid, obsValue, obsValue2\n  FROM KEYWORDS\n  WHERE (obsValue LIKE '%INSPIRE%' )\n)	\nGROUP BY uuid\nCOLLATE NOCASE\n";
			

                       globalMap.put("tSQLiteInput_26_QUERY",dbquery_tSQLiteInput_26);

		    java.sql.ResultSet rs_tSQLiteInput_26 = null;
		try{
		    rs_tSQLiteInput_26 = stmt_tSQLiteInput_26.executeQuery(dbquery_tSQLiteInput_26);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_26 = rs_tSQLiteInput_26.getMetaData();
		    int colQtyInRs_tSQLiteInput_26 = rsmd_tSQLiteInput_26.getColumnCount();

		    String tmpContent_tSQLiteInput_26 = null;
		    
		    
		    while (rs_tSQLiteInput_26.next()) {
		        nb_line_tSQLiteInput_26++;
		        
							if(colQtyInRs_tSQLiteInput_26 < 1) {
								row33.uuid = null;
							} else {
	                         		
        	row33.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_26, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_26 < 2) {
								row33.obsValue = null;
							} else {
	                         		
        	row33.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_26, 2, false);
		                    }
							if(colQtyInRs_tSQLiteInput_26 < 3) {
								row33.obsValue2 = null;
							} else {
	                         		
        	row33.obsValue2 = routines.system.JDBCUtil.getString(rs_tSQLiteInput_26, 3, false);
		                    }
					



 



/**
 * [tSQLiteInput_26 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_26 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_26";

	

 


	tos_count_tSQLiteInput_26++;

/**
 * [tSQLiteInput_26 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row33 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row33";

	

			//row33
			//row33


			
				if(execStat){
					runStat.updateStatOnConnection("row33"+iterateId,1, 1);
				} 
			

		


			   
			   

					row33Struct row33_HashRow = new row33Struct();
		   	   	   
				
				row33_HashRow.uuid = row33.uuid;
				
				row33_HashRow.obsValue = row33.obsValue;
				
				row33_HashRow.obsValue2 = row33.obsValue2;
				
			tHash_Lookup_row33.put(row33_HashRow);
			
            




 


	tos_count_tAdvancedHash_row33++;

/**
 * [tAdvancedHash_row33 main ] stop
 */



	
	/**
	 * [tSQLiteInput_26 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_26";

	

	}
}finally{
	stmt_tSQLiteInput_26.close();

		if(conn_tSQLiteInput_26 != null && !conn_tSQLiteInput_26.isClosed()) {
			
			conn_tSQLiteInput_26.close();
			
		}
}
globalMap.put("tSQLiteInput_26_NB_LINE",nb_line_tSQLiteInput_26);

 

ok_Hash.put("tSQLiteInput_26", true);
end_Hash.put("tSQLiteInput_26", System.currentTimeMillis());




/**
 * [tSQLiteInput_26 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row33 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row33";

	

tHash_Lookup_row33.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row33"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row33", true);
end_Hash.put("tAdvancedHash_row33", System.currentTimeMillis());




/**
 * [tAdvancedHash_row33 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_26 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_26";

	

 



/**
 * [tSQLiteInput_26 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row33 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row33";

	

 



/**
 * [tAdvancedHash_row33 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_26_SUBPROCESS_STATE", 1);
	}
	


public static class row34Struct implements routines.system.IPersistableComparableLookupRow<row34Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				
			    public String obsValue2;

				public String getObsValue2 () {
					return this.obsValue2;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row34Struct other = (row34Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row34Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            other.obsValue2 = this.obsValue2;
	            
	}

	public void copyKeysDataTo(row34Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
						this.obsValue2 = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
						writeString(this.obsValue2, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
		sb.append(",obsValue2="+obsValue2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_20Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_20_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row34Struct row34 = new row34Struct();




	
	/**
	 * [tAdvancedHash_row34 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row34", false);
		start_Hash.put("tAdvancedHash_row34", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row34";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row34" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row34 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row34{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row34().limitLog4jByte();

			   		// connection name:row34
			   		// source node:tSQLiteInput_20 - inputs:(after_tSQLiteInput_1) outputs:(row34,row34) | target node:tAdvancedHash_row34 - inputs:(row34) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row34 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct> tHash_Lookup_row34 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row34Struct>getLookup(matchingModeEnum_row34);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row34", tHash_Lookup_row34);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row34 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_20", false);
		start_Hash.put("tSQLiteInput_20", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_20";

	
		int tos_count_tSQLiteInput_20 = 0;
		
    	class BytesLimit65535_tSQLiteInput_20{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_20().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_20 = 0;
		    java.sql.Connection conn_tSQLiteInput_20 = null;
			    String driverClass_tSQLiteInput_20 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_20);
				
			String url_tSQLiteInput_20 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_20 = java.sql.DriverManager.getConnection(url_tSQLiteInput_20);
		    
			java.sql.Statement stmt_tSQLiteInput_20 = conn_tSQLiteInput_20.createStatement();

		    String dbquery_tSQLiteInput_20 = "SELECT DISTINCT uuid, \nGROUP_CONCAT(obsValue, '|') as obsValue\nFROM	(\n  SELECT DISTINCT uuid, obsValue\n  FROM online_resource\n)\nGROUP BY uuid\nCOLLATE NOCASE\n";
			

                       globalMap.put("tSQLiteInput_20_QUERY",dbquery_tSQLiteInput_20);

		    java.sql.ResultSet rs_tSQLiteInput_20 = null;
		try{
		    rs_tSQLiteInput_20 = stmt_tSQLiteInput_20.executeQuery(dbquery_tSQLiteInput_20);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_20 = rs_tSQLiteInput_20.getMetaData();
		    int colQtyInRs_tSQLiteInput_20 = rsmd_tSQLiteInput_20.getColumnCount();

		    String tmpContent_tSQLiteInput_20 = null;
		    
		    
		    while (rs_tSQLiteInput_20.next()) {
		        nb_line_tSQLiteInput_20++;
		        
							if(colQtyInRs_tSQLiteInput_20 < 1) {
								row34.uuid = null;
							} else {
	                         		
        	row34.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_20, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_20 < 2) {
								row34.obsValue = null;
							} else {
	                         		
        	row34.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_20, 2, false);
		                    }
							if(colQtyInRs_tSQLiteInput_20 < 3) {
								row34.obsValue2 = null;
							} else {
	                         		
        	row34.obsValue2 = routines.system.JDBCUtil.getString(rs_tSQLiteInput_20, 3, false);
		                    }
					



 



/**
 * [tSQLiteInput_20 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_20 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_20";

	

 


	tos_count_tSQLiteInput_20++;

/**
 * [tSQLiteInput_20 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row34 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";

	

			//row34
			//row34


			
				if(execStat){
					runStat.updateStatOnConnection("row34"+iterateId,1, 1);
				} 
			

		


			   
			   

					row34Struct row34_HashRow = new row34Struct();
		   	   	   
				
				row34_HashRow.uuid = row34.uuid;
				
				row34_HashRow.obsValue = row34.obsValue;
				
				row34_HashRow.obsValue2 = row34.obsValue2;
				
			tHash_Lookup_row34.put(row34_HashRow);
			
            




 


	tos_count_tAdvancedHash_row34++;

/**
 * [tAdvancedHash_row34 main ] stop
 */



	
	/**
	 * [tSQLiteInput_20 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_20";

	

	}
}finally{
	stmt_tSQLiteInput_20.close();

		if(conn_tSQLiteInput_20 != null && !conn_tSQLiteInput_20.isClosed()) {
			
			conn_tSQLiteInput_20.close();
			
		}
}
globalMap.put("tSQLiteInput_20_NB_LINE",nb_line_tSQLiteInput_20);

 

ok_Hash.put("tSQLiteInput_20", true);
end_Hash.put("tSQLiteInput_20", System.currentTimeMillis());




/**
 * [tSQLiteInput_20 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row34 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";

	

tHash_Lookup_row34.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row34"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row34", true);
end_Hash.put("tAdvancedHash_row34", System.currentTimeMillis());




/**
 * [tAdvancedHash_row34 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_20 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_20";

	

 



/**
 * [tSQLiteInput_20 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row34 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";

	

 



/**
 * [tAdvancedHash_row34 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_20_SUBPROCESS_STATE", 1);
	}
	


public static class row35Struct implements routines.system.IPersistableComparableLookupRow<row35Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				
			    public String obsValue2;

				public String getObsValue2 () {
					return this.obsValue2;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row35Struct other = (row35Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row35Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            other.obsValue2 = this.obsValue2;
	            
	}

	public void copyKeysDataTo(row35Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
						this.obsValue2 = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
						writeString(this.obsValue2, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
		sb.append(",obsValue2="+obsValue2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row35Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_24Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_24_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row35Struct row35 = new row35Struct();




	
	/**
	 * [tAdvancedHash_row35 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row35", false);
		start_Hash.put("tAdvancedHash_row35", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row35";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row35" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row35 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row35{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row35().limitLog4jByte();

			   		// connection name:row35
			   		// source node:tSQLiteInput_24 - inputs:(after_tSQLiteInput_1) outputs:(row35,row35) | target node:tAdvancedHash_row35 - inputs:(row35) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row35 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct> tHash_Lookup_row35 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row35Struct>getLookup(matchingModeEnum_row35);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row35", tHash_Lookup_row35);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row35 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_24", false);
		start_Hash.put("tSQLiteInput_24", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_24";

	
		int tos_count_tSQLiteInput_24 = 0;
		
    	class BytesLimit65535_tSQLiteInput_24{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_24().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_24 = 0;
		    java.sql.Connection conn_tSQLiteInput_24 = null;
			    String driverClass_tSQLiteInput_24 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_24);
				
			String url_tSQLiteInput_24 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_24 = java.sql.DriverManager.getConnection(url_tSQLiteInput_24);
		    
			java.sql.Statement stmt_tSQLiteInput_24 = conn_tSQLiteInput_24.createStatement();

		    String dbquery_tSQLiteInput_24 = "SELECT DISTINCT uuid, \nGROUP_CONCAT(obsValue2, '|') as obsValue\nFROM (\n  SELECT DISTINCT uuid, obsValue, obsValue2\n  FROM KEYWORDS\n  WHERE (obsValue like '%Continents%' OR\n      length(obsValue) = 0)\n)	\nGROUP BY uuid\nCOLLATE NOCASE\n";
			

                       globalMap.put("tSQLiteInput_24_QUERY",dbquery_tSQLiteInput_24);

		    java.sql.ResultSet rs_tSQLiteInput_24 = null;
		try{
		    rs_tSQLiteInput_24 = stmt_tSQLiteInput_24.executeQuery(dbquery_tSQLiteInput_24);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_24 = rs_tSQLiteInput_24.getMetaData();
		    int colQtyInRs_tSQLiteInput_24 = rsmd_tSQLiteInput_24.getColumnCount();

		    String tmpContent_tSQLiteInput_24 = null;
		    
		    
		    while (rs_tSQLiteInput_24.next()) {
		        nb_line_tSQLiteInput_24++;
		        
							if(colQtyInRs_tSQLiteInput_24 < 1) {
								row35.uuid = null;
							} else {
	                         		
        	row35.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_24, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_24 < 2) {
								row35.obsValue = null;
							} else {
	                         		
        	row35.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_24, 2, false);
		                    }
							if(colQtyInRs_tSQLiteInput_24 < 3) {
								row35.obsValue2 = null;
							} else {
	                         		
        	row35.obsValue2 = routines.system.JDBCUtil.getString(rs_tSQLiteInput_24, 3, false);
		                    }
					



 



/**
 * [tSQLiteInput_24 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_24 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_24";

	

 


	tos_count_tSQLiteInput_24++;

/**
 * [tSQLiteInput_24 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row35 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row35";

	

			//row35
			//row35


			
				if(execStat){
					runStat.updateStatOnConnection("row35"+iterateId,1, 1);
				} 
			

		


			   
			   

					row35Struct row35_HashRow = new row35Struct();
		   	   	   
				
				row35_HashRow.uuid = row35.uuid;
				
				row35_HashRow.obsValue = row35.obsValue;
				
				row35_HashRow.obsValue2 = row35.obsValue2;
				
			tHash_Lookup_row35.put(row35_HashRow);
			
            




 


	tos_count_tAdvancedHash_row35++;

/**
 * [tAdvancedHash_row35 main ] stop
 */



	
	/**
	 * [tSQLiteInput_24 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_24";

	

	}
}finally{
	stmt_tSQLiteInput_24.close();

		if(conn_tSQLiteInput_24 != null && !conn_tSQLiteInput_24.isClosed()) {
			
			conn_tSQLiteInput_24.close();
			
		}
}
globalMap.put("tSQLiteInput_24_NB_LINE",nb_line_tSQLiteInput_24);

 

ok_Hash.put("tSQLiteInput_24", true);
end_Hash.put("tSQLiteInput_24", System.currentTimeMillis());




/**
 * [tSQLiteInput_24 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row35 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row35";

	

tHash_Lookup_row35.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row35"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row35", true);
end_Hash.put("tAdvancedHash_row35", System.currentTimeMillis());




/**
 * [tAdvancedHash_row35 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_24 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_24";

	

 



/**
 * [tSQLiteInput_24 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row35 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row35";

	

 



/**
 * [tAdvancedHash_row35 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_24_SUBPROCESS_STATE", 1);
	}
	


public static class row36Struct implements routines.system.IPersistableComparableLookupRow<row36Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				
			    public String obsValue2;

				public String getObsValue2 () {
					return this.obsValue2;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row36Struct other = (row36Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row36Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            other.obsValue2 = this.obsValue2;
	            
	}

	public void copyKeysDataTo(row36Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
						this.obsValue2 = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
						writeString(this.obsValue2, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
		sb.append(",obsValue2="+obsValue2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row36Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_27Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_27_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row36Struct row36 = new row36Struct();




	
	/**
	 * [tAdvancedHash_row36 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row36", false);
		start_Hash.put("tAdvancedHash_row36", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row36";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row36" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row36 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row36{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row36().limitLog4jByte();

			   		// connection name:row36
			   		// source node:tSQLiteInput_27 - inputs:(after_tSQLiteInput_1) outputs:(row36,row36) | target node:tAdvancedHash_row36 - inputs:(row36) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row36 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row36Struct> tHash_Lookup_row36 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row36Struct>getLookup(matchingModeEnum_row36);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row36", tHash_Lookup_row36);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row36 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_27", false);
		start_Hash.put("tSQLiteInput_27", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_27";

	
		int tos_count_tSQLiteInput_27 = 0;
		
    	class BytesLimit65535_tSQLiteInput_27{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_27().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_27 = 0;
		    java.sql.Connection conn_tSQLiteInput_27 = null;
			    String driverClass_tSQLiteInput_27 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_27);
				
			String url_tSQLiteInput_27 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_27 = java.sql.DriverManager.getConnection(url_tSQLiteInput_27);
		    
			java.sql.Statement stmt_tSQLiteInput_27 = conn_tSQLiteInput_27.createStatement();

		    String dbquery_tSQLiteInput_27 = "\nSELECT DISTINCT uuid, \nGROUP_CONCAT(obsValue2, '|') as obsValue\nFROM (\n	SELECT DISTINCT uuid, obsValue, obsValue2\n	FROM online_resource\n      WHERE obsValue LIKE '%REST%'\n)\nGROUP BY uuid\nCOLLATE NOCASE\n";
			

                       globalMap.put("tSQLiteInput_27_QUERY",dbquery_tSQLiteInput_27);

		    java.sql.ResultSet rs_tSQLiteInput_27 = null;
		try{
		    rs_tSQLiteInput_27 = stmt_tSQLiteInput_27.executeQuery(dbquery_tSQLiteInput_27);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_27 = rs_tSQLiteInput_27.getMetaData();
		    int colQtyInRs_tSQLiteInput_27 = rsmd_tSQLiteInput_27.getColumnCount();

		    String tmpContent_tSQLiteInput_27 = null;
		    
		    
		    while (rs_tSQLiteInput_27.next()) {
		        nb_line_tSQLiteInput_27++;
		        
							if(colQtyInRs_tSQLiteInput_27 < 1) {
								row36.uuid = null;
							} else {
	                         		
        	row36.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_27, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_27 < 2) {
								row36.obsValue = null;
							} else {
	                         		
        	row36.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_27, 2, false);
		                    }
							if(colQtyInRs_tSQLiteInput_27 < 3) {
								row36.obsValue2 = null;
							} else {
	                         		
        	row36.obsValue2 = routines.system.JDBCUtil.getString(rs_tSQLiteInput_27, 3, false);
		                    }
					



 



/**
 * [tSQLiteInput_27 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_27 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_27";

	

 


	tos_count_tSQLiteInput_27++;

/**
 * [tSQLiteInput_27 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row36 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row36";

	

			//row36
			//row36


			
				if(execStat){
					runStat.updateStatOnConnection("row36"+iterateId,1, 1);
				} 
			

		


			   
			   

					row36Struct row36_HashRow = new row36Struct();
		   	   	   
				
				row36_HashRow.uuid = row36.uuid;
				
				row36_HashRow.obsValue = row36.obsValue;
				
				row36_HashRow.obsValue2 = row36.obsValue2;
				
			tHash_Lookup_row36.put(row36_HashRow);
			
            




 


	tos_count_tAdvancedHash_row36++;

/**
 * [tAdvancedHash_row36 main ] stop
 */



	
	/**
	 * [tSQLiteInput_27 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_27";

	

	}
}finally{
	stmt_tSQLiteInput_27.close();

		if(conn_tSQLiteInput_27 != null && !conn_tSQLiteInput_27.isClosed()) {
			
			conn_tSQLiteInput_27.close();
			
		}
}
globalMap.put("tSQLiteInput_27_NB_LINE",nb_line_tSQLiteInput_27);

 

ok_Hash.put("tSQLiteInput_27", true);
end_Hash.put("tSQLiteInput_27", System.currentTimeMillis());




/**
 * [tSQLiteInput_27 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row36 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row36";

	

tHash_Lookup_row36.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row36"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row36", true);
end_Hash.put("tAdvancedHash_row36", System.currentTimeMillis());




/**
 * [tAdvancedHash_row36 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_27 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_27";

	

 



/**
 * [tSQLiteInput_27 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row36 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row36";

	

 



/**
 * [tAdvancedHash_row36 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_27_SUBPROCESS_STATE", 1);
	}
	


public static class row37Struct implements routines.system.IPersistableComparableLookupRow<row37Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				
			    public String obsValue2;

				public String getObsValue2 () {
					return this.obsValue2;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row37Struct other = (row37Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row37Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            other.obsValue2 = this.obsValue2;
	            
	}

	public void copyKeysDataTo(row37Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
						this.obsValue2 = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
						writeString(this.obsValue2, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
		sb.append(",obsValue2="+obsValue2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row37Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_28Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_28_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row37Struct row37 = new row37Struct();




	
	/**
	 * [tAdvancedHash_row37 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row37", false);
		start_Hash.put("tAdvancedHash_row37", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row37";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row37" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row37 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row37{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row37().limitLog4jByte();

			   		// connection name:row37
			   		// source node:tSQLiteInput_28 - inputs:(after_tSQLiteInput_1) outputs:(row37,row37) | target node:tAdvancedHash_row37 - inputs:(row37) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row37 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row37Struct> tHash_Lookup_row37 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row37Struct>getLookup(matchingModeEnum_row37);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row37", tHash_Lookup_row37);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row37 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_28 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_28", false);
		start_Hash.put("tSQLiteInput_28", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_28";

	
		int tos_count_tSQLiteInput_28 = 0;
		
    	class BytesLimit65535_tSQLiteInput_28{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_28().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_28 = 0;
		    java.sql.Connection conn_tSQLiteInput_28 = null;
			    String driverClass_tSQLiteInput_28 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_28);
				
			String url_tSQLiteInput_28 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_28 = java.sql.DriverManager.getConnection(url_tSQLiteInput_28);
		    
			java.sql.Statement stmt_tSQLiteInput_28 = conn_tSQLiteInput_28.createStatement();

		    String dbquery_tSQLiteInput_28 = "\nSELECT DISTINCT uuid, \nGROUP_CONCAT(obsValue2, '|') as obsValue\nFROM (\n	SELECT DISTINCT uuid, obsValue, obsValue2\n	FROM online_resource\n      WHERE obsValue LIKE '%OGC:WMS%'\n)\nGROUP BY uuid\nCOLLATE NOCASE\n";
			

                       globalMap.put("tSQLiteInput_28_QUERY",dbquery_tSQLiteInput_28);

		    java.sql.ResultSet rs_tSQLiteInput_28 = null;
		try{
		    rs_tSQLiteInput_28 = stmt_tSQLiteInput_28.executeQuery(dbquery_tSQLiteInput_28);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_28 = rs_tSQLiteInput_28.getMetaData();
		    int colQtyInRs_tSQLiteInput_28 = rsmd_tSQLiteInput_28.getColumnCount();

		    String tmpContent_tSQLiteInput_28 = null;
		    
		    
		    while (rs_tSQLiteInput_28.next()) {
		        nb_line_tSQLiteInput_28++;
		        
							if(colQtyInRs_tSQLiteInput_28 < 1) {
								row37.uuid = null;
							} else {
	                         		
        	row37.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_28, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_28 < 2) {
								row37.obsValue = null;
							} else {
	                         		
        	row37.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_28, 2, false);
		                    }
							if(colQtyInRs_tSQLiteInput_28 < 3) {
								row37.obsValue2 = null;
							} else {
	                         		
        	row37.obsValue2 = routines.system.JDBCUtil.getString(rs_tSQLiteInput_28, 3, false);
		                    }
					



 



/**
 * [tSQLiteInput_28 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_28 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_28";

	

 


	tos_count_tSQLiteInput_28++;

/**
 * [tSQLiteInput_28 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row37 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row37";

	

			//row37
			//row37


			
				if(execStat){
					runStat.updateStatOnConnection("row37"+iterateId,1, 1);
				} 
			

		


			   
			   

					row37Struct row37_HashRow = new row37Struct();
		   	   	   
				
				row37_HashRow.uuid = row37.uuid;
				
				row37_HashRow.obsValue = row37.obsValue;
				
				row37_HashRow.obsValue2 = row37.obsValue2;
				
			tHash_Lookup_row37.put(row37_HashRow);
			
            




 


	tos_count_tAdvancedHash_row37++;

/**
 * [tAdvancedHash_row37 main ] stop
 */



	
	/**
	 * [tSQLiteInput_28 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_28";

	

	}
}finally{
	stmt_tSQLiteInput_28.close();

		if(conn_tSQLiteInput_28 != null && !conn_tSQLiteInput_28.isClosed()) {
			
			conn_tSQLiteInput_28.close();
			
		}
}
globalMap.put("tSQLiteInput_28_NB_LINE",nb_line_tSQLiteInput_28);

 

ok_Hash.put("tSQLiteInput_28", true);
end_Hash.put("tSQLiteInput_28", System.currentTimeMillis());




/**
 * [tSQLiteInput_28 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row37 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row37";

	

tHash_Lookup_row37.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row37"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row37", true);
end_Hash.put("tAdvancedHash_row37", System.currentTimeMillis());




/**
 * [tAdvancedHash_row37 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_28 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_28";

	

 



/**
 * [tSQLiteInput_28 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row37 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row37";

	

 



/**
 * [tAdvancedHash_row37 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_28_SUBPROCESS_STATE", 1);
	}
	


public static class row38Struct implements routines.system.IPersistableComparableLookupRow<row38Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				
			    public String obsValue2;

				public String getObsValue2 () {
					return this.obsValue2;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row38Struct other = (row38Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row38Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            other.obsValue2 = this.obsValue2;
	            
	}

	public void copyKeysDataTo(row38Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
						this.obsValue2 = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
						writeString(this.obsValue2, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
		sb.append(",obsValue2="+obsValue2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row38Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_21Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_21_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row38Struct row38 = new row38Struct();




	
	/**
	 * [tAdvancedHash_row38 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row38", false);
		start_Hash.put("tAdvancedHash_row38", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row38";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row38" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row38 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row38{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row38().limitLog4jByte();

			   		// connection name:row38
			   		// source node:tSQLiteInput_21 - inputs:(after_tSQLiteInput_1) outputs:(row38,row38) | target node:tAdvancedHash_row38 - inputs:(row38) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row38 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct> tHash_Lookup_row38 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row38Struct>getLookup(matchingModeEnum_row38);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row38", tHash_Lookup_row38);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row38 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_21", false);
		start_Hash.put("tSQLiteInput_21", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_21";

	
		int tos_count_tSQLiteInput_21 = 0;
		
    	class BytesLimit65535_tSQLiteInput_21{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_21().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_21 = 0;
		    java.sql.Connection conn_tSQLiteInput_21 = null;
			    String driverClass_tSQLiteInput_21 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_21);
				
			String url_tSQLiteInput_21 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_21 = java.sql.DriverManager.getConnection(url_tSQLiteInput_21);
		    
			java.sql.Statement stmt_tSQLiteInput_21 = conn_tSQLiteInput_21.createStatement();

		    String dbquery_tSQLiteInput_21 = "SELECT DISTINCT uuid, \nGROUP_CONCAT(obsValue2, '|') as obsValue\nFROM (\n  SELECT DISTINCT uuid, obsValue, SUBSTR(obsValue2, 15) AS obsValue2\n  FROM KEYWORDS\n  WHERE obsValue2 like '%IDP_SHORTNAME_%'\n)	\nGROUP BY uuid\nCOLLATE NOCASE\n";
			

                       globalMap.put("tSQLiteInput_21_QUERY",dbquery_tSQLiteInput_21);

		    java.sql.ResultSet rs_tSQLiteInput_21 = null;
		try{
		    rs_tSQLiteInput_21 = stmt_tSQLiteInput_21.executeQuery(dbquery_tSQLiteInput_21);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_21 = rs_tSQLiteInput_21.getMetaData();
		    int colQtyInRs_tSQLiteInput_21 = rsmd_tSQLiteInput_21.getColumnCount();

		    String tmpContent_tSQLiteInput_21 = null;
		    
		    
		    while (rs_tSQLiteInput_21.next()) {
		        nb_line_tSQLiteInput_21++;
		        
							if(colQtyInRs_tSQLiteInput_21 < 1) {
								row38.uuid = null;
							} else {
	                         		
        	row38.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_21, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_21 < 2) {
								row38.obsValue = null;
							} else {
	                         		
        	row38.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_21, 2, false);
		                    }
							if(colQtyInRs_tSQLiteInput_21 < 3) {
								row38.obsValue2 = null;
							} else {
	                         		
        	row38.obsValue2 = routines.system.JDBCUtil.getString(rs_tSQLiteInput_21, 3, false);
		                    }
					



 



/**
 * [tSQLiteInput_21 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_21 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_21";

	

 


	tos_count_tSQLiteInput_21++;

/**
 * [tSQLiteInput_21 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row38 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row38";

	

			//row38
			//row38


			
				if(execStat){
					runStat.updateStatOnConnection("row38"+iterateId,1, 1);
				} 
			

		


			   
			   

					row38Struct row38_HashRow = new row38Struct();
		   	   	   
				
				row38_HashRow.uuid = row38.uuid;
				
				row38_HashRow.obsValue = row38.obsValue;
				
				row38_HashRow.obsValue2 = row38.obsValue2;
				
			tHash_Lookup_row38.put(row38_HashRow);
			
            




 


	tos_count_tAdvancedHash_row38++;

/**
 * [tAdvancedHash_row38 main ] stop
 */



	
	/**
	 * [tSQLiteInput_21 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_21";

	

	}
}finally{
	stmt_tSQLiteInput_21.close();

		if(conn_tSQLiteInput_21 != null && !conn_tSQLiteInput_21.isClosed()) {
			
			conn_tSQLiteInput_21.close();
			
		}
}
globalMap.put("tSQLiteInput_21_NB_LINE",nb_line_tSQLiteInput_21);

 

ok_Hash.put("tSQLiteInput_21", true);
end_Hash.put("tSQLiteInput_21", System.currentTimeMillis());




/**
 * [tSQLiteInput_21 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row38 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row38";

	

tHash_Lookup_row38.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row38"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row38", true);
end_Hash.put("tAdvancedHash_row38", System.currentTimeMillis());




/**
 * [tAdvancedHash_row38 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_21 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_21";

	

 



/**
 * [tSQLiteInput_21 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row38 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row38";

	

 



/**
 * [tAdvancedHash_row38 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_21_SUBPROCESS_STATE", 1);
	}
	


public static class row39Struct implements routines.system.IPersistableComparableLookupRow<row39Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				
			    public String obsValue2;

				public String getObsValue2 () {
					return this.obsValue2;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row39Struct other = (row39Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row39Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            other.obsValue2 = this.obsValue2;
	            
	}

	public void copyKeysDataTo(row39Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
						this.obsValue2 = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
						writeString(this.obsValue2, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
		sb.append(",obsValue2="+obsValue2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row39Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_22Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_22_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row39Struct row39 = new row39Struct();




	
	/**
	 * [tAdvancedHash_row39 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row39", false);
		start_Hash.put("tAdvancedHash_row39", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row39";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row39" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row39 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row39{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row39().limitLog4jByte();

			   		// connection name:row39
			   		// source node:tSQLiteInput_22 - inputs:(after_tSQLiteInput_1) outputs:(row39,row39) | target node:tAdvancedHash_row39 - inputs:(row39) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row39 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row39Struct> tHash_Lookup_row39 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row39Struct>getLookup(matchingModeEnum_row39);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row39", tHash_Lookup_row39);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row39 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_22", false);
		start_Hash.put("tSQLiteInput_22", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_22";

	
		int tos_count_tSQLiteInput_22 = 0;
		
    	class BytesLimit65535_tSQLiteInput_22{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_22().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_22 = 0;
		    java.sql.Connection conn_tSQLiteInput_22 = null;
			    String driverClass_tSQLiteInput_22 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_22);
				
			String url_tSQLiteInput_22 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_22 = java.sql.DriverManager.getConnection(url_tSQLiteInput_22);
		    
			java.sql.Statement stmt_tSQLiteInput_22 = conn_tSQLiteInput_22.createStatement();

		    String dbquery_tSQLiteInput_22 = "SELECT DISTINCT uuid, \n'Y' obsValue,\nobsValue2\nFROM	KEYWORDS\nWHERE obsValue2 LIKE '%IDP_REFERENCE%'\nCOLLATE NOCASE\n";
			

                       globalMap.put("tSQLiteInput_22_QUERY",dbquery_tSQLiteInput_22);

		    java.sql.ResultSet rs_tSQLiteInput_22 = null;
		try{
		    rs_tSQLiteInput_22 = stmt_tSQLiteInput_22.executeQuery(dbquery_tSQLiteInput_22);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_22 = rs_tSQLiteInput_22.getMetaData();
		    int colQtyInRs_tSQLiteInput_22 = rsmd_tSQLiteInput_22.getColumnCount();

		    String tmpContent_tSQLiteInput_22 = null;
		    
		    
		    while (rs_tSQLiteInput_22.next()) {
		        nb_line_tSQLiteInput_22++;
		        
							if(colQtyInRs_tSQLiteInput_22 < 1) {
								row39.uuid = null;
							} else {
	                         		
        	row39.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_22, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_22 < 2) {
								row39.obsValue = null;
							} else {
	                         		
        	row39.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_22, 2, false);
		                    }
							if(colQtyInRs_tSQLiteInput_22 < 3) {
								row39.obsValue2 = null;
							} else {
	                         		
        	row39.obsValue2 = routines.system.JDBCUtil.getString(rs_tSQLiteInput_22, 3, false);
		                    }
					



 



/**
 * [tSQLiteInput_22 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_22 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_22";

	

 


	tos_count_tSQLiteInput_22++;

/**
 * [tSQLiteInput_22 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row39 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row39";

	

			//row39
			//row39


			
				if(execStat){
					runStat.updateStatOnConnection("row39"+iterateId,1, 1);
				} 
			

		


			   
			   

					row39Struct row39_HashRow = new row39Struct();
		   	   	   
				
				row39_HashRow.uuid = row39.uuid;
				
				row39_HashRow.obsValue = row39.obsValue;
				
				row39_HashRow.obsValue2 = row39.obsValue2;
				
			tHash_Lookup_row39.put(row39_HashRow);
			
            




 


	tos_count_tAdvancedHash_row39++;

/**
 * [tAdvancedHash_row39 main ] stop
 */



	
	/**
	 * [tSQLiteInput_22 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_22";

	

	}
}finally{
	stmt_tSQLiteInput_22.close();

		if(conn_tSQLiteInput_22 != null && !conn_tSQLiteInput_22.isClosed()) {
			
			conn_tSQLiteInput_22.close();
			
		}
}
globalMap.put("tSQLiteInput_22_NB_LINE",nb_line_tSQLiteInput_22);

 

ok_Hash.put("tSQLiteInput_22", true);
end_Hash.put("tSQLiteInput_22", System.currentTimeMillis());




/**
 * [tSQLiteInput_22 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row39 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row39";

	

tHash_Lookup_row39.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row39"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row39", true);
end_Hash.put("tAdvancedHash_row39", System.currentTimeMillis());




/**
 * [tAdvancedHash_row39 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_22 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_22";

	

 



/**
 * [tSQLiteInput_22 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row39 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row39";

	

 



/**
 * [tAdvancedHash_row39 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_22_SUBPROCESS_STATE", 1);
	}
	


public static class row40Struct implements routines.system.IPersistableComparableLookupRow<row40Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				
			    public String obsValue2;

				public String getObsValue2 () {
					return this.obsValue2;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row40Struct other = (row40Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row40Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            other.obsValue2 = this.obsValue2;
	            
	}

	public void copyKeysDataTo(row40Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
						this.obsValue2 = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
						writeString(this.obsValue2, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
		sb.append(",obsValue2="+obsValue2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row40Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_23Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_23_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row40Struct row40 = new row40Struct();




	
	/**
	 * [tAdvancedHash_row40 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row40", false);
		start_Hash.put("tAdvancedHash_row40", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row40";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row40" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row40 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row40{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row40().limitLog4jByte();

			   		// connection name:row40
			   		// source node:tSQLiteInput_23 - inputs:(after_tSQLiteInput_1) outputs:(row40,row40) | target node:tAdvancedHash_row40 - inputs:(row40) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row40 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct> tHash_Lookup_row40 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row40Struct>getLookup(matchingModeEnum_row40);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row40", tHash_Lookup_row40);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row40 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_23", false);
		start_Hash.put("tSQLiteInput_23", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_23";

	
		int tos_count_tSQLiteInput_23 = 0;
		
    	class BytesLimit65535_tSQLiteInput_23{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_23().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_23 = 0;
		    java.sql.Connection conn_tSQLiteInput_23 = null;
			    String driverClass_tSQLiteInput_23 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_23);
				
			String url_tSQLiteInput_23 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_23 = java.sql.DriverManager.getConnection(url_tSQLiteInput_23);
		    
			java.sql.Statement stmt_tSQLiteInput_23 = conn_tSQLiteInput_23.createStatement();

		    String dbquery_tSQLiteInput_23 = "SELECT DISTINCT uuid, \nGROUP_CONCAT(obsValue2, '|') as obsValue\nFROM (\n  SELECT DISTINCT uuid, obsValue, SUBSTR(obsValue2, 12) AS obsValue2\n  FROM KEYWORDS\n  WHERE obsValue2 like '%IDP_TOPICS_%'\n)	\nGROUP BY uuid\nCOLLATE NOCASE\n";
			

                       globalMap.put("tSQLiteInput_23_QUERY",dbquery_tSQLiteInput_23);

		    java.sql.ResultSet rs_tSQLiteInput_23 = null;
		try{
		    rs_tSQLiteInput_23 = stmt_tSQLiteInput_23.executeQuery(dbquery_tSQLiteInput_23);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_23 = rs_tSQLiteInput_23.getMetaData();
		    int colQtyInRs_tSQLiteInput_23 = rsmd_tSQLiteInput_23.getColumnCount();

		    String tmpContent_tSQLiteInput_23 = null;
		    
		    
		    while (rs_tSQLiteInput_23.next()) {
		        nb_line_tSQLiteInput_23++;
		        
							if(colQtyInRs_tSQLiteInput_23 < 1) {
								row40.uuid = null;
							} else {
	                         		
        	row40.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_23, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_23 < 2) {
								row40.obsValue = null;
							} else {
	                         		
        	row40.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_23, 2, false);
		                    }
							if(colQtyInRs_tSQLiteInput_23 < 3) {
								row40.obsValue2 = null;
							} else {
	                         		
        	row40.obsValue2 = routines.system.JDBCUtil.getString(rs_tSQLiteInput_23, 3, false);
		                    }
					



 



/**
 * [tSQLiteInput_23 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_23 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_23";

	

 


	tos_count_tSQLiteInput_23++;

/**
 * [tSQLiteInput_23 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row40 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row40";

	

			//row40
			//row40


			
				if(execStat){
					runStat.updateStatOnConnection("row40"+iterateId,1, 1);
				} 
			

		


			   
			   

					row40Struct row40_HashRow = new row40Struct();
		   	   	   
				
				row40_HashRow.uuid = row40.uuid;
				
				row40_HashRow.obsValue = row40.obsValue;
				
				row40_HashRow.obsValue2 = row40.obsValue2;
				
			tHash_Lookup_row40.put(row40_HashRow);
			
            




 


	tos_count_tAdvancedHash_row40++;

/**
 * [tAdvancedHash_row40 main ] stop
 */



	
	/**
	 * [tSQLiteInput_23 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_23";

	

	}
}finally{
	stmt_tSQLiteInput_23.close();

		if(conn_tSQLiteInput_23 != null && !conn_tSQLiteInput_23.isClosed()) {
			
			conn_tSQLiteInput_23.close();
			
		}
}
globalMap.put("tSQLiteInput_23_NB_LINE",nb_line_tSQLiteInput_23);

 

ok_Hash.put("tSQLiteInput_23", true);
end_Hash.put("tSQLiteInput_23", System.currentTimeMillis());




/**
 * [tSQLiteInput_23 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row40 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row40";

	

tHash_Lookup_row40.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row40"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row40", true);
end_Hash.put("tAdvancedHash_row40", System.currentTimeMillis());




/**
 * [tAdvancedHash_row40 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_23 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_23";

	

 



/**
 * [tSQLiteInput_23 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row40 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row40";

	

 



/**
 * [tAdvancedHash_row40 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_23_SUBPROCESS_STATE", 1);
	}
	


public static class row41Struct implements routines.system.IPersistableComparableLookupRow<row41Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row41Struct other = (row41Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row41Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            
	}

	public void copyKeysDataTo(row41Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row41Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_29Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_29_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row41Struct row41 = new row41Struct();




	
	/**
	 * [tAdvancedHash_row41 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row41", false);
		start_Hash.put("tAdvancedHash_row41", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row41";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row41" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row41 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row41{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row41().limitLog4jByte();

			   		// connection name:row41
			   		// source node:tSQLiteInput_29 - inputs:(after_tSQLiteInput_1) outputs:(row41,row41) | target node:tAdvancedHash_row41 - inputs:(row41) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row41 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row41Struct> tHash_Lookup_row41 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row41Struct>getLookup(matchingModeEnum_row41);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row41", tHash_Lookup_row41);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row41 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_29 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_29", false);
		start_Hash.put("tSQLiteInput_29", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_29";

	
		int tos_count_tSQLiteInput_29 = 0;
		
    	class BytesLimit65535_tSQLiteInput_29{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_29().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_29 = 0;
		    java.sql.Connection conn_tSQLiteInput_29 = null;
			    String driverClass_tSQLiteInput_29 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_29);
				
			String url_tSQLiteInput_29 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_29 = java.sql.DriverManager.getConnection(url_tSQLiteInput_29);
		    
			java.sql.Statement stmt_tSQLiteInput_29 = conn_tSQLiteInput_29.createStatement();

		    String dbquery_tSQLiteInput_29 = "SELECT STATUS.uuid,\n		STATUS.obsValue\nFROM	STATUS";
			

                       globalMap.put("tSQLiteInput_29_QUERY",dbquery_tSQLiteInput_29);

		    java.sql.ResultSet rs_tSQLiteInput_29 = null;
		try{
		    rs_tSQLiteInput_29 = stmt_tSQLiteInput_29.executeQuery(dbquery_tSQLiteInput_29);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_29 = rs_tSQLiteInput_29.getMetaData();
		    int colQtyInRs_tSQLiteInput_29 = rsmd_tSQLiteInput_29.getColumnCount();

		    String tmpContent_tSQLiteInput_29 = null;
		    
		    
		    while (rs_tSQLiteInput_29.next()) {
		        nb_line_tSQLiteInput_29++;
		        
							if(colQtyInRs_tSQLiteInput_29 < 1) {
								row41.uuid = null;
							} else {
	                         		
        	row41.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_29, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_29 < 2) {
								row41.obsValue = null;
							} else {
	                         		
        	row41.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_29, 2, false);
		                    }
					



 



/**
 * [tSQLiteInput_29 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_29 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_29";

	

 


	tos_count_tSQLiteInput_29++;

/**
 * [tSQLiteInput_29 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row41 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row41";

	

			//row41
			//row41


			
				if(execStat){
					runStat.updateStatOnConnection("row41"+iterateId,1, 1);
				} 
			

		


			   
			   

					row41Struct row41_HashRow = new row41Struct();
		   	   	   
				
				row41_HashRow.uuid = row41.uuid;
				
				row41_HashRow.obsValue = row41.obsValue;
				
			tHash_Lookup_row41.put(row41_HashRow);
			
            




 


	tos_count_tAdvancedHash_row41++;

/**
 * [tAdvancedHash_row41 main ] stop
 */



	
	/**
	 * [tSQLiteInput_29 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_29";

	

	}
}finally{
	stmt_tSQLiteInput_29.close();

		if(conn_tSQLiteInput_29 != null && !conn_tSQLiteInput_29.isClosed()) {
			
			conn_tSQLiteInput_29.close();
			
		}
}
globalMap.put("tSQLiteInput_29_NB_LINE",nb_line_tSQLiteInput_29);

 

ok_Hash.put("tSQLiteInput_29", true);
end_Hash.put("tSQLiteInput_29", System.currentTimeMillis());




/**
 * [tSQLiteInput_29 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row41 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row41";

	

tHash_Lookup_row41.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row41"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row41", true);
end_Hash.put("tAdvancedHash_row41", System.currentTimeMillis());




/**
 * [tAdvancedHash_row41 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_29 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_29";

	

 



/**
 * [tSQLiteInput_29 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row41 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row41";

	

 



/**
 * [tAdvancedHash_row41 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_29_SUBPROCESS_STATE", 1);
	}
	


public static class row42Struct implements routines.system.IPersistableComparableLookupRow<row42Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row42Struct other = (row42Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row42Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            
	}

	public void copyKeysDataTo(row42Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row42Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_31Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_31_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row42Struct row42 = new row42Struct();




	
	/**
	 * [tAdvancedHash_row42 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row42", false);
		start_Hash.put("tAdvancedHash_row42", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row42";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row42" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row42 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row42{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row42().limitLog4jByte();

			   		// connection name:row42
			   		// source node:tSQLiteInput_31 - inputs:(after_tSQLiteInput_1) outputs:(row42,row42) | target node:tAdvancedHash_row42 - inputs:(row42) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row42 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct> tHash_Lookup_row42 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row42Struct>getLookup(matchingModeEnum_row42);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row42", tHash_Lookup_row42);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row42 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_31 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_31", false);
		start_Hash.put("tSQLiteInput_31", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_31";

	
		int tos_count_tSQLiteInput_31 = 0;
		
    	class BytesLimit65535_tSQLiteInput_31{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_31().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_31 = 0;
		    java.sql.Connection conn_tSQLiteInput_31 = null;
			    String driverClass_tSQLiteInput_31 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_31);
				
			String url_tSQLiteInput_31 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_31 = java.sql.DriverManager.getConnection(url_tSQLiteInput_31);
		    
			java.sql.Statement stmt_tSQLiteInput_31 = conn_tSQLiteInput_31.createStatement();

		    String dbquery_tSQLiteInput_31 = "SELECT DISTINCT uuid, \nGROUP_CONCAT(obsValue, '|') as obsValue\nFROM	(\n  SELECT DISTINCT uuid, obsValue\n  FROM mediatype\n)\nGROUP BY uuid\nCOLLATE NOCASE\n";
			

                       globalMap.put("tSQLiteInput_31_QUERY",dbquery_tSQLiteInput_31);

		    java.sql.ResultSet rs_tSQLiteInput_31 = null;
		try{
		    rs_tSQLiteInput_31 = stmt_tSQLiteInput_31.executeQuery(dbquery_tSQLiteInput_31);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_31 = rs_tSQLiteInput_31.getMetaData();
		    int colQtyInRs_tSQLiteInput_31 = rsmd_tSQLiteInput_31.getColumnCount();

		    String tmpContent_tSQLiteInput_31 = null;
		    
		    
		    while (rs_tSQLiteInput_31.next()) {
		        nb_line_tSQLiteInput_31++;
		        
							if(colQtyInRs_tSQLiteInput_31 < 1) {
								row42.uuid = null;
							} else {
	                         		
        	row42.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_31, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_31 < 2) {
								row42.obsValue = null;
							} else {
	                         		
        	row42.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_31, 2, false);
		                    }
					



 



/**
 * [tSQLiteInput_31 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_31 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_31";

	

 


	tos_count_tSQLiteInput_31++;

/**
 * [tSQLiteInput_31 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row42 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row42";

	

			//row42
			//row42


			
				if(execStat){
					runStat.updateStatOnConnection("row42"+iterateId,1, 1);
				} 
			

		


			   
			   

					row42Struct row42_HashRow = new row42Struct();
		   	   	   
				
				row42_HashRow.uuid = row42.uuid;
				
				row42_HashRow.obsValue = row42.obsValue;
				
			tHash_Lookup_row42.put(row42_HashRow);
			
            




 


	tos_count_tAdvancedHash_row42++;

/**
 * [tAdvancedHash_row42 main ] stop
 */



	
	/**
	 * [tSQLiteInput_31 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_31";

	

	}
}finally{
	stmt_tSQLiteInput_31.close();

		if(conn_tSQLiteInput_31 != null && !conn_tSQLiteInput_31.isClosed()) {
			
			conn_tSQLiteInput_31.close();
			
		}
}
globalMap.put("tSQLiteInput_31_NB_LINE",nb_line_tSQLiteInput_31);

 

ok_Hash.put("tSQLiteInput_31", true);
end_Hash.put("tSQLiteInput_31", System.currentTimeMillis());




/**
 * [tSQLiteInput_31 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row42 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row42";

	

tHash_Lookup_row42.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row42"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row42", true);
end_Hash.put("tAdvancedHash_row42", System.currentTimeMillis());




/**
 * [tAdvancedHash_row42 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_31 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_31";

	

 



/**
 * [tSQLiteInput_31 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row42 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row42";

	

 



/**
 * [tAdvancedHash_row42 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_31_SUBPROCESS_STATE", 1);
	}
	


public static class row43Struct implements routines.system.IPersistableComparableLookupRow<row43Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row43Struct other = (row43Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row43Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            
	}

	public void copyKeysDataTo(row43Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row43Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_30Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_30_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row43Struct row43 = new row43Struct();




	
	/**
	 * [tAdvancedHash_row43 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row43", false);
		start_Hash.put("tAdvancedHash_row43", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row43";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row43" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row43 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row43{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row43().limitLog4jByte();

			   		// connection name:row43
			   		// source node:tSQLiteInput_30 - inputs:(after_tSQLiteInput_1) outputs:(row43,row43) | target node:tAdvancedHash_row43 - inputs:(row43) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row43 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row43Struct> tHash_Lookup_row43 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row43Struct>getLookup(matchingModeEnum_row43);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row43", tHash_Lookup_row43);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row43 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_30 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_30", false);
		start_Hash.put("tSQLiteInput_30", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_30";

	
		int tos_count_tSQLiteInput_30 = 0;
		
    	class BytesLimit65535_tSQLiteInput_30{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_30().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_30 = 0;
		    java.sql.Connection conn_tSQLiteInput_30 = null;
			    String driverClass_tSQLiteInput_30 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_30);
				
			String url_tSQLiteInput_30 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_30 = java.sql.DriverManager.getConnection(url_tSQLiteInput_30);
		    
			java.sql.Statement stmt_tSQLiteInput_30 = conn_tSQLiteInput_30.createStatement();

		    String dbquery_tSQLiteInput_30 = "SELECT USELIMITATION.uuid,\n		USELIMITATION.obsValue\nFROM	USELIMITATION";
			

                       globalMap.put("tSQLiteInput_30_QUERY",dbquery_tSQLiteInput_30);

		    java.sql.ResultSet rs_tSQLiteInput_30 = null;
		try{
		    rs_tSQLiteInput_30 = stmt_tSQLiteInput_30.executeQuery(dbquery_tSQLiteInput_30);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_30 = rs_tSQLiteInput_30.getMetaData();
		    int colQtyInRs_tSQLiteInput_30 = rsmd_tSQLiteInput_30.getColumnCount();

		    String tmpContent_tSQLiteInput_30 = null;
		    
		    
		    while (rs_tSQLiteInput_30.next()) {
		        nb_line_tSQLiteInput_30++;
		        
							if(colQtyInRs_tSQLiteInput_30 < 1) {
								row43.uuid = null;
							} else {
	                         		
        	row43.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_30, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_30 < 2) {
								row43.obsValue = null;
							} else {
	                         		
        	row43.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_30, 2, false);
		                    }
					



 



/**
 * [tSQLiteInput_30 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_30 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_30";

	

 


	tos_count_tSQLiteInput_30++;

/**
 * [tSQLiteInput_30 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row43 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row43";

	

			//row43
			//row43


			
				if(execStat){
					runStat.updateStatOnConnection("row43"+iterateId,1, 1);
				} 
			

		


			   
			   

					row43Struct row43_HashRow = new row43Struct();
		   	   	   
				
				row43_HashRow.uuid = row43.uuid;
				
				row43_HashRow.obsValue = row43.obsValue;
				
			tHash_Lookup_row43.put(row43_HashRow);
			
            




 


	tos_count_tAdvancedHash_row43++;

/**
 * [tAdvancedHash_row43 main ] stop
 */



	
	/**
	 * [tSQLiteInput_30 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_30";

	

	}
}finally{
	stmt_tSQLiteInput_30.close();

		if(conn_tSQLiteInput_30 != null && !conn_tSQLiteInput_30.isClosed()) {
			
			conn_tSQLiteInput_30.close();
			
		}
}
globalMap.put("tSQLiteInput_30_NB_LINE",nb_line_tSQLiteInput_30);

 

ok_Hash.put("tSQLiteInput_30", true);
end_Hash.put("tSQLiteInput_30", System.currentTimeMillis());




/**
 * [tSQLiteInput_30 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row43 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row43";

	

tHash_Lookup_row43.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row43"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row43", true);
end_Hash.put("tAdvancedHash_row43", System.currentTimeMillis());




/**
 * [tAdvancedHash_row43 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_30 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_30";

	

 



/**
 * [tSQLiteInput_30 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row43 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row43";

	

 



/**
 * [tAdvancedHash_row43 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_30_SUBPROCESS_STATE", 1);
	}
	


public static class row44Struct implements routines.system.IPersistableComparableLookupRow<row44Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row44Struct other = (row44Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row44Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            
	}

	public void copyKeysDataTo(row44Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row44Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_32Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_32_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row44Struct row44 = new row44Struct();




	
	/**
	 * [tAdvancedHash_row44 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row44", false);
		start_Hash.put("tAdvancedHash_row44", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row44";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row44" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row44 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row44{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row44().limitLog4jByte();

			   		// connection name:row44
			   		// source node:tSQLiteInput_32 - inputs:(after_tSQLiteInput_1) outputs:(row44,row44) | target node:tAdvancedHash_row44 - inputs:(row44) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row44 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row44Struct> tHash_Lookup_row44 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row44Struct>getLookup(matchingModeEnum_row44);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row44", tHash_Lookup_row44);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row44 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_32 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_32", false);
		start_Hash.put("tSQLiteInput_32", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_32";

	
		int tos_count_tSQLiteInput_32 = 0;
		
    	class BytesLimit65535_tSQLiteInput_32{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_32().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_32 = 0;
		    java.sql.Connection conn_tSQLiteInput_32 = null;
			    String driverClass_tSQLiteInput_32 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_32);
				
			String url_tSQLiteInput_32 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_32 = java.sql.DriverManager.getConnection(url_tSQLiteInput_32);
		    
			java.sql.Statement stmt_tSQLiteInput_32 = conn_tSQLiteInput_32.createStatement();

		    String dbquery_tSQLiteInput_32 = "SELECT LINEAGE.uuid,\n		LINEAGE.obsValue\nFROM	LINEAGE";
			

                       globalMap.put("tSQLiteInput_32_QUERY",dbquery_tSQLiteInput_32);

		    java.sql.ResultSet rs_tSQLiteInput_32 = null;
		try{
		    rs_tSQLiteInput_32 = stmt_tSQLiteInput_32.executeQuery(dbquery_tSQLiteInput_32);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_32 = rs_tSQLiteInput_32.getMetaData();
		    int colQtyInRs_tSQLiteInput_32 = rsmd_tSQLiteInput_32.getColumnCount();

		    String tmpContent_tSQLiteInput_32 = null;
		    
		    
		    while (rs_tSQLiteInput_32.next()) {
		        nb_line_tSQLiteInput_32++;
		        
							if(colQtyInRs_tSQLiteInput_32 < 1) {
								row44.uuid = null;
							} else {
	                         		
        	row44.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_32, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_32 < 2) {
								row44.obsValue = null;
							} else {
	                         		
        	row44.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_32, 2, false);
		                    }
					



 



/**
 * [tSQLiteInput_32 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_32 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_32";

	

 


	tos_count_tSQLiteInput_32++;

/**
 * [tSQLiteInput_32 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row44 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row44";

	

			//row44
			//row44


			
				if(execStat){
					runStat.updateStatOnConnection("row44"+iterateId,1, 1);
				} 
			

		


			   
			   

					row44Struct row44_HashRow = new row44Struct();
		   	   	   
				
				row44_HashRow.uuid = row44.uuid;
				
				row44_HashRow.obsValue = row44.obsValue;
				
			tHash_Lookup_row44.put(row44_HashRow);
			
            




 


	tos_count_tAdvancedHash_row44++;

/**
 * [tAdvancedHash_row44 main ] stop
 */



	
	/**
	 * [tSQLiteInput_32 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_32";

	

	}
}finally{
	stmt_tSQLiteInput_32.close();

		if(conn_tSQLiteInput_32 != null && !conn_tSQLiteInput_32.isClosed()) {
			
			conn_tSQLiteInput_32.close();
			
		}
}
globalMap.put("tSQLiteInput_32_NB_LINE",nb_line_tSQLiteInput_32);

 

ok_Hash.put("tSQLiteInput_32", true);
end_Hash.put("tSQLiteInput_32", System.currentTimeMillis());




/**
 * [tSQLiteInput_32 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row44 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row44";

	

tHash_Lookup_row44.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row44"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row44", true);
end_Hash.put("tAdvancedHash_row44", System.currentTimeMillis());




/**
 * [tAdvancedHash_row44 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_32 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_32";

	

 



/**
 * [tSQLiteInput_32 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row44 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row44";

	

 



/**
 * [tAdvancedHash_row44 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_32_SUBPROCESS_STATE", 1);
	}
	


public static class row45Struct implements routines.system.IPersistableComparableLookupRow<row45Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row45Struct other = (row45Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row45Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            
	}

	public void copyKeysDataTo(row45Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row45Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_33Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_33_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row45Struct row45 = new row45Struct();




	
	/**
	 * [tAdvancedHash_row45 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row45", false);
		start_Hash.put("tAdvancedHash_row45", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row45";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row45" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row45 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row45{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row45().limitLog4jByte();

			   		// connection name:row45
			   		// source node:tSQLiteInput_33 - inputs:(after_tSQLiteInput_1) outputs:(row45,row45) | target node:tAdvancedHash_row45 - inputs:(row45) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row45 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row45Struct> tHash_Lookup_row45 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row45Struct>getLookup(matchingModeEnum_row45);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row45", tHash_Lookup_row45);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row45 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_33 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_33", false);
		start_Hash.put("tSQLiteInput_33", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_33";

	
		int tos_count_tSQLiteInput_33 = 0;
		
    	class BytesLimit65535_tSQLiteInput_33{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_33().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_33 = 0;
		    java.sql.Connection conn_tSQLiteInput_33 = null;
			    String driverClass_tSQLiteInput_33 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_33);
				
			String url_tSQLiteInput_33 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_33 = java.sql.DriverManager.getConnection(url_tSQLiteInput_33);
		    
			java.sql.Statement stmt_tSQLiteInput_33 = conn_tSQLiteInput_33.createStatement();

		    String dbquery_tSQLiteInput_33 = "SELECT DISTINCT uuid,\n		obsValue\nFROM PUBLICATION\nWHERE obsValue = 'publication'";
			

                       globalMap.put("tSQLiteInput_33_QUERY",dbquery_tSQLiteInput_33);

		    java.sql.ResultSet rs_tSQLiteInput_33 = null;
		try{
		    rs_tSQLiteInput_33 = stmt_tSQLiteInput_33.executeQuery(dbquery_tSQLiteInput_33);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_33 = rs_tSQLiteInput_33.getMetaData();
		    int colQtyInRs_tSQLiteInput_33 = rsmd_tSQLiteInput_33.getColumnCount();

		    String tmpContent_tSQLiteInput_33 = null;
		    
		    
		    while (rs_tSQLiteInput_33.next()) {
		        nb_line_tSQLiteInput_33++;
		        
							if(colQtyInRs_tSQLiteInput_33 < 1) {
								row45.uuid = null;
							} else {
	                         		
        	row45.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_33, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_33 < 2) {
								row45.obsValue = null;
							} else {
	                         		
        	row45.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_33, 2, false);
		                    }
					



 



/**
 * [tSQLiteInput_33 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_33 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_33";

	

 


	tos_count_tSQLiteInput_33++;

/**
 * [tSQLiteInput_33 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row45 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row45";

	

			//row45
			//row45


			
				if(execStat){
					runStat.updateStatOnConnection("row45"+iterateId,1, 1);
				} 
			

		


			   
			   

					row45Struct row45_HashRow = new row45Struct();
		   	   	   
				
				row45_HashRow.uuid = row45.uuid;
				
				row45_HashRow.obsValue = row45.obsValue;
				
			tHash_Lookup_row45.put(row45_HashRow);
			
            




 


	tos_count_tAdvancedHash_row45++;

/**
 * [tAdvancedHash_row45 main ] stop
 */



	
	/**
	 * [tSQLiteInput_33 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_33";

	

	}
}finally{
	stmt_tSQLiteInput_33.close();

		if(conn_tSQLiteInput_33 != null && !conn_tSQLiteInput_33.isClosed()) {
			
			conn_tSQLiteInput_33.close();
			
		}
}
globalMap.put("tSQLiteInput_33_NB_LINE",nb_line_tSQLiteInput_33);

 

ok_Hash.put("tSQLiteInput_33", true);
end_Hash.put("tSQLiteInput_33", System.currentTimeMillis());




/**
 * [tSQLiteInput_33 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row45 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row45";

	

tHash_Lookup_row45.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row45"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row45", true);
end_Hash.put("tAdvancedHash_row45", System.currentTimeMillis());




/**
 * [tAdvancedHash_row45 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_33 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_33";

	

 



/**
 * [tSQLiteInput_33 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row45 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row45";

	

 



/**
 * [tAdvancedHash_row45 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_33_SUBPROCESS_STATE", 1);
	}
	


public static class row49Struct implements routines.system.IPersistableComparableLookupRow<row49Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String realURL;

				public String getRealURL () {
					return this.realURL;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row49Struct other = (row49Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row49Struct other) {

		other.uuid = this.uuid;
	            other.realURL = this.realURL;
	            other.obsValue = this.obsValue;
	            
	}

	public void copyKeysDataTo(row49Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.realURL = readString(dis,ois);
					
						this.obsValue = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.realURL, dos, oos);
					
						writeString(this.obsValue, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",realURL="+realURL);
		sb.append(",obsValue="+obsValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row49Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_35Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_35_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row49Struct row49 = new row49Struct();




	
	/**
	 * [tAdvancedHash_row49 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row49", false);
		start_Hash.put("tAdvancedHash_row49", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row49";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row49" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row49 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row49{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row49().limitLog4jByte();

			   		// connection name:row49
			   		// source node:tSQLiteInput_35 - inputs:(after_tSQLiteInput_1) outputs:(row49,row49) | target node:tAdvancedHash_row49 - inputs:(row49) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row49 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row49Struct> tHash_Lookup_row49 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row49Struct>getLookup(matchingModeEnum_row49);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row49", tHash_Lookup_row49);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row49 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_35 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_35", false);
		start_Hash.put("tSQLiteInput_35", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_35";

	
		int tos_count_tSQLiteInput_35 = 0;
		
    	class BytesLimit65535_tSQLiteInput_35{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_35().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_35 = 0;
		    java.sql.Connection conn_tSQLiteInput_35 = null;
			    String driverClass_tSQLiteInput_35 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_35);
				
			String url_tSQLiteInput_35 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_35 = java.sql.DriverManager.getConnection(url_tSQLiteInput_35);
		    
			java.sql.Statement stmt_tSQLiteInput_35 = conn_tSQLiteInput_35.createStatement();

		    String dbquery_tSQLiteInput_35 = "SELECT ONLINE_RESOURCE_RESOLVED.uuid,\n		ONLINE_RESOURCE_RESOLVED.realURL,\n		ONLINE_RESOURCE_RESOLVED.obsValue\nFROM	ONLINE_RESOURCE_RESOLVED";
			

                       globalMap.put("tSQLiteInput_35_QUERY",dbquery_tSQLiteInput_35);

		    java.sql.ResultSet rs_tSQLiteInput_35 = null;
		try{
		    rs_tSQLiteInput_35 = stmt_tSQLiteInput_35.executeQuery(dbquery_tSQLiteInput_35);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_35 = rs_tSQLiteInput_35.getMetaData();
		    int colQtyInRs_tSQLiteInput_35 = rsmd_tSQLiteInput_35.getColumnCount();

		    String tmpContent_tSQLiteInput_35 = null;
		    
		    
		    while (rs_tSQLiteInput_35.next()) {
		        nb_line_tSQLiteInput_35++;
		        
							if(colQtyInRs_tSQLiteInput_35 < 1) {
								row49.uuid = null;
							} else {
	                         		
        	row49.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_35, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_35 < 2) {
								row49.realURL = null;
							} else {
	                         		
        	row49.realURL = routines.system.JDBCUtil.getString(rs_tSQLiteInput_35, 2, false);
		                    }
							if(colQtyInRs_tSQLiteInput_35 < 3) {
								row49.obsValue = null;
							} else {
	                         		
        	row49.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_35, 3, false);
		                    }
					



 



/**
 * [tSQLiteInput_35 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_35 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_35";

	

 


	tos_count_tSQLiteInput_35++;

/**
 * [tSQLiteInput_35 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row49 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row49";

	

			//row49
			//row49


			
				if(execStat){
					runStat.updateStatOnConnection("row49"+iterateId,1, 1);
				} 
			

		


			   
			   

					row49Struct row49_HashRow = new row49Struct();
		   	   	   
				
				row49_HashRow.uuid = row49.uuid;
				
				row49_HashRow.realURL = row49.realURL;
				
				row49_HashRow.obsValue = row49.obsValue;
				
			tHash_Lookup_row49.put(row49_HashRow);
			
            




 


	tos_count_tAdvancedHash_row49++;

/**
 * [tAdvancedHash_row49 main ] stop
 */



	
	/**
	 * [tSQLiteInput_35 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_35";

	

	}
}finally{
	stmt_tSQLiteInput_35.close();

		if(conn_tSQLiteInput_35 != null && !conn_tSQLiteInput_35.isClosed()) {
			
			conn_tSQLiteInput_35.close();
			
		}
}
globalMap.put("tSQLiteInput_35_NB_LINE",nb_line_tSQLiteInput_35);

 

ok_Hash.put("tSQLiteInput_35", true);
end_Hash.put("tSQLiteInput_35", System.currentTimeMillis());




/**
 * [tSQLiteInput_35 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row49 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row49";

	

tHash_Lookup_row49.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row49"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row49", true);
end_Hash.put("tAdvancedHash_row49", System.currentTimeMillis());




/**
 * [tAdvancedHash_row49 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_35 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_35";

	

 



/**
 * [tSQLiteInput_35 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row49 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row49";

	

 



/**
 * [tAdvancedHash_row49 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_35_SUBPROCESS_STATE", 1);
	}
	


public static class row53Struct implements routines.system.IPersistableComparableLookupRow<row53Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row53Struct other = (row53Struct) obj;
		
						if (this.uuid == null) {
							if (other.uuid != null)
								return false;
						
						} else if (!this.uuid.equals(other.uuid))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row53Struct other) {

		other.uuid = this.uuid;
	            other.obsValue = this.obsValue;
	            
	}

	public void copyKeysDataTo(row53Struct other) {

		other.uuid = this.uuid;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.obsValue = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.obsValue, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row53Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.uuid, other.uuid);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tSQLiteInput_36Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSQLiteInput_36_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row53Struct row53 = new row53Struct();




	
	/**
	 * [tAdvancedHash_row53 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row53", false);
		start_Hash.put("tAdvancedHash_row53", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row53";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row53" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row53 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row53{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row53().limitLog4jByte();

			   		// connection name:row53
			   		// source node:tSQLiteInput_36 - inputs:(after_tSQLiteInput_1) outputs:(row53,row53) | target node:tAdvancedHash_row53 - inputs:(row53) outputs:()
			   		// linked node: tMap_1 - inputs:(row13,row14,row15,row16,row17,row18,row19,row20,row21,row22,row23,row24,row25,row26,row27,row28,row29,row30,row31,row32,row33,row34,row35,row36,row37,row38,row39,row40,row41,row42,row43,row44,row45,row49,row53) outputs:(mapped)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row53 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row53Struct> tHash_Lookup_row53 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row53Struct>getLookup(matchingModeEnum_row53);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row53", tHash_Lookup_row53);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row53 begin ] stop
 */



	
	/**
	 * [tSQLiteInput_36 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteInput_36", false);
		start_Hash.put("tSQLiteInput_36", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteInput_36";

	
		int tos_count_tSQLiteInput_36 = 0;
		
    	class BytesLimit65535_tSQLiteInput_36{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteInput_36().limitLog4jByte();
	
    
	
		    int nb_line_tSQLiteInput_36 = 0;
		    java.sql.Connection conn_tSQLiteInput_36 = null;
			    String driverClass_tSQLiteInput_36 = "org.sqlite.JDBC";
			    java.lang.Class.forName(driverClass_tSQLiteInput_36);
				
			String url_tSQLiteInput_36 = "jdbc:sqlite:" + "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
			
		        conn_tSQLiteInput_36 = java.sql.DriverManager.getConnection(url_tSQLiteInput_36);
		    
			java.sql.Statement stmt_tSQLiteInput_36 = conn_tSQLiteInput_36.createStatement();

		    String dbquery_tSQLiteInput_36 = "SELECT uuid,\n		substr(obsValue, 1, 10) as obsValue\nFROM	TIMESTAMP";
			

                       globalMap.put("tSQLiteInput_36_QUERY",dbquery_tSQLiteInput_36);

		    java.sql.ResultSet rs_tSQLiteInput_36 = null;
		try{
		    rs_tSQLiteInput_36 = stmt_tSQLiteInput_36.executeQuery(dbquery_tSQLiteInput_36);
		    java.sql.ResultSetMetaData rsmd_tSQLiteInput_36 = rs_tSQLiteInput_36.getMetaData();
		    int colQtyInRs_tSQLiteInput_36 = rsmd_tSQLiteInput_36.getColumnCount();

		    String tmpContent_tSQLiteInput_36 = null;
		    
		    
		    while (rs_tSQLiteInput_36.next()) {
		        nb_line_tSQLiteInput_36++;
		        
							if(colQtyInRs_tSQLiteInput_36 < 1) {
								row53.uuid = null;
							} else {
	                         		
        	row53.uuid = routines.system.JDBCUtil.getString(rs_tSQLiteInput_36, 1, false);
		                    }
							if(colQtyInRs_tSQLiteInput_36 < 2) {
								row53.obsValue = null;
							} else {
	                         		
        	row53.obsValue = routines.system.JDBCUtil.getString(rs_tSQLiteInput_36, 2, false);
		                    }
					



 



/**
 * [tSQLiteInput_36 begin ] stop
 */
	
	/**
	 * [tSQLiteInput_36 main ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_36";

	

 


	tos_count_tSQLiteInput_36++;

/**
 * [tSQLiteInput_36 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row53 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row53";

	

			//row53
			//row53


			
				if(execStat){
					runStat.updateStatOnConnection("row53"+iterateId,1, 1);
				} 
			

		


			   
			   

					row53Struct row53_HashRow = new row53Struct();
		   	   	   
				
				row53_HashRow.uuid = row53.uuid;
				
				row53_HashRow.obsValue = row53.obsValue;
				
			tHash_Lookup_row53.put(row53_HashRow);
			
            




 


	tos_count_tAdvancedHash_row53++;

/**
 * [tAdvancedHash_row53 main ] stop
 */



	
	/**
	 * [tSQLiteInput_36 end ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_36";

	

	}
}finally{
	stmt_tSQLiteInput_36.close();

		if(conn_tSQLiteInput_36 != null && !conn_tSQLiteInput_36.isClosed()) {
			
			conn_tSQLiteInput_36.close();
			
		}
}
globalMap.put("tSQLiteInput_36_NB_LINE",nb_line_tSQLiteInput_36);

 

ok_Hash.put("tSQLiteInput_36", true);
end_Hash.put("tSQLiteInput_36", System.currentTimeMillis());




/**
 * [tSQLiteInput_36 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row53 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row53";

	

tHash_Lookup_row53.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row53"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row53", true);
end_Hash.put("tAdvancedHash_row53", System.currentTimeMillis());




/**
 * [tAdvancedHash_row53 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSQLiteInput_36 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteInput_36";

	

 



/**
 * [tSQLiteInput_36 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row53 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row53";

	

 



/**
 * [tAdvancedHash_row53 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSQLiteInput_36_SUBPROCESS_STATE", 1);
	}
	

public void tPostgresqlConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostgresqlConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlConnection_1", false);
		start_Hash.put("tPostgresqlConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlConnection_1";

	
		int tos_count_tPostgresqlConnection_1 = 0;
		
    	class BytesLimit65535_tPostgresqlConnection_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlConnection_1().limitLog4jByte();


	
		String url_tPostgresqlConnection_1 = "jdbc:postgresql://"+context.pgHost+":"+context.pgPort+"/"+context.pgDatabase; 

	String dbUser_tPostgresqlConnection_1 = context.pgUsername;
	
	
		 
	final String decryptedPassword_tPostgresqlConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("22aedcef0ef7919d0a2c12cfd2ac11c30e01384dfc7ecc96");
		String dbPwd_tPostgresqlConnection_1 = decryptedPassword_tPostgresqlConnection_1;
	

	java.sql.Connection conn_tPostgresqlConnection_1 = null;
	
					String driverClass_tPostgresqlConnection_1 = "org.postgresql.Driver";
			java.lang.Class.forName(driverClass_tPostgresqlConnection_1);
		
		conn_tPostgresqlConnection_1 = java.sql.DriverManager.getConnection(url_tPostgresqlConnection_1,dbUser_tPostgresqlConnection_1,dbPwd_tPostgresqlConnection_1);

		globalMap.put("conn_tPostgresqlConnection_1", conn_tPostgresqlConnection_1);
	if (null != conn_tPostgresqlConnection_1) {
		
			conn_tPostgresqlConnection_1.setAutoCommit(false);
	}

	globalMap.put("schema_" + "tPostgresqlConnection_1",context.pgSchema);

	globalMap.put("conn_" + "tPostgresqlConnection_1",conn_tPostgresqlConnection_1);

 



/**
 * [tPostgresqlConnection_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 


	tos_count_tPostgresqlConnection_1++;

/**
 * [tPostgresqlConnection_1 main ] stop
 */
	
	/**
	 * [tPostgresqlConnection_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 

ok_Hash.put("tPostgresqlConnection_1", true);
end_Hash.put("tPostgresqlConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tForeach_2Process(globalMap);



/**
 * [tPostgresqlConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostgresqlConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlConnection_1";

	

 



/**
 * [tPostgresqlConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				
			    public String obsValue2;

				public String getObsValue2 () {
					return this.obsValue2;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.obsValue = readString(dis);
					
					this.obsValue2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.obsValue,dos);
					
					// String
				
						writeString(this.obsValue2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
		sb.append(",obsValue2="+obsValue2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];

	
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String root;

				public String getRoot () {
					return this.root;
				}
				
			    public String xpath1;

				public String getXpath1 () {
					return this.xpath1;
				}
				
			    public String xpath2;

				public String getXpath2 () {
					return this.xpath2;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
					this.root = readString(dis);
					
					this.xpath1 = readString(dis);
					
					this.xpath2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.root,dos);
					
					// String
				
						writeString(this.xpath1,dos);
					
					// String
				
						writeString(this.xpath2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
		sb.append(",root="+root);
		sb.append(",xpath1="+xpath1);
		sb.append(",xpath2="+xpath2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				
			    public String obsValue2;

				public String getObsValue2 () {
					return this.obsValue2;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.obsValue = readString(dis);
					
					this.obsValue2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.obsValue,dos);
					
					// String
				
						writeString(this.obsValue2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
		sb.append(",obsValue2="+obsValue2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];

	
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String root;

				public String getRoot () {
					return this.root;
				}
				
			    public String xpath1;

				public String getXpath1 () {
					return this.xpath1;
				}
				
			    public String xpath2;

				public String getXpath2 () {
					return this.xpath2;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
					this.root = readString(dis);
					
					this.xpath1 = readString(dis);
					
					this.xpath2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.root,dos);
					
					// String
				
						writeString(this.xpath1,dos);
					
					// String
				
						writeString(this.xpath2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
		sb.append(",root="+root);
		sb.append(",xpath1="+xpath1);
		sb.append(",xpath2="+xpath2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];

	
			    public String uuid;

				public String getUuid () {
					return this.uuid;
				}
				
			    public String obsValue;

				public String getObsValue () {
					return this.obsValue;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.uuid = readString(dis);
					
					this.obsValue = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.uuid,dos);
					
					// String
				
						writeString(this.obsValue,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("uuid="+uuid);
		sb.append(",obsValue="+obsValue);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];

	
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String root;

				public String getRoot () {
					return this.root;
				}
				
			    public String xpath1;

				public String getXpath1 () {
					return this.xpath1;
				}
				
			    public String xpath2;

				public String getXpath2 () {
					return this.xpath2;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
					this.root = readString(dis);
					
					this.xpath1 = readString(dis);
					
					this.xpath2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.root,dos);
					
					// String
				
						writeString(this.xpath1,dos);
					
					// String
				
						writeString(this.xpath2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
		sb.append(",root="+root);
		sb.append(",xpath1="+xpath1);
		sb.append(",xpath2="+xpath2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];

	
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String root;

				public String getRoot () {
					return this.root;
				}
				
			    public String xpath1;

				public String getXpath1 () {
					return this.xpath1;
				}
				
			    public String xpath2;

				public String getXpath2 () {
					return this.xpath2;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
					this.root = readString(dis);
					
					this.xpath1 = readString(dis);
					
					this.xpath2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.root,dos);
					
					// String
				
						writeString(this.xpath1,dos);
					
					// String
				
						writeString(this.xpath2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
		sb.append(",root="+root);
		sb.append(",xpath1="+xpath1);
		sb.append(",xpath2="+xpath2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];

	
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String root;

				public String getRoot () {
					return this.root;
				}
				
			    public String xpath1;

				public String getXpath1 () {
					return this.xpath1;
				}
				
			    public String xpath2;

				public String getXpath2 () {
					return this.xpath2;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
					this.root = readString(dis);
					
					this.xpath1 = readString(dis);
					
					this.xpath2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.root,dos);
					
					// String
				
						writeString(this.xpath1,dos);
					
					// String
				
						writeString(this.xpath2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
		sb.append(",root="+root);
		sb.append(",xpath1="+xpath1);
		sb.append(",xpath2="+xpath2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];

	
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String root;

				public String getRoot () {
					return this.root;
				}
				
			    public String xpath1;

				public String getXpath1 () {
					return this.xpath1;
				}
				
			    public String xpath2;

				public String getXpath2 () {
					return this.xpath2;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
					this.root = readString(dis);
					
					this.xpath1 = readString(dis);
					
					this.xpath2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.root,dos);
					
					// String
				
						writeString(this.xpath1,dos);
					
					// String
				
						writeString(this.xpath2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
		sb.append(",root="+root);
		sb.append(",xpath1="+xpath1);
		sb.append(",xpath2="+xpath2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];

	
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String root;

				public String getRoot () {
					return this.root;
				}
				
			    public String xpath1;

				public String getXpath1 () {
					return this.xpath1;
				}
				
			    public String xpath2;

				public String getXpath2 () {
					return this.xpath2;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
					this.root = readString(dis);
					
					this.xpath1 = readString(dis);
					
					this.xpath2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.root,dos);
					
					// String
				
						writeString(this.xpath1,dos);
					
					// String
				
						writeString(this.xpath2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
		sb.append(",root="+root);
		sb.append(",xpath1="+xpath1);
		sb.append(",xpath2="+xpath2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];

	
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String root;

				public String getRoot () {
					return this.root;
				}
				
			    public String xpath1;

				public String getXpath1 () {
					return this.xpath1;
				}
				
			    public String xpath2;

				public String getXpath2 () {
					return this.xpath2;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.name = readString(dis);
					
					this.root = readString(dis);
					
					this.xpath1 = readString(dis);
					
					this.xpath2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.root,dos);
					
					// String
				
						writeString(this.xpath1,dos);
					
					// String
				
						writeString(this.xpath2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("name="+name);
		sb.append(",root="+root);
		sb.append(",xpath1="+xpath1);
		sb.append(",xpath2="+xpath2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_BACKUP2_sdiMetadataExtractor = new byte[0];
    static byte[] commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[0];

	
			    public String myStatements;

				public String getMyStatements () {
					return this.myStatements;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_BACKUP2_sdiMetadataExtractor.length) {
				if(length < 1024 && commonByteArray_BACKUP2_sdiMetadataExtractor.length == 0) {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[1024];
				} else {
   					commonByteArray_BACKUP2_sdiMetadataExtractor = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length);
			strReturn = new String(commonByteArray_BACKUP2_sdiMetadataExtractor, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_BACKUP2_sdiMetadataExtractor) {

        	try {

        		int length = 0;
		
					this.myStatements = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.myStatements,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("myStatements="+myStatements);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tIterateToFlow_1_AIProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tIterateToFlow_1_AI_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();
row2Struct row2 = new row2Struct();
row11Struct row11 = new row11Struct();
row3Struct row3 = new row3Struct();
row5Struct row5 = new row5Struct();
row1Struct row1 = new row1Struct();
row8Struct row8 = new row8Struct();
row9Struct row9 = new row9Struct();
row10Struct row10 = new row10Struct();
row6Struct row6 = new row6Struct();
row12Struct row12 = new row12Struct();
row7Struct row7 = new row7Struct();






	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row11" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tLogRow_1 = 0;
		
    	class BytesLimit65535_tLogRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tLogRow_1().limitLog4jByte();

	///////////////////////
		


	class Util_tLogRow_1 {
	
		String[] des_top = { ".", "-" };

        String[] des_data = { "-", "+" };

        String[] des_frame = { "|" }; 
        
        public void printLine(StringBuilder sb, int titleWidth, int dataWidth){
        
        	sb.append("+");
			for(int i=0; i<titleWidth+2; i++)
				sb.append("-");
			sb.append("+");
			for(int i=0; i<dataWidth+2; i++)
				sb.append("-");
        	sb.append("+" + "\n");
        }      

		public String print(String[] row, int nbLine){
			
			StringBuilder sb = new StringBuilder();
			
			    String title = "#" + nbLine + ". " + "tLogRow_1";
			    
		
			//step 1: get the max length of all the row[] member;
			int dataWidth = 5;		//the length of the string "value"	
			for(int i=0;i<row.length;i++) {
				if(row[i] == null && 4 > dataWidth) {
					dataWidth = 4;
				}
				else if(row[i] != null && row[i].length()>dataWidth) 
					dataWidth = row[i].length();
			}			
						
			int titleWidth = 6;
			
			int totalWidth = dataWidth + titleWidth + 5;
			
			//step 2: print the header with line number
			sb.append(".");
			for(int i=0 ; i<totalWidth ; i++)
				sb.append("-");			
			sb.append("." + "\n" + "|");
			
			int emptyCenterWidth = (totalWidth-title.length())/2;
			for(int i=0 ; i<emptyCenterWidth; i++)
				sb.append(" ");	
			sb.append(title);
			for(int i=0 ; i<totalWidth - emptyCenterWidth - title.length() ; i++)
				sb.append(" ");	
			sb.append("|" + "\n");
			
			//step 3: print "key" and "value"			
			printLine(sb,titleWidth,dataWidth);
			
			sb.append("|" + " key");
			for(int i=0; i<titleWidth-2; i++)
				sb.append(" ");
        	sb.append("|" + " value");
			for(int i=0; i<dataWidth-4; i++)
				sb.append(" ");
			sb.append("|" + "\n");
			
			printLine(sb,titleWidth,dataWidth);
			
			//step 4: print dataset
			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "name");
				for(int i=0; i<titleWidth -"name".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[0]);
				for(int i=0; row[0] == null && i<dataWidth - 3 || row[0] != null && i<dataWidth -row[0].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "root");
				for(int i=0; i<titleWidth -"root".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[1]);
				for(int i=0; row[1] == null && i<dataWidth - 3 || row[1] != null && i<dataWidth -row[1].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "xpath1");
				for(int i=0; i<titleWidth -"xpath1".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[2]);
				for(int i=0; row[2] == null && i<dataWidth - 3 || row[2] != null && i<dataWidth -row[2].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//for(int i=0; i<row.length; i++){
				sb.append("| " + "xpath2");
				for(int i=0; i<titleWidth -"xpath2".length()+ 1 ;i++)
					sb.append(" ");
				sb.append("| " + row[3]);
				for(int i=0; row[3] == null && i<dataWidth - 3 || row[3] != null && i<dataWidth -row[3].length()+ 1 ;i++)
					sb.append(" ");
				sb.append("|" + "\n");
			
			//}

			
			//step 5: print a line gap
			printLine(sb,titleWidth,dataWidth);
			return sb.toString();

		}


	}

	Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();




	java.io.PrintStream consoleOut_tLogRow_1 = null;
	if (globalMap.get("tLogRow_CONSOLE")!=null){
        consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
    }else{
        consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
        globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
    }

 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */





	
	/**
	 * [tJavaFlex_2 begin ] start
	 */

				
			int NB_ITERATE_tPostgresqlInput_2 = 0; //for statistics
			

	
		
		ok_Hash.put("tJavaFlex_2", false);
		start_Hash.put("tJavaFlex_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaFlex_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row5" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaFlex_2 = 0;
		
    	class BytesLimit65535_tJavaFlex_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaFlex_2().limitLog4jByte();


// start part of your Java code
      


 



/**
 * [tJavaFlex_2 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_1 = 0;
		
    	class BytesLimit65535_tFilterRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFilterRow_1().limitLog4jByte();
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */





	
	/**
	 * [tJavaFlex_3 begin ] start
	 */

				
			int NB_ITERATE_tPostgresqlInput_3 = 0; //for statistics
			

	
		
		ok_Hash.put("tJavaFlex_3", false);
		start_Hash.put("tJavaFlex_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaFlex_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row9" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaFlex_3 = 0;
		
    	class BytesLimit65535_tJavaFlex_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaFlex_3().limitLog4jByte();


// start part of your Java code
      


 



/**
 * [tJavaFlex_3 begin ] stop
 */



	
	/**
	 * [tFilterRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_2", false);
		start_Hash.put("tFilterRow_2", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row8" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_2 = 0;
		
    	class BytesLimit65535_tFilterRow_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFilterRow_2().limitLog4jByte();
    int nb_line_tFilterRow_2 = 0;
    int nb_line_ok_tFilterRow_2 = 0;
    int nb_line_reject_tFilterRow_2 = 0;

    class Operator_tFilterRow_2 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_2(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_2 begin ] stop
 */





	
	/**
	 * [tJavaFlex_1 begin ] start
	 */

				
			int NB_ITERATE_tPostgresqlInput_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tJavaFlex_1", false);
		start_Hash.put("tJavaFlex_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaFlex_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row12" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaFlex_1 = 0;
		
    	class BytesLimit65535_tJavaFlex_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaFlex_1().limitLog4jByte();


// start part of your Java code
      


 



/**
 * [tJavaFlex_1 begin ] stop
 */



	
	/**
	 * [tFilterRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_3", false);
		start_Hash.put("tFilterRow_3", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row6" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tFilterRow_3 = 0;
		
    	class BytesLimit65535_tFilterRow_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tFilterRow_3().limitLog4jByte();
    int nb_line_tFilterRow_3 = 0;
    int nb_line_ok_tFilterRow_3 = 0;
    int nb_line_reject_tFilterRow_3 = 0;

    class Operator_tFilterRow_3 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_3(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_3 begin ] stop
 */



	
	/**
	 * [tReplicate_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplicate_1", false);
		start_Hash.put("tReplicate_1", System.currentTimeMillis());
		
	
	currentComponent="tReplicate_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tReplicate_1 = 0;
		
    	class BytesLimit65535_tReplicate_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tReplicate_1().limitLog4jByte();

 



/**
 * [tReplicate_1 begin ] stop
 */



	
	/**
	 * [tExtractDelimitedFields_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tExtractDelimitedFields_1", false);
		start_Hash.put("tExtractDelimitedFields_1", System.currentTimeMillis());
		
	
	currentComponent="tExtractDelimitedFields_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tExtractDelimitedFields_1 = 0;
		
    	class BytesLimit65535_tExtractDelimitedFields_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tExtractDelimitedFields_1().limitLog4jByte();

int nb_line_tExtractDelimitedFields_1=0;
 



/**
 * [tExtractDelimitedFields_1 begin ] stop
 */



	
	/**
	 * [tIterateToFlow_1_AI begin ] start
	 */

	

	
		
		ok_Hash.put("tIterateToFlow_1_AI", false);
		start_Hash.put("tIterateToFlow_1_AI", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tIterateToFlow_1";
	
	currentComponent="tIterateToFlow_1_AI";

	
		int tos_count_tIterateToFlow_1_AI = 0;
		
    	class BytesLimit65535_tIterateToFlow_1_AI{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tIterateToFlow_1_AI().limitLog4jByte();

        
        int nb_line_tIterateToFlow_1_AI = 0;
        java.util.List<OnSubjobOkStructtIterateToFlow_1> list_tIterateToFlow_1_AI = (java.util.List<OnSubjobOkStructtIterateToFlow_1>)globalMap.get("tIterateToFlow_1");
        if(list_tIterateToFlow_1_AI == null) {
            list_tIterateToFlow_1_AI = new java.util.ArrayList<OnSubjobOkStructtIterateToFlow_1>();
        }        
        for(OnSubjobOkStructtIterateToFlow_1 row_tIterateToFlow_1_AI : list_tIterateToFlow_1_AI){
        					
    						row4.myStatements = row_tIterateToFlow_1_AI.myStatements;
    						

 



/**
 * [tIterateToFlow_1_AI begin ] stop
 */
	
	/**
	 * [tIterateToFlow_1_AI main ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_1";
	
	currentComponent="tIterateToFlow_1_AI";

	

 


	tos_count_tIterateToFlow_1_AI++;

/**
 * [tIterateToFlow_1_AI main ] stop
 */

	
	/**
	 * [tExtractDelimitedFields_1 main ] start
	 */

	

	
	
	currentComponent="tExtractDelimitedFields_1";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		

row2 = null;

row2 = new row2Struct();
	String field_tExtractDelimitedFields_1 = row4.myStatements;
	String[] newFields_tExtractDelimitedFields_1 = new String[0];
	if(field_tExtractDelimitedFields_1!=null){// C_01
		try{
			newFields_tExtractDelimitedFields_1 = field_tExtractDelimitedFields_1.split("\\|",-1);
		int length_tExtractDelimitedFields_1 = newFields_tExtractDelimitedFields_1.length;
	String temp_tExtractDelimitedFields_1 = null;
	row2.name = 0>=length_tExtractDelimitedFields_1?"":newFields_tExtractDelimitedFields_1[0];
	row2.root = 1>=length_tExtractDelimitedFields_1?"":newFields_tExtractDelimitedFields_1[1];
	row2.xpath1 = 2>=length_tExtractDelimitedFields_1?"":newFields_tExtractDelimitedFields_1[2];
	row2.xpath2 = 3>=length_tExtractDelimitedFields_1?"":newFields_tExtractDelimitedFields_1[3];
	nb_line_tExtractDelimitedFields_1++;
}catch(java.lang.Exception ex_tExtractDelimitedFields_1){
	throw(ex_tExtractDelimitedFields_1);
}



 


	tos_count_tExtractDelimitedFields_1++;

/**
 * [tExtractDelimitedFields_1 main ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tReplicate_1 main ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		


	row11 = new row11Struct();
						
	row11.name = row2.name;								
	row11.root = row2.root;								
	row11.xpath1 = row2.xpath1;								
	row11.xpath2 = row2.xpath2;			
	row3 = new row3Struct();
						
	row3.name = row2.name;								
	row3.root = row2.root;								
	row3.xpath1 = row2.xpath1;								
	row3.xpath2 = row2.xpath2;			
	row8 = new row8Struct();
						
	row8.name = row2.name;								
	row8.root = row2.root;								
	row8.xpath1 = row2.xpath1;								
	row8.xpath2 = row2.xpath2;			
	row6 = new row6Struct();
						
	row6.name = row2.name;								
	row6.root = row2.root;								
	row6.xpath1 = row2.xpath1;								
	row6.xpath2 = row2.xpath2;			


 


	tos_count_tReplicate_1++;

/**
 * [tReplicate_1 main ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

			//row11
			//row11


			
				if(execStat){
					runStat.updateStatOnConnection("row11"+iterateId,1, 1);
				} 
			

		
///////////////////////		
						



				strBuffer_tLogRow_1 = new StringBuilder();




   				
	    		if(row11.name != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row11.name)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row11.root != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row11.root)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row11.xpath1 != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row11.xpath1)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row11.xpath2 != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row11.xpath2)							
				);


							
	    		} //  			

				
				String[] row_tLogRow_1 = new String[4];
   				
	    		if(row11.name != null) { //              
                 row_tLogRow_1[0]=    						    
				                String.valueOf(row11.name)			
					          ;	
							
	    		} //			
    			   				
	    		if(row11.root != null) { //              
                 row_tLogRow_1[1]=    						    
				                String.valueOf(row11.root)			
					          ;	
							
	    		} //			
    			   				
	    		if(row11.xpath1 != null) { //              
                 row_tLogRow_1[2]=    						    
				                String.valueOf(row11.xpath1)			
					          ;	
							
	    		} //			
    			   				
	    		if(row11.xpath2 != null) { //              
                 row_tLogRow_1[3]=    						    
				                String.valueOf(row11.xpath2)			
					          ;	
							
	    		} //			
    			
				nb_line_tLogRow_1++;
                consoleOut_tLogRow_1.println(util_tLogRow_1.print(row_tLogRow_1,nb_line_tLogRow_1));
                consoleOut_tLogRow_1.flush();
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */




	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		

          row5 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");    
        ope_tFilterRow_1.matches((row3.root == null? false : row3.root.length() != 0)
                       , " root.length() != 0 failed");    
        ope_tFilterRow_1.matches((row3.xpath1 == null? false : row3.xpath1.length() == 0)
                       , " xpath1.length() == 0 failed");    
        ope_tFilterRow_1.matches((row3.xpath2 == null? false : row3.xpath2.length() == 0)
                       , " xpath2.length() == 0 failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row5 == null){ 
                row5 = new row5Struct();
              }
               row5.name = row3.name;
               row5.root = row3.root;
               row5.xpath1 = row3.xpath1;
               row5.xpath2 = row3.xpath2;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tJavaFlex_2 main ] start
	 */

	

	
	
	currentComponent="tJavaFlex_2";

	

			//row5
			//row5


			
				if(execStat){
					runStat.updateStatOnConnection("row5"+iterateId,1, 1);
				} 
			

		



// here is the main part of the component,
// a piece of code executed in the row
// loop


 


	tos_count_tJavaFlex_2++;

/**
 * [tJavaFlex_2 main ] stop
 */
	NB_ITERATE_tPostgresqlInput_2++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row1", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate3", 1, "exec" + NB_ITERATE_tPostgresqlInput_2);
					//Thread.sleep(1000);
				}				
			


	
	/**
	 * [tSQLiteOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteOutput_1", false);
		start_Hash.put("tSQLiteOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tSQLiteOutput_1 = 0;
		
    	class BytesLimit65535_tSQLiteOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteOutput_1().limitLog4jByte();
	




int nb_line_tSQLiteOutput_1 = 0;
int nb_line_update_tSQLiteOutput_1 = 0;
int nb_line_inserted_tSQLiteOutput_1 = 0;
int nb_line_deleted_tSQLiteOutput_1 = 0;
int nb_line_rejected_tSQLiteOutput_1 = 0;

int deletedCount_tSQLiteOutput_1=0;
int updatedCount_tSQLiteOutput_1=0;
int insertedCount_tSQLiteOutput_1=0;

String tableName_tSQLiteOutput_1 = row2.name;
boolean whetherReject_tSQLiteOutput_1 = false;

       int batchSize_tSQLiteOutput_1 = 10000;
       int batchSizeCounter_tSQLiteOutput_1=0;
       int tmp_batchUpdateCount_tSQLiteOutput_1 = 0;


java.sql.Connection conn_tSQLiteOutput_1 = null;
    	
    java.lang.Class.forName("org.sqlite.JDBC");
    String url_tSQLiteOutput_1 = "jdbc:sqlite:"+ "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
    	
    conn_tSQLiteOutput_1 = java.sql.DriverManager.getConnection(url_tSQLiteOutput_1);
	resourceMap.put("conn_tSQLiteOutput_1", conn_tSQLiteOutput_1);
        conn_tSQLiteOutput_1.setAutoCommit(false);
        int commitEvery_tSQLiteOutput_1 = 10000;
        int commitCounter_tSQLiteOutput_1 = 0;

            java.sql.DatabaseMetaData dbMetaData_tSQLiteOutput_1 = conn_tSQLiteOutput_1.getMetaData();
            java.sql.ResultSet rsTable_tSQLiteOutput_1 = dbMetaData_tSQLiteOutput_1.getTables(null, null, null, new String[]{"TABLE"});
            boolean whetherExist_tSQLiteOutput_1 = false;
            while(rsTable_tSQLiteOutput_1.next()) {
                String table_tSQLiteOutput_1 = rsTable_tSQLiteOutput_1.getString("TABLE_NAME");
                if(table_tSQLiteOutput_1.equalsIgnoreCase(row2.name)) {
                    whetherExist_tSQLiteOutput_1 = true;
                    break;
                }
            }
            rsTable_tSQLiteOutput_1.close();
                if(whetherExist_tSQLiteOutput_1) {
                    java.sql.Statement stmtDrop_tSQLiteOutput_1 = conn_tSQLiteOutput_1.createStatement();
                    	
                    stmtDrop_tSQLiteOutput_1.execute("DROP TABLE \"" + tableName_tSQLiteOutput_1 + "\"");
                    	
                }
                java.sql.Statement stmtCreate_tSQLiteOutput_1 = conn_tSQLiteOutput_1.createStatement();
                	
                stmtCreate_tSQLiteOutput_1.execute("CREATE TABLE \"" + tableName_tSQLiteOutput_1 + "\"(\"uuid\" VARCHAR(0)  ,\"obsValue\" VARCHAR(0)  )");
                	
	    String insert_tSQLiteOutput_1 = "INSERT INTO \"" + row2.name + "\" (\"uuid\",\"obsValue\") VALUES (?,?)";
	    java.sql.PreparedStatement pstmt_tSQLiteOutput_1 = conn_tSQLiteOutput_1.prepareStatement(insert_tSQLiteOutput_1);
	    

 



/**
 * [tSQLiteOutput_1 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_2", false);
		start_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_2";

	
		int tos_count_tPostgresqlInput_2 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_2().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_2 = 0;
		    java.sql.Connection conn_tPostgresqlInput_2 = null;
		        conn_tPostgresqlInput_2 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
				
		    
			java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2.createStatement();

		    String dbquery_tPostgresqlInput_2 = "with ns as (\nselect ARRAY[\n             ARRAY['xlink', 'http://www.w3.org/1999/xlink'], \n             ARRAY['gmd', 'http://www.isotc211.org/2005/gmd'], \n             ARRAY['gco', 'http://www.isotc211.org/2005/gco'],\n             ARRAY['gml', 'http://www.opengis.net/gml'],\n             ARRAY['gmx', 'http://www.isotc211.org/2005/gmx']\n             ] as n\n)\n\n\n\nSELECT\nuuid, \nunnest(xpath('" + row2.root + "', XMLPARSE(DOCUMENT data), n)) as obsValue\nFROM metadata, ns\nWHERE isTemplate = 'n'\n";
			

                       globalMap.put("tPostgresqlInput_2_QUERY",dbquery_tPostgresqlInput_2);

		    java.sql.ResultSet rs_tPostgresqlInput_2 = null;
		try{
		    rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2.executeQuery(dbquery_tPostgresqlInput_2);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2.getMetaData();
		    int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2.getColumnCount();

		    String tmpContent_tPostgresqlInput_2 = null;
		    
		    
		    while (rs_tPostgresqlInput_2.next()) {
		        nb_line_tPostgresqlInput_2++;
		        
							if(colQtyInRs_tPostgresqlInput_2 < 1) {
								row1.uuid = null;
							} else {
	                         		
        	row1.uuid = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_2, 1, true);
		                    }
							if(colQtyInRs_tPostgresqlInput_2 < 2) {
								row1.obsValue = null;
							} else {
	                         		
        	row1.obsValue = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_2, 2, true);
		                    }
					


 



/**
 * [tPostgresqlInput_2 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_2 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 


	tos_count_tPostgresqlInput_2++;

/**
 * [tPostgresqlInput_2 main ] stop
 */

	
	/**
	 * [tSQLiteOutput_1 main ] start
	 */

	

	
	
	currentComponent="tSQLiteOutput_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		
	



        whetherReject_tSQLiteOutput_1 = false;
                    if(row1.uuid == null) {
pstmt_tSQLiteOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(1, row1.uuid);
}

                    if(row1.obsValue == null) {
pstmt_tSQLiteOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_1.setString(2, row1.obsValue);
}


                       pstmt_tSQLiteOutput_1.addBatch();
                       batchSizeCounter_tSQLiteOutput_1++;
                       nb_line_tSQLiteOutput_1++;
                if ((batchSize_tSQLiteOutput_1 > 0) && (batchSize_tSQLiteOutput_1 <= batchSizeCounter_tSQLiteOutput_1)) {
                    int[] status_tSQLiteOutput_1 = null;
                    int countSum_tSQLiteOutput_1 = 0;
                    try {
                        batchSizeCounter_tSQLiteOutput_1 = 0;
                        status_tSQLiteOutput_1 = pstmt_tSQLiteOutput_1.executeBatch();
                        for(int countEach_tSQLiteOutput_1: status_tSQLiteOutput_1) {
                            countSum_tSQLiteOutput_1 += (countEach_tSQLiteOutput_1 < 0 ? 0 : countEach_tSQLiteOutput_1);
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tSQLiteOutput_1: e.getUpdateCounts()) {
                            countSum_tSQLiteOutput_1 += (countEach_tSQLiteOutput_1 < 0 ? 0 : countEach_tSQLiteOutput_1);
                        }
                        System.err.println(e.getMessage());
                    }
                    try {
                        tmp_batchUpdateCount_tSQLiteOutput_1 = pstmt_tSQLiteOutput_1.getUpdateCount();
                    }catch (java.sql.SQLException e){
                        System.err.println(e.getMessage());
                    }
                    tmp_batchUpdateCount_tSQLiteOutput_1 = tmp_batchUpdateCount_tSQLiteOutput_1 > countSum_tSQLiteOutput_1 ? tmp_batchUpdateCount_tSQLiteOutput_1 : countSum_tSQLiteOutput_1;
                        insertedCount_tSQLiteOutput_1 += tmp_batchUpdateCount_tSQLiteOutput_1;
               }
                commitCounter_tSQLiteOutput_1++;
                if(commitEvery_tSQLiteOutput_1 <= commitCounter_tSQLiteOutput_1) {
                try {
                    if (batchSizeCounter_tSQLiteOutput_1 > 0) {
	                    int countSum_tSQLiteOutput_1 = 0;
	                    
	                    for(int countEach_tSQLiteOutput_1: pstmt_tSQLiteOutput_1.executeBatch()) {
	                        countSum_tSQLiteOutput_1 += (countEach_tSQLiteOutput_1 < 0 ? 0 : countEach_tSQLiteOutput_1);
	                    }
	                    
	                    
	                        insertedCount_tSQLiteOutput_1 += countSum_tSQLiteOutput_1;
	                    
	                    batchSizeCounter_tSQLiteOutput_1 = 0;
                    }
                }catch (java.sql.BatchUpdateException e){
                        int countSum_tSQLiteOutput_1 = 0;
                        for(int countEach_tSQLiteOutput_1: e.getUpdateCounts()) {
                            countSum_tSQLiteOutput_1 += (countEach_tSQLiteOutput_1 < 0 ? 0 : countEach_tSQLiteOutput_1);
                        }
                            insertedCount_tSQLiteOutput_1 += countSum_tSQLiteOutput_1;
                        System.err.println(e.getMessage());
                }
                
                conn_tSQLiteOutput_1.commit();
                commitCounter_tSQLiteOutput_1=0;
            }

 


	tos_count_tSQLiteOutput_1++;

/**
 * [tSQLiteOutput_1 main ] stop
 */



	
	/**
	 * [tPostgresqlInput_2 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

	}
}finally{
	stmt_tPostgresqlInput_2.close();

}
globalMap.put("tPostgresqlInput_2_NB_LINE",nb_line_tPostgresqlInput_2);
 

ok_Hash.put("tPostgresqlInput_2", true);
end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());




/**
 * [tPostgresqlInput_2 end ] stop
 */

	
	/**
	 * [tSQLiteOutput_1 end ] start
	 */

	

	
	
	currentComponent="tSQLiteOutput_1";

	




                    int[] status_tSQLiteOutput_1 = null;
                    int countSum_tSQLiteOutput_1 = 0;
                    try {
                        if(pstmt_tSQLiteOutput_1!=null && batchSizeCounter_tSQLiteOutput_1 > 0 ){
                            status_tSQLiteOutput_1 = pstmt_tSQLiteOutput_1.executeBatch();
                            for(int countEach_tSQLiteOutput_1: status_tSQLiteOutput_1) {
                                countSum_tSQLiteOutput_1 += (countEach_tSQLiteOutput_1 < 0 ? 0 : countEach_tSQLiteOutput_1);
                            }
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tSQLiteOutput_1: e.getUpdateCounts()) {
                            countSum_tSQLiteOutput_1 += (countEach_tSQLiteOutput_1 < 0 ? 0 : countEach_tSQLiteOutput_1);
                        }
                        System.err.println(e.getMessage());
                    }
                    if(pstmt_tSQLiteOutput_1!=null && batchSizeCounter_tSQLiteOutput_1 > 0 ){
                        try {
                            tmp_batchUpdateCount_tSQLiteOutput_1 = pstmt_tSQLiteOutput_1.getUpdateCount();
                        }catch (java.sql.SQLException e){

                        }
                        tmp_batchUpdateCount_tSQLiteOutput_1 = tmp_batchUpdateCount_tSQLiteOutput_1 > countSum_tSQLiteOutput_1 ? tmp_batchUpdateCount_tSQLiteOutput_1 : countSum_tSQLiteOutput_1;
                            insertedCount_tSQLiteOutput_1 += tmp_batchUpdateCount_tSQLiteOutput_1;
                    }
                    if(pstmt_tSQLiteOutput_1 != null) {
                        pstmt_tSQLiteOutput_1.close();
                    }

        if (commitCounter_tSQLiteOutput_1 > 0) {
            conn_tSQLiteOutput_1.commit();
        }
        conn_tSQLiteOutput_1 .close();
		resourceMap.put("finish_tSQLiteOutput_1", true);

	int rejectedCount_tSQLiteOutput_1 = 0;
	nb_line_deleted_tSQLiteOutput_1=nb_line_deleted_tSQLiteOutput_1+ deletedCount_tSQLiteOutput_1;
	nb_line_update_tSQLiteOutput_1=nb_line_update_tSQLiteOutput_1 + updatedCount_tSQLiteOutput_1;
	nb_line_inserted_tSQLiteOutput_1=nb_line_inserted_tSQLiteOutput_1 + insertedCount_tSQLiteOutput_1;
	nb_line_rejected_tSQLiteOutput_1=nb_line_rejected_tSQLiteOutput_1 + rejectedCount_tSQLiteOutput_1;
	
        globalMap.put("tSQLiteOutput_1_NB_LINE",nb_line_tSQLiteOutput_1);
        globalMap.put("tSQLiteOutput_1_NB_LINE_UPDATED",nb_line_update_tSQLiteOutput_1);
        globalMap.put("tSQLiteOutput_1_NB_LINE_INSERTED",nb_line_inserted_tSQLiteOutput_1);
        globalMap.put("tSQLiteOutput_1_NB_LINE_DELETED",nb_line_deleted_tSQLiteOutput_1);
        globalMap.put("tSQLiteOutput_1_NB_LINE_REJECTED", nb_line_rejected_tSQLiteOutput_1);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tSQLiteOutput_1", true);
end_Hash.put("tSQLiteOutput_1", System.currentTimeMillis());




/**
 * [tSQLiteOutput_1 end ] stop
 */



						if(execStat){
							runStat.updateStatOnConnection("iterate3", 2, "exec" + NB_ITERATE_tPostgresqlInput_2);
						}				
					





} // End of branch "row5"








	
	/**
	 * [tFilterRow_2 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

			//row8
			//row8


			
				if(execStat){
					runStat.updateStatOnConnection("row8"+iterateId,1, 1);
				} 
			

		

          row9 = null;
    Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("&&");    
        ope_tFilterRow_2.matches((row8.root == null? false : row8.root.length() == 0)
                       , " root.length() == 0 failed");    
        ope_tFilterRow_2.matches((row8.xpath1 == null? false : row8.xpath1.length() != 0)
                       , " xpath1.length() != 0 failed");    
        ope_tFilterRow_2.matches((row8.xpath2 == null? false : row8.xpath2.length() != 0)
                       , " xpath2.length() != 0 failed");
    
    if (ope_tFilterRow_2.getMatchFlag()) {
              if(row9 == null){ 
                row9 = new row9Struct();
              }
               row9.name = row8.name;
               row9.root = row8.root;
               row9.xpath1 = row8.xpath1;
               row9.xpath2 = row8.xpath2;    
      nb_line_ok_tFilterRow_2++;
    } else {
      nb_line_reject_tFilterRow_2++;
    }

nb_line_tFilterRow_2++;

 


	tos_count_tFilterRow_2++;

/**
 * [tFilterRow_2 main ] stop
 */
// Start of branch "row9"
if(row9 != null) { 



	
	/**
	 * [tJavaFlex_3 main ] start
	 */

	

	
	
	currentComponent="tJavaFlex_3";

	

			//row9
			//row9


			
				if(execStat){
					runStat.updateStatOnConnection("row9"+iterateId,1, 1);
				} 
			

		



// here is the main part of the component,
// a piece of code executed in the row
// loop


 


	tos_count_tJavaFlex_3++;

/**
 * [tJavaFlex_3 main ] stop
 */
	NB_ITERATE_tPostgresqlInput_3++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row10", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate5", 1, "exec" + NB_ITERATE_tPostgresqlInput_3);
					//Thread.sleep(1000);
				}				
			


	
	/**
	 * [tSQLiteOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteOutput_3", false);
		start_Hash.put("tSQLiteOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteOutput_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row10" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tSQLiteOutput_3 = 0;
		
    	class BytesLimit65535_tSQLiteOutput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteOutput_3().limitLog4jByte();
	




int nb_line_tSQLiteOutput_3 = 0;
int nb_line_update_tSQLiteOutput_3 = 0;
int nb_line_inserted_tSQLiteOutput_3 = 0;
int nb_line_deleted_tSQLiteOutput_3 = 0;
int nb_line_rejected_tSQLiteOutput_3 = 0;

int deletedCount_tSQLiteOutput_3=0;
int updatedCount_tSQLiteOutput_3=0;
int insertedCount_tSQLiteOutput_3=0;

String tableName_tSQLiteOutput_3 = row2.name;
boolean whetherReject_tSQLiteOutput_3 = false;

       int batchSize_tSQLiteOutput_3 = 10000;
       int batchSizeCounter_tSQLiteOutput_3=0;
       int tmp_batchUpdateCount_tSQLiteOutput_3 = 0;


java.sql.Connection conn_tSQLiteOutput_3 = null;
    	
    java.lang.Class.forName("org.sqlite.JDBC");
    String url_tSQLiteOutput_3 = "jdbc:sqlite:"+ "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
    	
    conn_tSQLiteOutput_3 = java.sql.DriverManager.getConnection(url_tSQLiteOutput_3);
	resourceMap.put("conn_tSQLiteOutput_3", conn_tSQLiteOutput_3);
        conn_tSQLiteOutput_3.setAutoCommit(false);
        int commitEvery_tSQLiteOutput_3 = 10000;
        int commitCounter_tSQLiteOutput_3 = 0;

            java.sql.DatabaseMetaData dbMetaData_tSQLiteOutput_3 = conn_tSQLiteOutput_3.getMetaData();
            java.sql.ResultSet rsTable_tSQLiteOutput_3 = dbMetaData_tSQLiteOutput_3.getTables(null, null, null, new String[]{"TABLE"});
            boolean whetherExist_tSQLiteOutput_3 = false;
            while(rsTable_tSQLiteOutput_3.next()) {
                String table_tSQLiteOutput_3 = rsTable_tSQLiteOutput_3.getString("TABLE_NAME");
                if(table_tSQLiteOutput_3.equalsIgnoreCase(row2.name)) {
                    whetherExist_tSQLiteOutput_3 = true;
                    break;
                }
            }
            rsTable_tSQLiteOutput_3.close();
                if(whetherExist_tSQLiteOutput_3) {
                    java.sql.Statement stmtDrop_tSQLiteOutput_3 = conn_tSQLiteOutput_3.createStatement();
                    	
                    stmtDrop_tSQLiteOutput_3.execute("DROP TABLE \"" + tableName_tSQLiteOutput_3 + "\"");
                    	
                }
                java.sql.Statement stmtCreate_tSQLiteOutput_3 = conn_tSQLiteOutput_3.createStatement();
                	
                stmtCreate_tSQLiteOutput_3.execute("CREATE TABLE \"" + tableName_tSQLiteOutput_3 + "\"(\"uuid\" VARCHAR(0)  ,\"obsValue\" VARCHAR(0)  ,\"obsValue2\" VARCHAR(0)  )");
                	
	    String insert_tSQLiteOutput_3 = "INSERT INTO \"" + row2.name + "\" (\"uuid\",\"obsValue\",\"obsValue2\") VALUES (?,?,?)";
	    java.sql.PreparedStatement pstmt_tSQLiteOutput_3 = conn_tSQLiteOutput_3.prepareStatement(insert_tSQLiteOutput_3);
	    

 



/**
 * [tSQLiteOutput_3 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_3", false);
		start_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_3";

	
		int tos_count_tPostgresqlInput_3 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_3().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_3 = 0;
		    java.sql.Connection conn_tPostgresqlInput_3 = null;
		        conn_tPostgresqlInput_3 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
				
		    
			java.sql.Statement stmt_tPostgresqlInput_3 = conn_tPostgresqlInput_3.createStatement();

		    String dbquery_tPostgresqlInput_3 = "with ns as (\nselect ARRAY[\n             ARRAY['xlink', 'http://www.w3.org/1999/xlink'], \n             ARRAY['gmd', 'http://www.isotc211.org/2005/gmd'], \n             ARRAY['gco', 'http://www.isotc211.org/2005/gco'],\n             ARRAY['gml', 'http://www.opengis.net/gml'],\n             ARRAY['gmx', 'http://www.isotc211.org/2005/gmx']\n             ] as n\n)\n\n\nSELECT \nuuid,\nunnest(xpath('" + row2.xpath1+ "', XMLPARSE(DOCUMENT data), n)) as obsValue1,\nunnest(xpath('" + row2.xpath2+ "', XMLPARSE(DOCUMENT data), n)) as obsValue2\n\n\nFROM metadata, ns\nWHERE isTemplate = 'n'";
			

                       globalMap.put("tPostgresqlInput_3_QUERY",dbquery_tPostgresqlInput_3);

		    java.sql.ResultSet rs_tPostgresqlInput_3 = null;
		try{
		    rs_tPostgresqlInput_3 = stmt_tPostgresqlInput_3.executeQuery(dbquery_tPostgresqlInput_3);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_3 = rs_tPostgresqlInput_3.getMetaData();
		    int colQtyInRs_tPostgresqlInput_3 = rsmd_tPostgresqlInput_3.getColumnCount();

		    String tmpContent_tPostgresqlInput_3 = null;
		    
		    
		    while (rs_tPostgresqlInput_3.next()) {
		        nb_line_tPostgresqlInput_3++;
		        
							if(colQtyInRs_tPostgresqlInput_3 < 1) {
								row10.uuid = null;
							} else {
	                         		
        	row10.uuid = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_3, 1, true);
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 2) {
								row10.obsValue = null;
							} else {
	                         		
        	row10.obsValue = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_3, 2, true);
		                    }
							if(colQtyInRs_tPostgresqlInput_3 < 3) {
								row10.obsValue2 = null;
							} else {
	                         		
        	row10.obsValue2 = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_3, 3, true);
		                    }
					


 



/**
 * [tPostgresqlInput_3 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_3 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 


	tos_count_tPostgresqlInput_3++;

/**
 * [tPostgresqlInput_3 main ] stop
 */

	
	/**
	 * [tSQLiteOutput_3 main ] start
	 */

	

	
	
	currentComponent="tSQLiteOutput_3";

	

			//row10
			//row10


			
				if(execStat){
					runStat.updateStatOnConnection("row10"+iterateId,1, 1);
				} 
			

		
	



        whetherReject_tSQLiteOutput_3 = false;
                    if(row10.uuid == null) {
pstmt_tSQLiteOutput_3.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_3.setString(1, row10.uuid);
}

                    if(row10.obsValue == null) {
pstmt_tSQLiteOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_3.setString(2, row10.obsValue);
}

                    if(row10.obsValue2 == null) {
pstmt_tSQLiteOutput_3.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_3.setString(3, row10.obsValue2);
}


                       pstmt_tSQLiteOutput_3.addBatch();
                       batchSizeCounter_tSQLiteOutput_3++;
                       nb_line_tSQLiteOutput_3++;
                if ((batchSize_tSQLiteOutput_3 > 0) && (batchSize_tSQLiteOutput_3 <= batchSizeCounter_tSQLiteOutput_3)) {
                    int[] status_tSQLiteOutput_3 = null;
                    int countSum_tSQLiteOutput_3 = 0;
                    try {
                        batchSizeCounter_tSQLiteOutput_3 = 0;
                        status_tSQLiteOutput_3 = pstmt_tSQLiteOutput_3.executeBatch();
                        for(int countEach_tSQLiteOutput_3: status_tSQLiteOutput_3) {
                            countSum_tSQLiteOutput_3 += (countEach_tSQLiteOutput_3 < 0 ? 0 : countEach_tSQLiteOutput_3);
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tSQLiteOutput_3: e.getUpdateCounts()) {
                            countSum_tSQLiteOutput_3 += (countEach_tSQLiteOutput_3 < 0 ? 0 : countEach_tSQLiteOutput_3);
                        }
                        System.err.println(e.getMessage());
                    }
                    try {
                        tmp_batchUpdateCount_tSQLiteOutput_3 = pstmt_tSQLiteOutput_3.getUpdateCount();
                    }catch (java.sql.SQLException e){
                        System.err.println(e.getMessage());
                    }
                    tmp_batchUpdateCount_tSQLiteOutput_3 = tmp_batchUpdateCount_tSQLiteOutput_3 > countSum_tSQLiteOutput_3 ? tmp_batchUpdateCount_tSQLiteOutput_3 : countSum_tSQLiteOutput_3;
                        insertedCount_tSQLiteOutput_3 += tmp_batchUpdateCount_tSQLiteOutput_3;
               }
                commitCounter_tSQLiteOutput_3++;
                if(commitEvery_tSQLiteOutput_3 <= commitCounter_tSQLiteOutput_3) {
                try {
                    if (batchSizeCounter_tSQLiteOutput_3 > 0) {
	                    int countSum_tSQLiteOutput_3 = 0;
	                    
	                    for(int countEach_tSQLiteOutput_3: pstmt_tSQLiteOutput_3.executeBatch()) {
	                        countSum_tSQLiteOutput_3 += (countEach_tSQLiteOutput_3 < 0 ? 0 : countEach_tSQLiteOutput_3);
	                    }
	                    
	                    
	                        insertedCount_tSQLiteOutput_3 += countSum_tSQLiteOutput_3;
	                    
	                    batchSizeCounter_tSQLiteOutput_3 = 0;
                    }
                }catch (java.sql.BatchUpdateException e){
                        int countSum_tSQLiteOutput_3 = 0;
                        for(int countEach_tSQLiteOutput_3: e.getUpdateCounts()) {
                            countSum_tSQLiteOutput_3 += (countEach_tSQLiteOutput_3 < 0 ? 0 : countEach_tSQLiteOutput_3);
                        }
                            insertedCount_tSQLiteOutput_3 += countSum_tSQLiteOutput_3;
                        System.err.println(e.getMessage());
                }
                
                conn_tSQLiteOutput_3.commit();
                commitCounter_tSQLiteOutput_3=0;
            }

 


	tos_count_tSQLiteOutput_3++;

/**
 * [tSQLiteOutput_3 main ] stop
 */



	
	/**
	 * [tPostgresqlInput_3 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

	}
}finally{
	stmt_tPostgresqlInput_3.close();

}
globalMap.put("tPostgresqlInput_3_NB_LINE",nb_line_tPostgresqlInput_3);
 

ok_Hash.put("tPostgresqlInput_3", true);
end_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());




/**
 * [tPostgresqlInput_3 end ] stop
 */

	
	/**
	 * [tSQLiteOutput_3 end ] start
	 */

	

	
	
	currentComponent="tSQLiteOutput_3";

	




                    int[] status_tSQLiteOutput_3 = null;
                    int countSum_tSQLiteOutput_3 = 0;
                    try {
                        if(pstmt_tSQLiteOutput_3!=null && batchSizeCounter_tSQLiteOutput_3 > 0 ){
                            status_tSQLiteOutput_3 = pstmt_tSQLiteOutput_3.executeBatch();
                            for(int countEach_tSQLiteOutput_3: status_tSQLiteOutput_3) {
                                countSum_tSQLiteOutput_3 += (countEach_tSQLiteOutput_3 < 0 ? 0 : countEach_tSQLiteOutput_3);
                            }
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tSQLiteOutput_3: e.getUpdateCounts()) {
                            countSum_tSQLiteOutput_3 += (countEach_tSQLiteOutput_3 < 0 ? 0 : countEach_tSQLiteOutput_3);
                        }
                        System.err.println(e.getMessage());
                    }
                    if(pstmt_tSQLiteOutput_3!=null && batchSizeCounter_tSQLiteOutput_3 > 0 ){
                        try {
                            tmp_batchUpdateCount_tSQLiteOutput_3 = pstmt_tSQLiteOutput_3.getUpdateCount();
                        }catch (java.sql.SQLException e){

                        }
                        tmp_batchUpdateCount_tSQLiteOutput_3 = tmp_batchUpdateCount_tSQLiteOutput_3 > countSum_tSQLiteOutput_3 ? tmp_batchUpdateCount_tSQLiteOutput_3 : countSum_tSQLiteOutput_3;
                            insertedCount_tSQLiteOutput_3 += tmp_batchUpdateCount_tSQLiteOutput_3;
                    }
                    if(pstmt_tSQLiteOutput_3 != null) {
                        pstmt_tSQLiteOutput_3.close();
                    }

        if (commitCounter_tSQLiteOutput_3 > 0) {
            conn_tSQLiteOutput_3.commit();
        }
        conn_tSQLiteOutput_3 .close();
		resourceMap.put("finish_tSQLiteOutput_3", true);

	int rejectedCount_tSQLiteOutput_3 = 0;
	nb_line_deleted_tSQLiteOutput_3=nb_line_deleted_tSQLiteOutput_3+ deletedCount_tSQLiteOutput_3;
	nb_line_update_tSQLiteOutput_3=nb_line_update_tSQLiteOutput_3 + updatedCount_tSQLiteOutput_3;
	nb_line_inserted_tSQLiteOutput_3=nb_line_inserted_tSQLiteOutput_3 + insertedCount_tSQLiteOutput_3;
	nb_line_rejected_tSQLiteOutput_3=nb_line_rejected_tSQLiteOutput_3 + rejectedCount_tSQLiteOutput_3;
	
        globalMap.put("tSQLiteOutput_3_NB_LINE",nb_line_tSQLiteOutput_3);
        globalMap.put("tSQLiteOutput_3_NB_LINE_UPDATED",nb_line_update_tSQLiteOutput_3);
        globalMap.put("tSQLiteOutput_3_NB_LINE_INSERTED",nb_line_inserted_tSQLiteOutput_3);
        globalMap.put("tSQLiteOutput_3_NB_LINE_DELETED",nb_line_deleted_tSQLiteOutput_3);
        globalMap.put("tSQLiteOutput_3_NB_LINE_REJECTED", nb_line_rejected_tSQLiteOutput_3);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row10"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tSQLiteOutput_3", true);
end_Hash.put("tSQLiteOutput_3", System.currentTimeMillis());




/**
 * [tSQLiteOutput_3 end ] stop
 */



						if(execStat){
							runStat.updateStatOnConnection("iterate5", 2, "exec" + NB_ITERATE_tPostgresqlInput_3);
						}				
					





} // End of branch "row9"








	
	/**
	 * [tFilterRow_3 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

			//row6
			//row6


			
				if(execStat){
					runStat.updateStatOnConnection("row6"+iterateId,1, 1);
				} 
			

		

          row12 = null;
    Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3("&&");    
        ope_tFilterRow_3.matches((row6.root == null? false : row6.root.length() != 0)
                       , " root.length() != 0 failed");    
        ope_tFilterRow_3.matches((row6.xpath1 == null? false : row6.xpath1.length() != 0)
                       , " xpath1.length() != 0 failed");    
        ope_tFilterRow_3.matches((row6.xpath2 == null? false : row6.xpath2.length() != 0)
                       , " xpath2.length() != 0 failed");
    
    if (ope_tFilterRow_3.getMatchFlag()) {
              if(row12 == null){ 
                row12 = new row12Struct();
              }
               row12.name = row6.name;
               row12.root = row6.root;
               row12.xpath1 = row6.xpath1;
               row12.xpath2 = row6.xpath2;    
      nb_line_ok_tFilterRow_3++;
    } else {
      nb_line_reject_tFilterRow_3++;
    }

nb_line_tFilterRow_3++;

 


	tos_count_tFilterRow_3++;

/**
 * [tFilterRow_3 main ] stop
 */
// Start of branch "row12"
if(row12 != null) { 



	
	/**
	 * [tJavaFlex_1 main ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

			//row12
			//row12


			
				if(execStat){
					runStat.updateStatOnConnection("row12"+iterateId,1, 1);
				} 
			

		



// here is the main part of the component,
// a piece of code executed in the row
// loop


 


	tos_count_tJavaFlex_1++;

/**
 * [tJavaFlex_1 main ] stop
 */
	NB_ITERATE_tPostgresqlInput_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row7", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate4", 1, "exec" + NB_ITERATE_tPostgresqlInput_1);
					//Thread.sleep(1000);
				}				
			


	
	/**
	 * [tSQLiteOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tSQLiteOutput_2", false);
		start_Hash.put("tSQLiteOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tSQLiteOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row7" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tSQLiteOutput_2 = 0;
		
    	class BytesLimit65535_tSQLiteOutput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tSQLiteOutput_2().limitLog4jByte();
	




int nb_line_tSQLiteOutput_2 = 0;
int nb_line_update_tSQLiteOutput_2 = 0;
int nb_line_inserted_tSQLiteOutput_2 = 0;
int nb_line_deleted_tSQLiteOutput_2 = 0;
int nb_line_rejected_tSQLiteOutput_2 = 0;

int deletedCount_tSQLiteOutput_2=0;
int updatedCount_tSQLiteOutput_2=0;
int insertedCount_tSQLiteOutput_2=0;

String tableName_tSQLiteOutput_2 = row2.name;
boolean whetherReject_tSQLiteOutput_2 = false;

       int batchSize_tSQLiteOutput_2 = 10000;
       int batchSizeCounter_tSQLiteOutput_2=0;
       int tmp_batchUpdateCount_tSQLiteOutput_2 = 0;


java.sql.Connection conn_tSQLiteOutput_2 = null;
    	
    java.lang.Class.forName("org.sqlite.JDBC");
    String url_tSQLiteOutput_2 = "jdbc:sqlite:"+ "/" + System.getProperty("java.io.tmpdir") + context.sqliteFilename;
    	
    conn_tSQLiteOutput_2 = java.sql.DriverManager.getConnection(url_tSQLiteOutput_2);
	resourceMap.put("conn_tSQLiteOutput_2", conn_tSQLiteOutput_2);
        conn_tSQLiteOutput_2.setAutoCommit(false);
        int commitEvery_tSQLiteOutput_2 = 10000;
        int commitCounter_tSQLiteOutput_2 = 0;

            java.sql.DatabaseMetaData dbMetaData_tSQLiteOutput_2 = conn_tSQLiteOutput_2.getMetaData();
            java.sql.ResultSet rsTable_tSQLiteOutput_2 = dbMetaData_tSQLiteOutput_2.getTables(null, null, null, new String[]{"TABLE"});
            boolean whetherExist_tSQLiteOutput_2 = false;
            while(rsTable_tSQLiteOutput_2.next()) {
                String table_tSQLiteOutput_2 = rsTable_tSQLiteOutput_2.getString("TABLE_NAME");
                if(table_tSQLiteOutput_2.equalsIgnoreCase(row2.name)) {
                    whetherExist_tSQLiteOutput_2 = true;
                    break;
                }
            }
            rsTable_tSQLiteOutput_2.close();
                if(whetherExist_tSQLiteOutput_2) {
                    java.sql.Statement stmtDrop_tSQLiteOutput_2 = conn_tSQLiteOutput_2.createStatement();
                    	
                    stmtDrop_tSQLiteOutput_2.execute("DROP TABLE \"" + tableName_tSQLiteOutput_2 + "\"");
                    	
                }
                java.sql.Statement stmtCreate_tSQLiteOutput_2 = conn_tSQLiteOutput_2.createStatement();
                	
                stmtCreate_tSQLiteOutput_2.execute("CREATE TABLE \"" + tableName_tSQLiteOutput_2 + "\"(\"uuid\" VARCHAR(0)  ,\"obsValue\" VARCHAR(0)  ,\"obsValue2\" VARCHAR(0)  )");
                	
	    String insert_tSQLiteOutput_2 = "INSERT INTO \"" + row2.name + "\" (\"uuid\",\"obsValue\",\"obsValue2\") VALUES (?,?,?)";
	    java.sql.PreparedStatement pstmt_tSQLiteOutput_2 = conn_tSQLiteOutput_2.prepareStatement(insert_tSQLiteOutput_2);
	    

 



/**
 * [tSQLiteOutput_2 begin ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostgresqlInput_1", false);
		start_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tPostgresqlInput_1";

	
		int tos_count_tPostgresqlInput_1 = 0;
		
    	class BytesLimit65535_tPostgresqlInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tPostgresqlInput_1().limitLog4jByte();
	
    
	
		    int nb_line_tPostgresqlInput_1 = 0;
		    java.sql.Connection conn_tPostgresqlInput_1 = null;
		        conn_tPostgresqlInput_1 = (java.sql.Connection)globalMap.get("conn_tPostgresqlConnection_1");
				
		    
			java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1.createStatement();

		    String dbquery_tPostgresqlInput_1 = "with ns as (\nselect ARRAY[\n             ARRAY['xlink', 'http://www.w3.org/1999/xlink'], \n             ARRAY['gmd', 'http://www.isotc211.org/2005/gmd'], \n             ARRAY['gco', 'http://www.isotc211.org/2005/gco'],\n             ARRAY['gml', 'http://www.opengis.net/gml'],\n             ARRAY['gmx', 'http://www.isotc211.org/2005/gmx']\n             ] as n\n)\n\nSELECT \n    uuid, \n    array_to_string(thesaurus, '') as thesaurus, \n    translate(regexp_split_to_table(keyword::TEXT, E','), '{,},\\\"', '') AS keyword\nFROM (SELECT uuid, \n       xpath('" + row2.xpath1 + "', node, n) as keyword\n      ,xpath('" + row2.xpath2 + "', node,\n  n) as thesaurus\nFROM (\nSELECT uuid, unnest(xpath('" + row2.root + "',  XMLPARSE(DOCUMENT data), n))  AS node \nFROM metadata, ns\nWHERE isTemplate = 'n'\n  --AND data LIKE '%%'  \n  ) sub, ns) a";
			

                       globalMap.put("tPostgresqlInput_1_QUERY",dbquery_tPostgresqlInput_1);

		    java.sql.ResultSet rs_tPostgresqlInput_1 = null;
		try{
		    rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1.executeQuery(dbquery_tPostgresqlInput_1);
		    java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1.getMetaData();
		    int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1.getColumnCount();

		    String tmpContent_tPostgresqlInput_1 = null;
		    
		    
		    while (rs_tPostgresqlInput_1.next()) {
		        nb_line_tPostgresqlInput_1++;
		        
							if(colQtyInRs_tPostgresqlInput_1 < 1) {
								row7.uuid = null;
							} else {
	                         		
        	row7.uuid = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 1, true);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 2) {
								row7.obsValue = null;
							} else {
	                         		
        	row7.obsValue = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 2, true);
		                    }
							if(colQtyInRs_tPostgresqlInput_1 < 3) {
								row7.obsValue2 = null;
							} else {
	                         		
        	row7.obsValue2 = routines.system.JDBCUtil.getString(rs_tPostgresqlInput_1, 3, true);
		                    }
					


 



/**
 * [tPostgresqlInput_1 begin ] stop
 */
	
	/**
	 * [tPostgresqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 


	tos_count_tPostgresqlInput_1++;

/**
 * [tPostgresqlInput_1 main ] stop
 */

	
	/**
	 * [tSQLiteOutput_2 main ] start
	 */

	

	
	
	currentComponent="tSQLiteOutput_2";

	

			//row7
			//row7


			
				if(execStat){
					runStat.updateStatOnConnection("row7"+iterateId,1, 1);
				} 
			

		
	



        whetherReject_tSQLiteOutput_2 = false;
                    if(row7.uuid == null) {
pstmt_tSQLiteOutput_2.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_2.setString(1, row7.uuid);
}

                    if(row7.obsValue == null) {
pstmt_tSQLiteOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_2.setString(2, row7.obsValue);
}

                    if(row7.obsValue2 == null) {
pstmt_tSQLiteOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tSQLiteOutput_2.setString(3, row7.obsValue2);
}


                       pstmt_tSQLiteOutput_2.addBatch();
                       batchSizeCounter_tSQLiteOutput_2++;
                       nb_line_tSQLiteOutput_2++;
                if ((batchSize_tSQLiteOutput_2 > 0) && (batchSize_tSQLiteOutput_2 <= batchSizeCounter_tSQLiteOutput_2)) {
                    int[] status_tSQLiteOutput_2 = null;
                    int countSum_tSQLiteOutput_2 = 0;
                    try {
                        batchSizeCounter_tSQLiteOutput_2 = 0;
                        status_tSQLiteOutput_2 = pstmt_tSQLiteOutput_2.executeBatch();
                        for(int countEach_tSQLiteOutput_2: status_tSQLiteOutput_2) {
                            countSum_tSQLiteOutput_2 += (countEach_tSQLiteOutput_2 < 0 ? 0 : countEach_tSQLiteOutput_2);
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tSQLiteOutput_2: e.getUpdateCounts()) {
                            countSum_tSQLiteOutput_2 += (countEach_tSQLiteOutput_2 < 0 ? 0 : countEach_tSQLiteOutput_2);
                        }
                        System.err.println(e.getMessage());
                    }
                    try {
                        tmp_batchUpdateCount_tSQLiteOutput_2 = pstmt_tSQLiteOutput_2.getUpdateCount();
                    }catch (java.sql.SQLException e){
                        System.err.println(e.getMessage());
                    }
                    tmp_batchUpdateCount_tSQLiteOutput_2 = tmp_batchUpdateCount_tSQLiteOutput_2 > countSum_tSQLiteOutput_2 ? tmp_batchUpdateCount_tSQLiteOutput_2 : countSum_tSQLiteOutput_2;
                        insertedCount_tSQLiteOutput_2 += tmp_batchUpdateCount_tSQLiteOutput_2;
               }
                commitCounter_tSQLiteOutput_2++;
                if(commitEvery_tSQLiteOutput_2 <= commitCounter_tSQLiteOutput_2) {
                try {
                    if (batchSizeCounter_tSQLiteOutput_2 > 0) {
	                    int countSum_tSQLiteOutput_2 = 0;
	                    
	                    for(int countEach_tSQLiteOutput_2: pstmt_tSQLiteOutput_2.executeBatch()) {
	                        countSum_tSQLiteOutput_2 += (countEach_tSQLiteOutput_2 < 0 ? 0 : countEach_tSQLiteOutput_2);
	                    }
	                    
	                    
	                        insertedCount_tSQLiteOutput_2 += countSum_tSQLiteOutput_2;
	                    
	                    batchSizeCounter_tSQLiteOutput_2 = 0;
                    }
                }catch (java.sql.BatchUpdateException e){
                        int countSum_tSQLiteOutput_2 = 0;
                        for(int countEach_tSQLiteOutput_2: e.getUpdateCounts()) {
                            countSum_tSQLiteOutput_2 += (countEach_tSQLiteOutput_2 < 0 ? 0 : countEach_tSQLiteOutput_2);
                        }
                            insertedCount_tSQLiteOutput_2 += countSum_tSQLiteOutput_2;
                        System.err.println(e.getMessage());
                }
                
                conn_tSQLiteOutput_2.commit();
                commitCounter_tSQLiteOutput_2=0;
            }

 


	tos_count_tSQLiteOutput_2++;

/**
 * [tSQLiteOutput_2 main ] stop
 */



	
	/**
	 * [tPostgresqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

	}
}finally{
	stmt_tPostgresqlInput_1.close();

}
globalMap.put("tPostgresqlInput_1_NB_LINE",nb_line_tPostgresqlInput_1);
 

ok_Hash.put("tPostgresqlInput_1", true);
end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());




/**
 * [tPostgresqlInput_1 end ] stop
 */

	
	/**
	 * [tSQLiteOutput_2 end ] start
	 */

	

	
	
	currentComponent="tSQLiteOutput_2";

	




                    int[] status_tSQLiteOutput_2 = null;
                    int countSum_tSQLiteOutput_2 = 0;
                    try {
                        if(pstmt_tSQLiteOutput_2!=null && batchSizeCounter_tSQLiteOutput_2 > 0 ){
                            status_tSQLiteOutput_2 = pstmt_tSQLiteOutput_2.executeBatch();
                            for(int countEach_tSQLiteOutput_2: status_tSQLiteOutput_2) {
                                countSum_tSQLiteOutput_2 += (countEach_tSQLiteOutput_2 < 0 ? 0 : countEach_tSQLiteOutput_2);
                            }
                        }
                    }catch (java.sql.BatchUpdateException e){
                        for(int countEach_tSQLiteOutput_2: e.getUpdateCounts()) {
                            countSum_tSQLiteOutput_2 += (countEach_tSQLiteOutput_2 < 0 ? 0 : countEach_tSQLiteOutput_2);
                        }
                        System.err.println(e.getMessage());
                    }
                    if(pstmt_tSQLiteOutput_2!=null && batchSizeCounter_tSQLiteOutput_2 > 0 ){
                        try {
                            tmp_batchUpdateCount_tSQLiteOutput_2 = pstmt_tSQLiteOutput_2.getUpdateCount();
                        }catch (java.sql.SQLException e){

                        }
                        tmp_batchUpdateCount_tSQLiteOutput_2 = tmp_batchUpdateCount_tSQLiteOutput_2 > countSum_tSQLiteOutput_2 ? tmp_batchUpdateCount_tSQLiteOutput_2 : countSum_tSQLiteOutput_2;
                            insertedCount_tSQLiteOutput_2 += tmp_batchUpdateCount_tSQLiteOutput_2;
                    }
                    if(pstmt_tSQLiteOutput_2 != null) {
                        pstmt_tSQLiteOutput_2.close();
                    }

        if (commitCounter_tSQLiteOutput_2 > 0) {
            conn_tSQLiteOutput_2.commit();
        }
        conn_tSQLiteOutput_2 .close();
		resourceMap.put("finish_tSQLiteOutput_2", true);

	int rejectedCount_tSQLiteOutput_2 = 0;
	nb_line_deleted_tSQLiteOutput_2=nb_line_deleted_tSQLiteOutput_2+ deletedCount_tSQLiteOutput_2;
	nb_line_update_tSQLiteOutput_2=nb_line_update_tSQLiteOutput_2 + updatedCount_tSQLiteOutput_2;
	nb_line_inserted_tSQLiteOutput_2=nb_line_inserted_tSQLiteOutput_2 + insertedCount_tSQLiteOutput_2;
	nb_line_rejected_tSQLiteOutput_2=nb_line_rejected_tSQLiteOutput_2 + rejectedCount_tSQLiteOutput_2;
	
        globalMap.put("tSQLiteOutput_2_NB_LINE",nb_line_tSQLiteOutput_2);
        globalMap.put("tSQLiteOutput_2_NB_LINE_UPDATED",nb_line_update_tSQLiteOutput_2);
        globalMap.put("tSQLiteOutput_2_NB_LINE_INSERTED",nb_line_inserted_tSQLiteOutput_2);
        globalMap.put("tSQLiteOutput_2_NB_LINE_DELETED",nb_line_deleted_tSQLiteOutput_2);
        globalMap.put("tSQLiteOutput_2_NB_LINE_REJECTED", nb_line_rejected_tSQLiteOutput_2);
    
	


			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row7"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tSQLiteOutput_2", true);
end_Hash.put("tSQLiteOutput_2", System.currentTimeMillis());




/**
 * [tSQLiteOutput_2 end ] stop
 */



						if(execStat){
							runStat.updateStatOnConnection("iterate4", 2, "exec" + NB_ITERATE_tPostgresqlInput_1);
						}				
					





} // End of branch "row12"








} // End of branch "row2"



	
		} // C_01
	



	
	/**
	 * [tIterateToFlow_1_AI end ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_1";
	
	currentComponent="tIterateToFlow_1_AI";

	
	nb_line_tIterateToFlow_1_AI++;
}
globalMap.put("tIterateToFlow_1_AI_NB_LINE",nb_line_tIterateToFlow_1_AI);
 

ok_Hash.put("tIterateToFlow_1_AI", true);
end_Hash.put("tIterateToFlow_1_AI", System.currentTimeMillis());




/**
 * [tIterateToFlow_1_AI end ] stop
 */

	
	/**
	 * [tExtractDelimitedFields_1 end ] start
	 */

	

	
	
	currentComponent="tExtractDelimitedFields_1";

	

globalMap.put("tExtractDelimitedFields_1_NB_LINE",nb_line_tExtractDelimitedFields_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tExtractDelimitedFields_1", true);
end_Hash.put("tExtractDelimitedFields_1", System.currentTimeMillis());




/**
 * [tExtractDelimitedFields_1 end ] stop
 */

	
	/**
	 * [tReplicate_1 end ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tReplicate_1", true);
end_Hash.put("tReplicate_1", System.currentTimeMillis());




/**
 * [tReplicate_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row11"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */




	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tJavaFlex_2 end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_2";

	


// end of the component, outside/closing the loop
      

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row5"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaFlex_2", true);
end_Hash.put("tJavaFlex_2", System.currentTimeMillis());




/**
 * [tJavaFlex_2 end ] stop
 */







	
	/**
	 * [tFilterRow_2 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	
    globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row8"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_2", true);
end_Hash.put("tFilterRow_2", System.currentTimeMillis());




/**
 * [tFilterRow_2 end ] stop
 */

	
	/**
	 * [tJavaFlex_3 end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_3";

	


// end of the component, outside/closing the loop
      

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row9"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaFlex_3", true);
end_Hash.put("tJavaFlex_3", System.currentTimeMillis());




/**
 * [tJavaFlex_3 end ] stop
 */







	
	/**
	 * [tFilterRow_3 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	
    globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_OK", nb_line_ok_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_REJECT", nb_line_reject_tFilterRow_3);
    

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row6"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tFilterRow_3", true);
end_Hash.put("tFilterRow_3", System.currentTimeMillis());




/**
 * [tFilterRow_3 end ] stop
 */

	
	/**
	 * [tJavaFlex_1 end ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	


// end of the component, outside/closing the loop
      

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row12"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaFlex_1", true);
end_Hash.put("tJavaFlex_1", System.currentTimeMillis());




/**
 * [tJavaFlex_1 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tIterateToFlow_1_AI"
							globalMap.remove("tIterateToFlow_1");
						
				try{
					
	
	/**
	 * [tIterateToFlow_1_AI finally ] start
	 */

	

	
	
		currentVirtualComponent = "tIterateToFlow_1";
	
	currentComponent="tIterateToFlow_1_AI";

	

 



/**
 * [tIterateToFlow_1_AI finally ] stop
 */

	
	/**
	 * [tExtractDelimitedFields_1 finally ] start
	 */

	

	
	
	currentComponent="tExtractDelimitedFields_1";

	

 



/**
 * [tExtractDelimitedFields_1 finally ] stop
 */

	
	/**
	 * [tReplicate_1 finally ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

 



/**
 * [tReplicate_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */




	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tJavaFlex_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaFlex_2";

	

 



/**
 * [tJavaFlex_2 finally ] stop
 */

	
	/**
	 * [tPostgresqlInput_2 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_2";

	

 



/**
 * [tPostgresqlInput_2 finally ] stop
 */

	
	/**
	 * [tSQLiteOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteOutput_1";

	



	
		if(resourceMap.get("finish_tSQLiteOutput_1")==null){
			if(resourceMap.get("conn_tSQLiteOutput_1")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tSQLiteOutput_1")).close();
					
				} catch (java.sql.SQLException sqlEx_tSQLiteOutput_1) {
					String errorMessage_tSQLiteOutput_1 = "failed to close the connection in tSQLiteOutput_1 :" + sqlEx_tSQLiteOutput_1.getMessage();
					
					System.err.println(errorMessage_tSQLiteOutput_1);
				}
			}
		}
	

 



/**
 * [tSQLiteOutput_1 finally ] stop
 */













	
	/**
	 * [tFilterRow_2 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 finally ] stop
 */

	
	/**
	 * [tJavaFlex_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaFlex_3";

	

 



/**
 * [tJavaFlex_3 finally ] stop
 */

	
	/**
	 * [tPostgresqlInput_3 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_3";

	

 



/**
 * [tPostgresqlInput_3 finally ] stop
 */

	
	/**
	 * [tSQLiteOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteOutput_3";

	



	
		if(resourceMap.get("finish_tSQLiteOutput_3")==null){
			if(resourceMap.get("conn_tSQLiteOutput_3")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tSQLiteOutput_3")).close();
					
				} catch (java.sql.SQLException sqlEx_tSQLiteOutput_3) {
					String errorMessage_tSQLiteOutput_3 = "failed to close the connection in tSQLiteOutput_3 :" + sqlEx_tSQLiteOutput_3.getMessage();
					
					System.err.println(errorMessage_tSQLiteOutput_3);
				}
			}
		}
	

 



/**
 * [tSQLiteOutput_3 finally ] stop
 */













	
	/**
	 * [tFilterRow_3 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 finally ] stop
 */

	
	/**
	 * [tJavaFlex_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaFlex_1";

	

 



/**
 * [tJavaFlex_1 finally ] stop
 */

	
	/**
	 * [tPostgresqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tPostgresqlInput_1";

	

 



/**
 * [tPostgresqlInput_1 finally ] stop
 */

	
	/**
	 * [tSQLiteOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tSQLiteOutput_2";

	



	
		if(resourceMap.get("finish_tSQLiteOutput_2")==null){
			if(resourceMap.get("conn_tSQLiteOutput_2")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tSQLiteOutput_2")).close();
					
				} catch (java.sql.SQLException sqlEx_tSQLiteOutput_2) {
					String errorMessage_tSQLiteOutput_2 = "failed to close the connection in tSQLiteOutput_2 :" + sqlEx_tSQLiteOutput_2.getMessage();
					
					System.err.println(errorMessage_tSQLiteOutput_2);
				}
			}
		}
	

 



/**
 * [tSQLiteOutput_2 finally ] stop
 */


















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tIterateToFlow_1_AI_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private java.util.Properties context_param = new java.util.Properties();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final sdiMetadataExtractor sdiMetadataExtractorClass = new sdiMetadataExtractor();

        int exitCode = sdiMetadataExtractorClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = sdiMetadataExtractor.class.getClassLoader().getResourceAsStream("backup2/sdimetadataextractor_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
            }
                context.outputDir=(String) context.getProperty("outputDir");
                context.pgDatabase=(String) context.getProperty("pgDatabase");
                context.pgHost=(String) context.getProperty("pgHost");
            		String pwd_pgPassword_value = context.getProperty("pgPassword");
            		context.pgPassword = null;
            		if(pwd_pgPassword_value!=null) {
            			if(context_param.containsKey("pgPassword")) {//no need to decrypt if it come from program argument or parent job runtime
            				context.pgPassword = pwd_pgPassword_value;
            			} else if (!pwd_pgPassword_value.isEmpty()) {
            				try {
            					context.pgPassword = routines.system.PasswordEncryptUtil.decryptPassword(pwd_pgPassword_value);
            					context.put("pgPassword",context.pgPassword);
            				} catch (java.lang.RuntimeException e) {
            					//do nothing
            				}
            			}
            		}
             try{
                 context.pgPort=routines.system.ParserUtils.parseTo_Integer (context.getProperty("pgPort"));
             }catch(NumberFormatException e){
                 context.pgPort=null;
              }
                context.pgSchema=(String) context.getProperty("pgSchema");
                context.pgUsername=(String) context.getProperty("pgUsername");
                context.resolveFilename=(String) context.getProperty("resolveFilename");
                context.sqliteFilename=(String) context.getProperty("sqliteFilename");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("outputDir")) {
                context.outputDir = (String) parentContextMap.get("outputDir");
            }if (parentContextMap.containsKey("pgDatabase")) {
                context.pgDatabase = (String) parentContextMap.get("pgDatabase");
            }if (parentContextMap.containsKey("pgHost")) {
                context.pgHost = (String) parentContextMap.get("pgHost");
            }if (parentContextMap.containsKey("pgPassword")) {
                context.pgPassword = (java.lang.String) parentContextMap.get("pgPassword");
            }if (parentContextMap.containsKey("pgPort")) {
                context.pgPort = (Integer) parentContextMap.get("pgPort");
            }if (parentContextMap.containsKey("pgSchema")) {
                context.pgSchema = (String) parentContextMap.get("pgSchema");
            }if (parentContextMap.containsKey("pgUsername")) {
                context.pgUsername = (String) parentContextMap.get("pgUsername");
            }if (parentContextMap.containsKey("resolveFilename")) {
                context.resolveFilename = (String) parentContextMap.get("resolveFilename");
            }if (parentContextMap.containsKey("sqliteFilename")) {
                context.sqliteFilename = (String) parentContextMap.get("sqliteFilename");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("pgPassword");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tPostgresqlConnection_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostgresqlConnection_1) {
globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", -1);

e_tPostgresqlConnection_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : sdiMetadataExtractor");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tPostgresqlConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }

		









    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tPostgresqlConnection_1", globalMap.get("conn_tPostgresqlConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     951049 characters generated by Talend Open Studio for Big Data 
 *     on the 07 August 2019 09:13:46 CEST
 ************************************************************************************************/